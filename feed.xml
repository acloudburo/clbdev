<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dev@cloudburo</title>
  <subtitle>Cloudburo Developer Blog</subtitle>
  <id>https://dev.cloudburo.net/</id>
  <link href="https://dev.cloudburo.net/"/>
  <link href="https://dev.cloudburo.net/feed.xml" rel="self"/>
  <updated>2015-07-28T10:16:46Z</updated>
  <author>
    <name>Felix Kuestahler</name>
  </author>
  <entry>
    <title>Docker Small Hints #5: Using Cloudwatch Alarms for monitoring AWS Elastic Beanstalk Docker Instances</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/07/28/docker-small-hints-5-using-cloudwatch-alarms-for-monitoring-aws-elastic-beanstal.html"/>
    <id>https://dev.cloudburo.net/2015/07/28/docker-small-hints-5-using-cloudwatch-alarms-for-monitoring-aws-elastic-beanstal.html</id>
    <published>2015-07-28T10:16:46Z</published>
    <updated>2015-07-28T22:16:55+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        My first docker based 
       &lt;a href="https://curation.cloudburo.net/"&gt;content curation microservice&lt;/a&gt; is in early beta mode and is working reliably for a longer period of time now. The last deployment of the application was up and working for 46 days without any major operational incident. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Suddenly the Micro-service stopped to generate blog entries out of Evernote Notes. I wasn’t monitoring this constellation up until now and detected it just about 4 hours later. Not very good when you want to go live. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        So time to start monitoring such kind of incidents by using CloudWatch and start sending out alarm emails in order to be capable to keep the service live all the time. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Elastic Beanstalk automatically uses&lt;br&gt;
       &lt;a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/AWSHowTo.cloudwatch.html"&gt;Amazon CloudWatch&lt;/a&gt; to help you  monitor your application and environment status.  The Amazon CloudWatch console gives you an overview of all of your resources as well as your alarms.&lt;br&gt;
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/c4254846da654fcf8f562b647a640a54.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        In order to handle this new kind of incidents it’s necessary to create a new alarm which detects the pattern, but &amp;hellip; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        … first the root cause analysis must be done, what the heck stopped to work as expected. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        My primary monitoring application for the java based micro service is 
       &lt;a href="https://logentries.com/"&gt;logentries.com&lt;/a&gt;. The java/groovy application on the EB Docker instance will send various kind of log information (via log4j  to the logentries log management and analytics application. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        As one can see in the below 24 hours log, everthing seems find up around 10:00 where no micro service log entries were shown anymore. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/ad9e91d21c0ec36e7aa2f399178f089a.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        That means something stopped working on the Amazon Docker instance, which wasn’t detected by AWS EB manager itself. E.g. in case my Microservice App would memory leaked over time and crash at one time, the AWS EB manager would detect that an restarted it automatically  (making the application available again after some minutes). Such an incident wouldn’t result in the above pattern. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        So I had to go on and check the AWS EB Docker instance logs directly (refer to the 
       &lt;a href="https://dev.cloudburo.net/2015/04/25/docker-small-hints-3-ssh-into-your-aws-elastic-beanstalk-component.html"&gt;following article&lt;/a&gt; how to achieve that).  A first glance  showed me that the java based microservice application was still running (on top of the list, consuming the major part of the memory). No restart or anything else happened, uptime was 46 days. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/71b4a9fbe17004641f16073d2c17628a.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        So let’s check then the application log of the eb docker container, which can be found in the /var/log/… directory. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/5dc5c78335f67a3340f824951697f0e4.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Counter checking with the last message received by logentries, it lead to the conclusion, that they local log is in sync with the logentries remote one. So the java process stopped working at that point in time and wasn’t producing any log events anymore. So we have to establish a monitoring strategy which is capable of identifying our hanging micro service process. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Time to define an AWS Cloudwatch Alert which will allows me to detect this inactivity/hanging process behavior. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Looking at the EB Monitoring in the Dashboard shows me that such an incident would result in &amp;ldquo;Max Network In“ flow of a small amount of KB’s (refer to the 
       &lt;a href="https://dev.cloudburo.net/2015/04/09/docker-small-hints-1-high-level-concepts-elastic-beanstalk.html"&gt;following article&lt;/a&gt; to understand the high level EB concepts). This seems to be the strongest signal for such a behaviour. Using the low CPU Utilization as a signal, seems not advisable, due to the fact that this threshold could shift in case of auto scaling scenarios. 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/8bd6de153b5e793c550b2185ba7f8d94.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Just to be sure I checked  the graph over a two weeks period of time. It shows me that this seems a good signal for a hanging microservice java process. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/813200dfe04e9b01b5d13837ee10ca7f.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Now let’s create an Alarm then, which is straightforward and easy and can be done on the EB Monitoring site directly. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/0f96def25c50580998ff55218391d961.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Let’s go back to the Dashboard to see if the Alarm is, correctly shown. Yes it got triggered. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/e63d6ee6edc3c73364addaae60b2cffb.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        The Alarm Dashboard shows the existing Alarm, very nice. It will be also visible on the Cloudwatch Dashboard site. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/4a88ab998c68e7eee4fbe76c2c0a418d.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        I also get notified via Email by the AWS Notification service to subscribe for the topic.&lt;br&gt;
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/513a3b55b0b3186a6c20103e82000aa9.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Having done that I will now receive timely  an Email when my microservice is hanging or inactive for more than some minutes. It allows me to timely restart or investigate the problem which results in a better service level for my clients. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        It a next article I will investigate in the possibilities to automate the creation of CloudWatch Alarms during my EB Environment creation step. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/3c1663d43864486db5b237ca1a1546e0.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Launching a New Product? These 5 Tips Will Get You the Testimonials You Need</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/07/26/launching-a-new-product-these-5-tips-will-get-you-the-testimonials-you-need.html"/>
    <id>https://dev.cloudburo.net/2015/07/26/launching-a-new-product-these-5-tips-will-get-you-the-testimonials-you-need.html</id>
    <published>2015-07-26T11:18:54Z</published>
    <updated>2015-07-28T15:09:22+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt; 
       &lt;div&gt;
         Demian Farnworth was publishing a very helpful article on the well known &amp;ldquo;copyblogger&amp;rdquo; site about the strategy how to get testimonials for your new product launch.&lt;br&gt;
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;div&gt;
         The article starts with a very illustrative thought experiment about the importance of trust 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;&lt;br&gt;&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;&amp;hellip; look at your birth certificate to confirm that you were indeed born on the day that your parents said you were born?&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;&lt;br&gt;&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;For most people, the answer is never. You simply took your parents’ word. Because you trusted them.&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;&lt;br&gt;&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;Your parents hopefully did a lot of things to help build that trust — like feed and clothe you, teach you lessons, play with you, and protect you. People who don’t have that experience, however, feel something entirely different: they question everything. They don’t inherently trust.&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;&lt;br&gt;&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;For most of us, though, if we read or hear something from someone we know, like, and trust, we accept it without question.&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;i&gt;As an entrepreneur, you need to think of your customer as a child who’s been burned one too many times. Who’s been hoodwinked, ridiculed, and neglected. Who’s defensive, reserved, and hard-nosed.&lt;/i&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;div&gt;
         The article moves on and introduces five simple methods to get hold of testimonials, which are seen as a prove of your claim about the usefullness of your new launched product: 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Offer free trials&lt;/li&gt; 
       &lt;li&gt;Create superb welcome experiences&lt;/li&gt; 
       &lt;li&gt;Ask for volunteers&lt;/li&gt; 
       &lt;li&gt;Build relationships with credible experts&lt;/li&gt; 
       &lt;li&gt;Invite people to a beta version&lt;/li&gt; 
      &lt;/ul&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        You can find the full article here 
      &lt;/div&gt; 
      &lt;div style=""&gt; 
       &lt;br&gt; 
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://www.copyblogger.com/get-testimonials/"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Favicon Generator which generates all the pictures for the various platforms</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/07/05/favicon-generator-which-generates-all-the-pictures-for-the-various-platforms.html"/>
    <id>https://dev.cloudburo.net/2015/07/05/favicon-generator-which-generates-all-the-pictures-for-the-various-platforms.html</id>
    <published>2015-07-05T09:41:00Z</published>
    <updated>2015-07-28T14:58:48+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        I found the 
       &lt;a href="http://realfavicongenerator.net/"&gt;following free favicon pictures generator&lt;/a&gt; incredibly useful. It generates favicon pictures and HTML code that work on all major browsers and platforms. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Instead of giving you a single favicon.ico file, RealFaviconGenerator generates all the pictures and HTML code you need to get a cool, mobile- and tablet-ready favicon. Your favicon will be perfect for: 
      &lt;/div&gt; 
      &lt;ul&gt; 
       &lt;li&gt;PC and Mac, as usual&lt;/li&gt; 
       &lt;li&gt;iPhone and iPad&lt;/li&gt; 
       &lt;li&gt;Android phones and tablets&lt;/li&gt; 
       &lt;li&gt;Windows 8 tablets&lt;/li&gt; 
       &lt;li&gt;And more&amp;hellip;&lt;/li&gt; 
      &lt;/ul&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        So have a look. 
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A nice introduction to Microservices</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/06/10/a-nice-introduction-to-microservices.html"/>
    <id>https://dev.cloudburo.net/2015/06/10/a-nice-introduction-to-microservices.html</id>
    <published>2015-06-10T08:53:32Z</published>
    <updated>2015-07-28T14:58:48+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        A nice introduction to Microservice topic is given by Chris Richardson (founder of CloudFoundry.com) on the nginx website. It’s a blog post in a 7-part series about designing, building, and deploying microservices. It’s worth to read the article which outlines several steps how to tackle the complexity backed by a pros and cons section about Microservices. 
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://nginx.com/blog/introduction-to-microservices/"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Docker Small Hints #2: Controlling Cloud Costs using Alarms in AWS</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/06/07/docker-small-hints-2-controlling-cloud-costs-using-alarms-in-aws.html"/>
    <id>https://dev.cloudburo.net/2015/06/07/docker-small-hints-2-controlling-cloud-costs-using-alarms-in-aws.html</id>
    <published>2015-06-07T04:05:06Z</published>
    <updated>2015-07-28T14:58:48+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        In order not to wake up one morning with a high AWS Cloud bill, it’s advisable to set a BillingAlarm which will notify you when your environments are starting charging more than you expect. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        In the sample below I will get an Email when the Estimated Charges for 6 hours is passing 10 USD.&lt;br&gt;
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/757bd37198cd347fe51640ac3bec9e06.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        It will allow you to react in time in case some of your instances will go out of your expected bound.&lt;br&gt;
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Docker Small Hints #4: Cleaning up your local zombie docker images</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/05/27/docker-small-hints-4-cleaning-up-your-local-zombie-docker-images.html"/>
    <id>https://dev.cloudburo.net/2015/05/27/docker-small-hints-4-cleaning-up-your-local-zombie-docker-images.html</id>
    <published>2015-05-27T08:46:21Z</published>
    <updated>2015-07-28T14:58:48+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt; 
   &lt;div&gt;
     The following commands I found very useful to get rid of zombie docker objects/images, which are accumulated over testing time. If you don’t remove them from time to time,  it can happen that your local docker environment runs out of space. Or you get some weird FileSystem errors during your docker build. 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
   &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  docker ps -a -q | xargs -n 1 docker rm 
  docker images -q --filter &lt;span class="s2"&gt;"dangling=true"&lt;/span&gt; | xargs docker rmi 
  docker images 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt; 
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
