<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dev@cloudburo</title>
  <subtitle>Cloudburo Developer Blog</subtitle>
  <id>https://dev.cloudburo.net/</id>
  <link href="https://dev.cloudburo.net/"/>
  <link href="https://dev.cloudburo.net/feed.xml" rel="self"/>
  <updated>2015-04-17T11:53:00Z</updated>
  <author>
    <name>Felix Kuestahler</name>
  </author>
  <entry>
    <title>Grails Small Hints #1 - Refresh Dependencies in Grails STS Tool Suite</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/17/grails-small-hints-1-refresh-dependencies-in-grails-sts-tool-suite.html"/>
    <id>https://dev.cloudburo.net/2015/04/17/grails-small-hints-1-refresh-dependencies-in-grails-sts-tool-suite.html</id>
    <published>2015-04-17T11:53:00Z</published>
    <updated>2015-04-21T18:39:11+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt;
        Adding dependencies in the Grails STS Tool Suite is sometimes painful, due to&amp;nbsp;the fact that changes in the BuildConfig.groovy is not taken over immediately. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        It resulted in long session try to run grails refresh-dependencies, rebuild the whole project or trying to fix it by restarting STS. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        This doesn’t really worked out until I found the following 
       &lt;a href="http://forum.spring.io/forum/spring-projects/springsource-tool-suite/121171-problem-with-dependencies-in-sts-grails" rel="nofollow"&gt;forum.spring.io Thread&lt;/a&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;span style=""&gt;&lt;i&gt;&amp;ldquo;Did you try the &amp;lsquo;refresh dependencies&amp;rsquo; option in the Grails menu (accesible if you right click on your project)?&lt;/i&gt;&lt;/span&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;span style=""&gt;&lt;i&gt;Just running the &amp;quot;grails refresh-dependencies&amp;rdquo; command itself isn&amp;rsquo;t sufficient to let the IDE pick up on dependency changes. You have to make the IDE itself &amp;lsquo;refresh&amp;rsquo; its dependencies.&lt;/i&gt;&lt;/span&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;span style=""&gt;&lt;i&gt;This is because The IDE and the command line tooling use seperate infrastructure for compiling your code. The IDE menu &amp;lsquo;refresh dependencies&amp;rsquo; is supposed to synch-up both worlds with eachother. Typically you have to do this if you made changes to the project dependencies by editing your project&amp;rsquo;s config files.&amp;ldquo;&lt;/i&gt;&lt;/span&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        &amp;nbsp; 
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The Benefits of Microservices</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/17/the-benefits-of-microservices.html"/>
    <id>https://dev.cloudburo.net/2015/04/17/the-benefits-of-microservices.html</id>
    <published>2015-04-17T10:24:00Z</published>
    <updated>2015-04-21T19:01:23+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt; 
       &lt;b&gt;During the online panel &lt;a href="https://www.youtube.com/watch?v=MRa21icSIQk" rel="nofollow"&gt;Exploring the Uncharted Territory of Microservices&lt;/a&gt;&amp;nbsp;organized by &lt;a href="http://www.xebialabs.com/" rel="nofollow"&gt;XebiaLabs&lt;/a&gt;, the following participants discussed the benefits of microservices: Gene Kim, author, researcher and former CTO at Tripwire, moderator; Gary Gruver, President at Practical Large Scale Agile LLC and former Director of Engineering for the LaserJet Enterprise at HP; Randy Shoup is &lt;a href="https://www.linkedin.com/vsearch/p?title=Consulting+CTO&amp;amp;trk=prof-exp-title" rel="nofollow"&gt;Consulting CTO&lt;/a&gt; at Randy Shoup Consulting and former Director of Engineering for Cloud Computing at Google; Andrew Phillips is VP Product Management at XebiaLabs.&amp;nbsp;The following&amp;nbsp;infoq article&amp;nbsp;extracted the main ideas, paraphrasing them in a short form.&lt;/b&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;p&gt;Gruver said that microservices enable architects to build large systems composed by small services that encapsulate the functionality corresponding to a single feature. This goes in contrast to large enterprise monolithic applications and has certain benefits in terms of managing the teams working on such projects, dealing with code changes and release cycles.&lt;/p&gt; 
       &lt;p&gt;Large monolithic codebases can have a deferred feedback loop, Gruver mentioning the case of a code breaking change that took 6 months to be discovered and one week to be fixed.&lt;/p&gt; 
       &lt;p&gt;Shoup considered that some of the most successful Internet companies –Amazon, eBay, Google, Netflix, Twitter, etc. - have moved to microservices because “the monolith grows and there is so much coordination overhead and so much fear of making change that everything slows down.”&lt;/p&gt; 
       &lt;p&gt;Shoup added:&amp;nbsp;microservices, Agile, DevOps are facets of the same idea -&amp;nbsp;breaking what we do into small, manageable pieces, and do those independently in parallel, enabling large companies to move&amp;nbsp;at the speed of the&amp;nbsp;small ones. Organizing the company and the development teams around microservices results in very small autonomous teams of 3-5 people responsible for one or several microservices. These teams make their own technology and methodology choices. This makes developers feel responsible for highly specialized and small codebase, getting to know them very well and resulting in high efficiency when it comes to improving them or fixing defects.&lt;/p&gt; 
       &lt;p&gt;The &lt;a href="http://research.google.com/pubs/pub36971.html" rel="nofollow"&gt;Google Megastore&lt;/a&gt; service is being developed by a small team of only 6 people and serves the needs of several other services including Google App Engine and Google Cloud Datastore. The later is one of the largest NoSQL services in the world and, yet, it has a team of only 6-8 people, according to Shoup.&lt;/p&gt; 
       &lt;p&gt;The risk associated with code changes is not linear with the number of modified lines of code. In a monolithic application, as the number of code changes grows, the risk rises exponentially because of all the dependencies that tend to build up in such systems over time. In the microservices world, using a continuous release cycle, changes are pretty small and developers can rapidly go over them and fix the eventual defects found, reducing the risk of a deployment. This results in higher velocity with lower associated risk, added Shoup.&lt;/p&gt; 
       &lt;p&gt;Gruver continued by saying that in contrast managing and coordinating a release for a large monolithic codebase containing thousands of changes done by hundreds of developers is daunting. One needs to make sure everything is in place, everything is in sync.&lt;/p&gt; 
       &lt;p&gt;Phillips remarked that, like Agile, DevOps and Continuous Delivery, microservices is not a silver bullet for everything, but it works in a certain context, and there is a cost associated with using such an approach. There is still room for monolithic applications in enterprises. Nonetheless, large codebases can be problematic, Phillips mentioning a Microsoft Word bug that has been around since 1995, and nobody has managed to trace it down.&lt;/p&gt; 
       &lt;p&gt;Another benefit of microservices mentioned by Phillips is that smaller codebases help developers focus and have a higher empathic relationship with the users of their product, leading to a better motivation and clarity in their work. The closer relationship with the users leads to a shorter feedback loop, finding faster which features should be implemented and what defects have appeared.&amp;nbsp;&lt;/p&gt; 
       &lt;p&gt;The panelists also addressed the issues related to changing a monolithic application into a microservices-based one. Gruver suggested: don’t re-architect everything, but start small, finding a meaningful business feature that would benefit from being implemented as a microservice, implement it, and test the system against it. Check how it integrates with the rest of the process, how continuous integration works for it. If it works well, remove the old code and start using it. The litmus test for success is if the organization can move faster by developing and releasing microservices independently. If that goal is not achieved, then it is no point in introducing a microservice architecture.&lt;/p&gt; 
       &lt;p&gt;Shoup&amp;nbsp;shared from his experience at eBay which re-architected their system by ordering the functionality based on revenue and started with the one that was the most profitable, then they worked it down through features that had a lower financial impact. There may be some functionality that never gets re-architected because it is of so little impact that it is not worthy doing that. When re-architecting a component, the first step is to separate it from the rest of the system by introducing an interface, then changing the implementation behind the interface as desired. The process can then be repeated with other components.&lt;/p&gt; 
       &lt;p&gt;Phillips considered that it is important to have a suite of tests when re-architecting a component, running them against the new interface before and after the new implementation is in place to make sure code changes are not modifying the system’s behavior.&lt;/p&gt; 
       &lt;p&gt;Gruver added that he&amp;nbsp;would not start a re-architecting process without having a suite of automated tests. Before re-architecting anything or implementing microservices, make sure you understand what business problem you are trying to solve. Then set objectives and goals and&amp;nbsp;make yourself accountable.&lt;/p&gt; 
       &lt;p&gt;Phillips mentioned that high-coupling between services is worse than duplicating&amp;nbsp;data between them, so he would rather have two copies of the same data than one copy and two services that end up being merged into one. (Some consider data duplication between services as an anti-pattern. See &lt;a href="http://www.infoq.com/news/2015/02/service-boundaries-healthcare" rel="nofollow"&gt;Udi Dahan on Defining Service Boundaries&lt;/a&gt;, Ed.)&lt;/p&gt; 
       &lt;p&gt;Answering a question from participants,&amp;nbsp;Shoup said that&amp;nbsp;re-architecting a monolithic application into a&amp;nbsp;microservices one may require pulling data out of a RDBMS and moving it into NoSQL data stores. One approach is to design microservices around domain entities persisted into&amp;nbsp;private NoSQL databases accessible through microservices’ interface. There should be only one copy of writable data per entity, but there can be multiple cached read-only copies spread throughout the system for performance reasons.&lt;/p&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Regarding the issue of managing the large number of interconnections between services, Shoup answered that Amazon or Google do not have an API gateway or an ESB to control the graph of relationships because from a service’s perspective things are very simple. A microservice does not need to be aware of all the interactions between all the other microservices, but rather only those with its own clients and the services it depends upon. The relationship with a client may include authorization and possibly managing a quota of requests per second served, while the relationship upstream means simply making a request to another service. The communication channel must be standardized though, so the services can understand each other, possible choices being RESTful Web APIs, RPC, or others. There can be both a synchronous mechanism and an asynchronous one. He mentioned Google using for this purpose a 
       &lt;a href="http://www.infoq.com/news/2015/02/grpc" rel="nofollow"&gt;RPC protocol which has just been open sourced&lt;/a&gt;. 
      &lt;/div&gt; 
      &lt;div&gt;
        In terms of governance, Shoup recommends for each team to be responsible for their service(s), including the operational effort involved, and should have SLAs agreed both upstream and downstream establishing the functional requirements. 
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://www.infoq.com/news/2015/03/benefits-microservices?utm_campaign=infoq_content&amp;amp;utm_source=infoq&amp;amp;utm_medium=feed&amp;amp;utm_term=global"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Gradle Small Hints #2 - Deploy and Integrate Maven Artifacts on Github</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/14/gradle-small-hints-2-deploy-and-integrate-maven-artifacts-on-github.html"/>
    <id>https://dev.cloudburo.net/2015/04/14/gradle-small-hints-2-deploy-and-integrate-maven-artifacts-on-github.html</id>
    <published>2015-04-14T08:00:00Z</published>
    <updated>2015-04-20T21:04:01+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
    The following steps are necessary to deploy and integrate artifacts in a Maven repository hosted on Github: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    Assumption is that you have a 
   &lt;b&gt;&lt;i&gt;&lt;span style=""&gt;clb_mvnrepo&lt;/span&gt;&lt;/i&gt;&lt;/b&gt; Github repository which manages your Maven Repository in a 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;releases&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; and 
   &lt;b&gt;&lt;i&gt;&lt;span style=""&gt;snapshots&lt;/span&gt;&lt;/i&gt;&lt;/b&gt; branch. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;span style="font-size: 24px;"&gt;&lt;b&gt;Build and Deploy&lt;/b&gt;&lt;/span&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    Clone the 
   &lt;i&gt;&lt;span style=""&gt;snapshots&lt;/span&gt;&lt;/i&gt; and 
   &lt;i&gt;&lt;span style=""&gt;releases&lt;/span&gt;&lt;/i&gt; branches of your Maven Repository to the local machine. You will publish the artifacts of your&amp;nbsp;project which you build into this target directory. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  git clone -b releases  https://github.com/talfco/clb_mvnrepo.git clb_mvnrepo_releases 
  git clone -b snapshots https://github.com/talfco/clb_mvnrepo.git clb_mvnrepo_snapshots 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 

&lt;p&gt;&lt;div&gt;
    In the&amp;nbsp; 
   &lt;b&gt;&lt;i&gt;&lt;span style=""&gt;build.gradle&lt;/span&gt;&lt;/i&gt;&lt;/b&gt; File of your project add the following entries: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    At the top of the file add the&amp;nbsp;maven publish plugin 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  apply plugin: 'groovy' 
  apply plugin: 'maven-publish' 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 

&lt;p&gt;&lt;div&gt;
    Additionally add the publishing configuration which points to your local Maven repository clone to your 
   &lt;b&gt;&lt;i&gt;&lt;span style=""&gt;build.gradle&lt;/span&gt;&lt;/i&gt;&lt;/b&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;&lt;br&gt;&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
publishing {
 publications {
 maven(MavenPublication) {
 groupId "com.cloudburo" 
 artifactId 'clb-gradleTask' 
 version '1.0.1-SNAPSHOT' 
 from components.java
 }
 }
 repositories {
 maven { url "/Users/Felix/Development/workspace-grails/clb_mvnrepo_snapshots" }
 } 
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 

&lt;p&gt;&lt;div&gt;
    Depending on the version number of 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;1.1.0&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; or 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;1.1.0-SNAPSHOT&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; configure the publishing configuration for the 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;releases&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; or 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;snapshots&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; local GIT clone directory. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    The 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;gradle publish&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; command will build your project and deploy it to&amp;nbsp;your 
   &lt;i&gt;&lt;b&gt;&lt;span style=""&gt;clb_mvnrepo&lt;/span&gt;&lt;/b&gt;&lt;/i&gt; directory. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    Having published it&amp;nbsp;into your publish directory, commit&amp;nbsp;and push via the git commands&amp;nbsp;to your&amp;nbsp;Github snapshot/release directory. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;b&gt;&lt;span style="font-size: 24px;"&gt;Integrate Released Artifacts&lt;/span&gt;&lt;/b&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    You can now reference the released libraries via the following gradle configuration 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  repositories { 
       mavenCentral() 
            maven { url 'https://github.com/talfco/clb_mvnrepo/raw/snapshots' } 
  } 
  dependencies { 
       classpath group : 'com.cloudburo' , name : 'clb-gradleTask' , version :  ‚1.1.0' } 
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt; 
  &lt;div&gt; 
   &lt;span style="font-size: 24px;"&gt;&lt;br&gt;&lt;/span&gt; 
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Docker Small Hints #2: Controlling Cloud Costs using Alarms in AWS</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/13/docker-small-hints-2-controlling-cloud-costs-using-alarms-in-aws.html"/>
    <id>https://dev.cloudburo.net/2015/04/13/docker-small-hints-2-controlling-cloud-costs-using-alarms-in-aws.html</id>
    <published>2015-04-13T06:05:00Z</published>
    <updated>2015-04-20T21:04:01+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt;
        In order not to wake up one morning with a high AWS Cloud bill, it’s advisable to set a BillingAlarm which will notify you when your environments are starting charging more than you expect. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        In the sample below I will get an Email when the Estimated Charges for 6 hours is passing 10 USD.&amp;nbsp; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/757bd37198cd347fe51640ac3bec9e06.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        It will allow you to react in time in&amp;nbsp;case some of your instances will&amp;nbsp;go out of&amp;nbsp;your expected bound.&amp;nbsp; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Docker Small Hints #1:  High Level Concepts Elastic Beanstalk</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/09/docker-small-hints-1-high-level-concepts-elastic-beanstalk.html"/>
    <id>https://dev.cloudburo.net/2015/04/09/docker-small-hints-1-high-level-concepts-elastic-beanstalk.html</id>
    <published>2015-04-09T06:25:00Z</published>
    <updated>2015-04-20T21:04:01+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt;
        Cloud Platforms are normally highly generic and configurable and it’s easy to loose overview, what can be configured or modified where. So I assembled some of the main high level concepts for AWS Elastic Beanstalk.&amp;nbsp; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;b&gt;&lt;span style="font-size:24px;"&gt;Level 0: Concepts&lt;/span&gt;&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;Elastic Beanstalk is structured around the 3 high level concepts. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;A&amp;nbsp;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Version&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt; of an (&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Docker)&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Application&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt; is running in one &lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Environment&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;Elastic Beanstalk allows you to&amp;nbsp;run in parallel 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;i&gt;&lt;b&gt;Multiple Versions&lt;/b&gt;&lt;/i&gt; 
       &lt;i&gt; of &lt;/i&gt; 
       &lt;i&gt;&lt;b&gt;multiple (Docker) Applications&lt;/b&gt;&lt;/i&gt; 
       &lt;i&gt; in &lt;/i&gt; 
       &lt;i&gt;&lt;b&gt;multiple Environments&lt;/b&gt;&lt;/i&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;The Dashboard will show you all deployed 
       &lt;b&gt;Applications&lt;/b&gt; which can be running in multiple&amp;nbsp; 
       &lt;b&gt;Environments&lt;/b&gt;. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;In the screenshot below we have one Docker Application „ 
       &lt;i&gt;curationApp“&lt;/i&gt; which has to two environments&amp;nbsp;„ 
       &lt;i&gt;curationApp-prod&lt;/i&gt;“ and „ 
       &lt;i&gt;curationApp-test&amp;quot;&lt;/i&gt; 
       &lt;br&gt; 
      &lt;/div&gt; &lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/95051bbe9efdb4532199204d0f61fd2e.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;div&gt; 
       &lt;br&gt;An 
       &lt;b&gt;Environment&lt;/b&gt; may run one of your released docker&amp;nbsp;Application Versions. You could now „ 
       &lt;i&gt;Deploy&lt;/i&gt;“ one of your versions to one of your Environments. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;In the example below the environment &amp;ldquo; 
       &lt;i&gt;curationApp-prod&amp;rdquo;&lt;/i&gt; is running Version 0.0.5. 
      &lt;/div&gt; &lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/22c0aadeda311a7a7ede6ab4973ba58d.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
       &lt;b&gt;&lt;span style="font-size:24px;"&gt;Level 1: Concepts&lt;/span&gt;&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;By selecting an 
       &lt;b&gt;Environment&lt;/b&gt; you will see the Dashboard of the running 
       &lt;b&gt;Application Version&lt;/b&gt;&amp;nbsp;which is configured on a AWS 
       &lt;b&gt;Solution Stack&lt;/b&gt;. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;In our example below this a Docker solution running on Amazon Linux. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;A running Environment has a 
       &lt;b&gt;Health Status&lt;/b&gt; and an associated&amp;nbsp; 
       &lt;b&gt;Configuration.&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;It’s processing can be checked via 
       &lt;b&gt;Logs&lt;/b&gt;, 
       &lt;b&gt;Realtime Monitors, Events&lt;/b&gt; or 
       &lt;b&gt;Alarms.&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;Furthermore an Environment may be complemented with&amp;nbsp; 
       &lt;b&gt;Tags&lt;/b&gt;.&amp;nbsp; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;b&gt;Configuration&lt;/b&gt;, 
       &lt;b&gt;Alarms&lt;/b&gt; and 
       &lt;b&gt;Tags&lt;/b&gt; may be maintained a set according to your needs. 
      &lt;/div&gt; &lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/2a86af971f134a9e2fbd2c7a4ca91115.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
       &lt;span style="font-size:24px;"&gt;&lt;b&gt;Main Workflow&lt;/b&gt;&lt;/span&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;The Main Workflow consists of the following step: 
      &lt;/div&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;b&gt;Baseline&lt;/b&gt;&amp;nbsp;your Docker Application Directory (e.g. checkin to git)&lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Create&lt;/b&gt; an new &lt;b&gt;Application Version ZIP File&lt;/b&gt; of your baselined Docker Application &lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Transfer&lt;/b&gt; the &lt;b&gt;Application Version ZIP File&lt;/b&gt; to your Amazon &lt;b&gt;S3&lt;/b&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Configure&lt;/b&gt; &amp;nbsp;an &lt;b&gt;Beanstalk&lt;/b&gt; &lt;b&gt;Application Version&lt;/b&gt; item&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Deploy&lt;/b&gt; the new &lt;b&gt;Beanstalk&lt;/b&gt;&amp;nbsp;&lt;b&gt;Application Version&lt;/b&gt; to a&amp;nbsp;&lt;b&gt;Beanstalk&amp;nbsp;Environment&amp;nbsp;&lt;/b&gt;&lt;/li&gt; 
       &lt;li&gt;The Deploy will &lt;b&gt;Restart and Reconfigure&lt;/b&gt; the Environment&lt;/li&gt; 
      &lt;/ul&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Gradle Small Hints #1 - Zipping up a file tree</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/08/gradle-small-hints-1-zipping-up-a-file-tree.html"/>
    <id>https://dev.cloudburo.net/2015/04/08/gradle-small-hints-1-zipping-up-a-file-tree.html</id>
    <published>2015-04-08T08:38:00Z</published>
    <updated>2015-04-20T21:04:01+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
    Don’t know but&amp;nbsp; took me some time to figure out how to ZIP up a project directory required for my AWS Elastic Beanstalk Deployment. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    The task will collect all relevant files for my project directory (which contains the docker configuration) and writes it into the build directly. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
task myZip(type: Zip) {
   from ('.')
   include '**/*.groovy'
   include '**/*.config'
   include '*'
   exclude '.gradle'
   exclude '.settings'
   exclude 'bin'
   exclude 'build'
   exclude 'logs'
   exclude 'src/test'
   exclude '.classpath'
   exclude '.project'
   into '.'
   destinationDir(file("build")) 
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 

&lt;p&gt;&lt;div&gt;
    Or also possible 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
task dockerZip(type: Zip) { 
    from fileTree(dir: '.', 
    includes: ['**/*.groovy', '**/*.config','*'], 
    excludes: ['.gradle','.settings','bin','build','logs','src/test','.classpath','.project']) 
    into '.'
   destinationDir(file("build")) 
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/span&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;span style=""&gt;&lt;br&gt;&lt;/span&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;span style="font-size: 11px;"&gt;&lt;span style=""&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
