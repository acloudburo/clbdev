<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dev@cloudburo</title>
  <subtitle></subtitle>
  <id>https://dev.cloudburo.net</id>
  <link href="https://dev.cloudburo.net"/>
  <link href="https://dev.cloudburo.net/feed.xml" rel="self"/>
  <updated>2016-07-18T16:06:09Z</updated>
  <author>
    <name>Felix K?stahler</name>
  </author>
  <entry>
    <title>Meteor Small Hints #5: Server Code Fragments executed twice on Startup</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2016/07/18/meteor-small-hints-5-server-code-fragments-executed-twice-on-startup.html"/>
    <id>https://dev.cloudburo.net/2016/07/18/meteor-small-hints-5-server-code-fragments-executed-twice-on-startup.html</id>
    <published>2016-07-18T16:06:09Z</published>
    <updated>2016-10-26T16:07:08+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
    Recently I got confused with my Meteor application, by having the server code executed twice at startup. So the code was initialising my application twice, as well as duplicated for example my Slack Sysadmin Bot running as part of the instance.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    I was first thinking that it has something to do with my IntelliJ Webstorm IDE running in debug mode, but also the local test-, as well the my Modulus remote environment was showing the same symptom.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    After some hours of debugging I luckily found the following
   &lt;a href="https://github.com/Differential/meteor-workers/issues/9"&gt;Github issue entry&lt;/a&gt; which showed me the right direction.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    As part of my application I introduced
   &lt;a href="https://github.com/Differential/meteor-workers"&gt;Differential meteor-workers&lt;/a&gt;, which allows to spawn headless worker meteor processes to work on async jobs. For example, passing a message to my Slack SysAdmin Bot is done via Job.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;SlackSysAdminBotJob&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Job&lt;/span&gt; 
    &lt;span class="na"&gt;handleJob&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sendMessage"&lt;/span&gt; 
        &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;postTo&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    Such a async Job can be easily triggered, like shown here (which will hand the work over to a worker process.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;
    &lt;span class="nx"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SlackSysAdminBotJob&lt;/span&gt; 
          &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sendMessage"&lt;/span&gt; 
          &lt;span class="na"&gt;slackBot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;myBot&lt;/span&gt; 
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt; 
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; 
        &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
           &lt;span class="c1"&gt;# Check it 
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    Now introducing the Differential async worker resulted in the problem, that not only the master process, BUT also the worker process will be initialised with each Server startup code fragment. Which is not what we want.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    So I had to extend each server Meter.startup code fragment by introducing an
   &lt;i&gt;isClusterMaster&lt;/i&gt; check
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Plattform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
      &lt;span class="na"&gt;isClusterMaster&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Meteor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isServer&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Npm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cluster'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isMaster&lt;/span&gt; 


&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    As for example:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;Meteor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startup&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;Plattform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isClusterMaster&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
      &lt;span class="c1"&gt;# The startup code 
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Now the startup initialization will be only executed on the master in the cluster and not for each worker process.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A Terminology Guide to DAOs, DACs, DAs and More</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2016/06/21/a-terminology-guide-to-daos-dacs-das-and-more.html"/>
    <id>https://dev.cloudburo.net/2016/06/21/a-terminology-guide-to-daos-dacs-das-and-more.html</id>
    <published>2016-06-21T22:17:15Z</published>
    <updated>2016-10-26T16:07:08+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Due to the recent DAO hack in the Ethereum blockchain network (which resulted in the stealing of around 50 millions), I was starting to dig a little bit deeper into this new technology approach.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The topic is quite complex and overloaded with different terms and abbreviations, which makes it difficult to understand in the beginning. Therefore I’m quite pleased that Ethereum blog, released a “Incomplete Terminology Guide” around the topic of “decentralised autonomous entities”, which is a popular topic in the digital consensus space (yet a new term for crypto-currency 2.0). It introduces concise definitions of the important concepts and helps in establishing a basic understanding (well its sounds like science fiction from time to time). The article can be found
       &lt;a href="https://blog.ethereum.org/2014/05/06/daos-dacs-das-and-more-an-incomplete-terminology-guide/"&gt;here&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div&gt;
        By the way one of the most easy to read articles about the DAO hack, complemented with a lot of details and facts, can be found  in
       &lt;a href="https://medium.com/@pullnews/understanding-the-dao-hack-for-journalists-2312dd43e993#.6usjlleot"&gt;Understanding the DAO Hack for Journalists&lt;/a&gt; on Medium. It’s aimed at Journalists, which ensures that the topic is not too technical overloaded.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        If you want to understand the details (as well a quite readable intro is provided) refer to the following technical paper “
       &lt;a href="https://docs.google.com/document/d/10kTyCmGPhvZy94F7VWyS-dQ4lsBacR2dUgGTtV98C40/mobilebasic#heading=h.e437su2ytbf9"&gt;A Call for a temporary Moratorium on The DAO&lt;/a&gt;”, which is outlining the inherent problems in The DAO Smart Contract solution around three weeks before the Hack happened. I have to re-read the article from time to time to incrementally improve my understanding in the topic domain.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Facit: Every revolutionary as well evolutionary step is not easy to achieve and there are pushback and failures. For the new kid on the block “blockchain”, it’s the second pushback after the MtGox Bitcoin disaster last year. Hopefully the “lessons are learnt” and we will in the mid-term achieve the vision of decentralised autonomous entities. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px;"&gt;&lt;i&gt;This blog entry was fully produced within Evernote and published using the &lt;a href="https://publishingbot.cloudburo.net"&gt;Cloudburo Publishing Bot&lt;/a&gt;.&lt;/i&gt;&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A categorisation of bots used for conversational commerce</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2016/06/09/a-categorisation-of-bots-used-for-conversational-commerce.html"/>
    <id>https://dev.cloudburo.net/2016/06/09/a-categorisation-of-bots-used-for-conversational-commerce.html</id>
    <published>2016-06-09T21:14:47Z</published>
    <updated>2016-10-27T17:29:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;img class="pull-left img-responsive img-thumbnail article" src="/images/2fde18b8f7f44b41a8b1d656f6e86f61.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;b&gt;Chat Bots&lt;/b&gt;, as the new way to engage with your clients, it’s a trending concept and approach in 2016.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Forbes is even asking if
       &lt;a href="http://www.forbes.com/sites/parmyolson/2016/05/09/could-chat-bots-replace-human-jobs-facebook"&gt;ChatBots could replace Human Jobs&lt;/a&gt; or VentureBeat is talking from the
       &lt;a href="http://venturebeat.com/2016/05/22/this-is-the-start-of-the-post-app-era/"&gt;Start of the Post App Era&lt;/a&gt;, which handed over to the Bot Era.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For example refer to the following Google Trend graph, which shows how the search keyword  Chatbots spiked in the last months in 2016.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div&gt;
        &lt;script type="text/javascript" src="//www.google.ch/trends/embed.js?hl=en-GB&amp;amp;q=chatbots&amp;amp;date=1/2016+12m&amp;amp;cmpt=q&amp;amp;tz=Etc/GMT-2&amp;amp;tz=Etc/GMT-2&amp;amp;content=1&amp;amp;cid=TIMESERIES_GRAPH_0&amp;amp;export=5&amp;amp;w=500&amp;amp;h=330"&gt;&lt;/script&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        But let’s look first at the bot type categorisation which will help to better understand the topic.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In the e-commerce sector, they are using the term
       &lt;i&gt;conversational commerce bots&lt;/i&gt;. The
       &lt;a href="http://venturebeat.com/2016/05/21/the-5-branches-of-conversational-commerce-a-guide-for-the-bot-curious/"&gt;Venturebeat article&lt;/a&gt; by Jeff Lawson of Twilio introduces a nice categorisation of the various bot types which can be used in commerce.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        First of all the term conversational commerce is defined as
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;A future of technology driven by messaging (and voice) interactions that transcend current communication modalities.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Jeff Lawson counts five different trends converging on conversational commerce:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;p&gt;1. Advanced notifications&lt;br&gt; 2. Bots&lt;br&gt; 3. Chat in apps&lt;br&gt; 4. Apps in chat&lt;br&gt; 5. Humans chatting with each other&lt;/p&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find all the details in the Venturebeat article.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;span style="font-size: 11px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px;"&gt;&lt;i&gt;BTW: This blog entry was fully produced within Evernote and published using the &lt;a href="https://publishingbot.cloudburo.net"&gt;Cloudburo Publishing Bot&lt;/a&gt;.&lt;/i&gt;&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://venturebeat.com/2016/05/21/the-5-branches-of-conversational-commerce-a-guide-for-the-bot-curious/"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Meteor Small Hints #4: Reading this.params values in the iron-router Data Context</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2016/05/23/meteor-small-hints-4-reading-this-params-values-in-the-iron-router-data-context.html"/>
    <id>https://dev.cloudburo.net/2016/05/23/meteor-small-hints-4-reading-this-params-values-in-the-iron-router-data-context.html</id>
    <published>2016-05-23T17:03:55Z</published>
    <updated>2016-10-26T16:07:07+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
   &lt;a href="http://iron-meteor.github.io/iron-router"&gt;Iron-router&lt;/a&gt; is a powerful Meteor router that works on the server and browser. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In this article we describe how you can read out a query parameter via the data context of the iron-router, which then can be processed later in the  template. In the below example we have outsourced the routing logic for
   &lt;i&gt;/dashboard&lt;/i&gt; to an iron-router controller file.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt; &lt;span class="s"&gt;'/dashboard'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"dashboard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'DashboardController'&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    In the URL call we will pass in a query parameter, e.g.
   &lt;a href="https://bots.cloudburo.net/dashboard?regCode=%E2%80%9CT@myProductName"&gt;&lt;a href="https://bots.cloudburo.net/dashboard?regCode=%E2%80%9CT@myProductName"&gt;https://bots.cloudburo.net/dashboard?regCode=“T@myProductName&lt;/a&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Now in order to retrieve this query parameter - via the
   &lt;i&gt;this.params&lt;/i&gt; object - in the iron-router data context,
   &lt;u&gt;&lt;b&gt;you have to use for the data assignment a function&lt;/b&gt;&lt;/u&gt;
   &lt;i&gt;.&lt;/i&gt;  Trying it without a function call the this.params will not be returned. This took m quite some time to figure out, I always tried it with direct assignment in the data section.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DashboardController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AppController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;extend&lt;/span&gt; 


    &lt;span class="na"&gt;waitOn&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt; &lt;span class="s"&gt;'userData'&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt; &lt;span class="s"&gt;'productTypes'&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt; &lt;span class="s"&gt;'products'&lt;/span&gt; 
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subscribe&lt;/span&gt; &lt;span class="s"&gt;'productAdmins'&lt;/span&gt; 


    &lt;span class="c1"&gt;# Use a function to allocate the data context, when you require this.params values 
&lt;/span&gt;    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;regCode&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
        &lt;span class="nx"&gt;Plattform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dashboard Controller called with "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;regCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="nx"&gt;regC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;regCode&lt;/span&gt; 
      &lt;span class="k"&gt;else&lt;/span&gt; 
        &lt;span class="nx"&gt;regC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;undefined&lt;/span&gt; 
      &lt;span class="nx"&gt;templateData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
        &lt;span class="na"&gt;productTypes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProductTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="na"&gt;productAdmins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProductAdmins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="na"&gt;currencySymbol&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Plattform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCurrencySymbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; 
        &lt;span class="na"&gt;regCode&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;regC&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;templateData&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    In the template itself I can reference directly the
   &lt;i&gt;regCode&lt;/i&gt; value
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dashboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rendered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
      &lt;span class="nx"&gt;Plattform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;debug&lt;/span&gt; &lt;span class="s"&gt;"Template.dashboard.rendered"&lt;/span&gt; 
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.statusicon'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="na"&gt;tooltip&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;regCode&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;Products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
          &lt;span class="nx"&gt;Plattform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A new client from subscriber page - regCode: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;regCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
          &lt;span class="nx"&gt;splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;regCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;splits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; 
            &lt;span class="nx"&gt;productType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ProductTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;splits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;productType&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;splits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"T"&lt;/span&gt; 
                &lt;span class="nx"&gt;testProduct&lt;/span&gt; &lt;span class="nx"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_id&lt;/span&gt; 
              &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;splits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"S"&lt;/span&gt; 
                &lt;span class="nx"&gt;buyProduct&lt;/span&gt; &lt;span class="nx"&gt;productType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_id&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 11px;"&gt;&lt;i&gt;This blog entry was fully produced within Evernote and published using the &lt;a href="https://publishingbot.cloudburo.net"&gt;Cloudburo Publishing Bot&lt;/a&gt;.&lt;/i&gt;&lt;/span&gt;
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>How We Built an Ecommerce Business from Scratch and Generated $922.16 in Revenue in 3 Days</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2016/05/13/how-we-built-an-ecommerce-business-from-scratch-and-generated-922-16-in-revenue-.html"/>
    <id>https://dev.cloudburo.net/2016/05/13/how-we-built-an-ecommerce-business-from-scratch-and-generated-922-16-in-revenue-.html</id>
    <published>2016-05-13T23:04:33Z</published>
    <updated>2016-10-07T08:02:35+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Shopify has an execellent blog when it comes down to tips for startups or micro enterprises. There advices are always very practical oriented.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Richard Lazazzera presented a nice article “how build an ecommerce business from scratch and see how many sales we could generate in three days”.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For many entrepreneurs, building their first business can be intimidating. There’s seemingly hundreds of steps, choices and paths to get to the finish line of just launching your business, let alone generating traffic and sales. Richard outlines and describes the following steps in detail:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;Getting Started In most cases, it takes some money to make money.&lt;/li&gt;
       &lt;li&gt;What Should We Sell?&lt;/li&gt;
       &lt;li&gt;Determining an Ecommerce Business Model &lt;/li&gt;
       &lt;li&gt;Finding a High Quality Dropshipper&lt;/li&gt;
       &lt;li&gt;Broadening Our Product Supplier Search Terms&lt;/li&gt;
       &lt;li&gt;Ordering a Sample Product to Verify Product&lt;/li&gt;
       &lt;li&gt;Determining Product Pricing &lt;/li&gt;
       &lt;li&gt;Creating and Designing a Brand Keeping&lt;/li&gt;
       &lt;li&gt;Deciding On a Business Name&lt;/li&gt;
       &lt;li&gt;Designing a Logo That was Simple and Effective&lt;/li&gt;
       &lt;li&gt;Creating Product Logo&lt;/li&gt;
       &lt;li&gt;Taking the Product Photography with Our Smartphones&lt;/li&gt;
       &lt;li&gt;Setting Up Our Shopify Store&lt;/li&gt;
       &lt;li&gt;Setting up the Product Page&lt;/li&gt;
       &lt;li&gt;Sales Channels and Marketing Strategies&lt;/li&gt;
       &lt;li&gt;Personal Outreach to Friends and Family&lt;/li&gt;
       &lt;li&gt;Product Hunt&lt;/li&gt;
       &lt;li&gt;Reddit&lt;/li&gt;
       &lt;li&gt;Instagram&lt;/li&gt;
       &lt;li&gt;Pinterest&lt;/li&gt;
       &lt;li&gt;Facebook Paid Advertising&lt;/li&gt;
       &lt;li&gt;Twitter&lt;/li&gt;
       &lt;li&gt;Marketing Channel Results - Overview&lt;/li&gt;
       &lt;li&gt;Overall Setup and Marketing Expenses&lt;/li&gt;
       &lt;li&gt;Conclusion&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        An astonishing list of activities and findings. Especially the sections about the various Sales Channels and their effectiveness is helpful when you establishing your own business.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find the complete article
       &lt;a href="https://www.shopify.com/blog/34526469-how-we-built-an-ecommerce-business-from-scratch-and-generated-922-16-in-revenue-in-3-days"&gt;here&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="https://www.shopify.com/blog/34526469-how-we-built-an-ecommerce-business-from-scratch-and-generated-922-16-in-revenue-in-3-days"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The Anatomy of a EB based Microservice - Github Docker Integration</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2016/05/12/the-anatomy-of-a-eb-based-microservice-github-docker-integration.html"/>
    <id>https://dev.cloudburo.net/2016/05/12/the-anatomy-of-a-eb-based-microservice-github-docker-integration.html</id>
    <published>2016-05-12T21:14:14Z</published>
    <updated>2016-10-26T16:07:06+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      &lt;div&gt;
        The article describes the fundamental steps for the base setup of the Amazon Elastic Beanstalk Runtime Configuration.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For handling S3 based configuration aspects of our Microservices we will setup a bucket, which holds any kind of file required by our Microservices.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In order to be fit for grow we will introduce a naming convention from start. An asset/configuration item required for our microservice ecosystem, will start with „
       &lt;span style=""&gt;TST&lt;/span&gt;“, you should follow a similar strategy in your area. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;strong&gt;&lt;br&gt;&lt;/strong&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;strong&gt;Setup&lt;span style="font-size: 18px;"&gt; &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;up a S3 Bucket for our Microservices&lt;/strong&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;We will call our Amazon S3 Bucket, using &lt;span style=""&gt;ms&lt;/span&gt; as an acronym for &lt;span style=""&gt;microservice&lt;/span&gt;.
        &lt;ul&gt;
         &lt;li&gt;&lt;span style=""&gt;tst.ms.common.&amp;lt;region&amp;gt;&lt;/span&gt;&lt;/li&gt;
         &lt;li&gt;The bucket will hold any data which is common to all our microservices.&lt;/li&gt;
        &lt;/ul&gt; &lt;/li&gt;
       &lt;li&gt;Be aware of that the S3 Bucket must &lt;span style="text-decoration: underline;"&gt;be in the same region&lt;/span&gt; as your Elastic Beanstalk Instance, therefore we append the region postfix, e.g. &lt;span style=""&gt;tst.ms.common.us-west-2.&lt;/span&gt;&lt;/li&gt;
       &lt;li&gt;With the region postfix, we can easily introduce the same bucket in other regions - in case we want to replicate our installations cross-region - following a clean and easy to understand name scheme.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;strong&gt;Create an IAM Policy for the S3 Bucket Access&lt;/strong&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;strong&gt;&lt;br&gt;&lt;/strong&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;We create now an Amazon AWS Identity and Access Management(IAM) Policy, which is a read policy, which will be attached to any of our running microservices:
        &lt;ul&gt;
         &lt;li&gt;IAM Policy: &lt;span style=""&gt;TST.S3.Read.clb_ms_common&lt;/span&gt;&lt;/li&gt;
         &lt;li&gt;We will include here any common buckets of the various regions, for now we have only one&lt;/li&gt;
        &lt;/ul&gt; &lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/fa1f9d80fa3e99cfd43cb10f08f2fd30.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;strong&gt;Allocate the policy to your  IAM Role&lt;/strong&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having defined a read policy, we have to attach now the police to our
       &lt;a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts-roles.html#concepts-roles-instance"&gt;Elastic Beanstalk instance profile&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Refer to the following article, 
       &lt;a href="https://dev.cloudburo.net/2015/12/20/the-anatomy-of-a-eb-based-microservice-aws-security-configuration.html"&gt;The Anatomy of a EB based Microservice - AWS Security Configuration&lt;/a&gt;, which describes how to setup an EB instance profile.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We will attach to the role the above created the bucket read policy.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/f1cc61e5c345dcb0403a760325cfe237.png" /&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    So we have now a common bucket ready in our Elastic Beanstalk region,  which is attached with read-rights to our EB instance configuration.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Now head over to your EB project which contains the EB Docker configuration.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px;"&gt;&lt;strong&gt;Storing your dockerhub credentials required to access your private Github docker account&lt;/strong&gt;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The common bucket will be used for storing your dockerhub credentials in order to allow EB to pull your private docker image. In case you are working with a public docker image this step is not required.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;ul&gt;
   &lt;li&gt;As a first step store your github credentials in the common bucket, as for example in the file &lt;span style=""&gt;tst.ms.common.us-west-2&lt;/span&gt;/&lt;span style=""&gt;credentials.json&lt;/span&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="s2"&gt;"https://index.docker.io/v1/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
                &lt;/span&gt;&lt;span class="s2"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"myauth1245="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
                &lt;/span&gt;&lt;span class="s2"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"myemail@gmail.com"&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; 

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;ul&gt;
   &lt;li&gt;You docker sensitive access data is now available to EB in a encrypted manner and secured at rest.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;b&gt;&lt;span style="font-size: 18px;"&gt;Configure the docker file in your Elastic Beanstalk Directory&lt;/span&gt;&lt;/b&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;ul&gt;
   &lt;li&gt;Add the following entry to your &lt;span style=""&gt;Dockerrun.aws.json. &lt;/span&gt;The file describes your &lt;a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker_image.html"&gt;EB single container docker configuration&lt;/a&gt; and the entry will tell EB where to find your authentication information to access your private docker hub repository.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    "Authentication": { 
      "Bucket": "clb.ms.common.us-west-2", 
      "Key": "credentials.json" 
    }, 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;ul&gt;
   &lt;li&gt;Finally add an entry where to find the docker image to the &lt;span style=""&gt;Dockerrun.aws.json&lt;/span&gt; file&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    "Image": { 
      "Name": „&amp;lt;dockerhubUsername&amp;gt;/curationplatform:v1.0.2", 
      "Update": "true" 
    }, 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;ul&gt;
   &lt;li&gt;The overall Dockerrun.aws.json file will look like as following and EB will load your application from a private dockerhub repository.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"AWSEBDockerrunVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"Authentication"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="s2"&gt;"Bucket"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tst.ms.common.us-west-2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="s2"&gt;"Key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"credentials.json"&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"Image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="s2"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dockerhubusername/curationplatform:v1.0.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="s2"&gt;"Update"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"Volumes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="s2"&gt;"HostDirectory"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/var/log"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="s2"&gt;"ContainerDirectory"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/home/app/log"&lt;/span&gt;&lt;span class="w"&gt; 
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"Ports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; 
       &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; 
         &lt;/span&gt;&lt;span class="s2"&gt;"ContainerPort"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"80"&lt;/span&gt;&lt;span class="w"&gt; 
       &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; 
     &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="s2"&gt;"Logging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/var/log/docker.log"&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; 

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
