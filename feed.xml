<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dev@cloudburo</title>
  <subtitle></subtitle>
  <id>https://dev.cloudburo.net</id>
  <link href="https://dev.cloudburo.net"/>
  <link href="https://dev.cloudburo.net/feed.xml" rel="self"/>
  <updated>2020-01-03T01:15:43+00:00</updated>
  <author>
    <name>Felix K</name>
  </author>
  <entry>
    <title>The Diagrammer Series - How To Read The Diagrams</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2020/01/03/the-diagrammer-series-how-to-read-the-diagrams.html"/>
    <id>https://dev.cloudburo.net/2020/01/03/the-diagrammer-series-how-to-read-the-diagrams.html</id>
    <published>2020-01-03T01:15:43+00:00</published>
    <updated>2020-01-03T08:20:16+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 16pt;"&gt;&lt;span style="font-size: 16pt; color: rgb(47, 84, 150); font-family: &amp;quot;Calibri Light&amp;quot;; font-weight: bold;"&gt;Understanding Business Concept Model Diagrams&lt;/span&gt;&lt;/span&gt;
        &lt;div&gt;
         &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Dependent on your background, the reading of the UML diagrams in the context of the Diagrammer article series may not be straightforward. But I can assure you that you get quickly on speed having the main concepts understood. &lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/5bf7689dc364e8b086dd6c496fe1f14b.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The diagram technique is using the Unified Modeling Language (UML)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri; font-style: italic;"&gt;The Unified Modeling Language is a general-purpose, developmental, modeling language in the field of software engineering that intends to provide a standard way to visualize the design of a system&lt;/span&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri;"&gt;[5]&lt;/span&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri; font-style: italic;"&gt;.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The flexibility of the modeling language allows you to visualize almost any aspect of a system by using multiple diagram types, as well as applying UML profiles.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;By the way, with the phrase system, we don’t mean only IT systems but any kind of it&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri; font-style: italic;"&gt;A set of things working together as parts of a mechanism or an interconnecting network.&lt;/span&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri;"&gt;[6]&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;As one can see from the definition above, the general concept “Thing” is the nucleus around which a business concept models are built up. More about “The Thing” later.&lt;/span&gt;
        &lt;/div&gt;
        &lt;span style="font-size: 13pt; color: rgb(47, 84, 150); font-family: &amp;quot;Calibri Light&amp;quot;;"&gt;The FIBO Model as the Semantic Anchor&lt;/span&gt;
        &lt;div&gt;
         &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The article series concentrates on a conceptual model of Decentralized Finance aspects. In order not to reinvent the wheel, we establish the model on top of the FIBO model, which serves as the semantic anchor.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The Financial Industry Business Ontology (FIBO) is a business conceptual model developed by the Enterprise Data Management Council (EDMC) about how all financial instruments, business entities, and processes work in the financial industry. [7]&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;By linking our model to the FIBO one, we get a firm root into the concepts as understood and used by people in the finance industry for each of their components, and the terms used for them.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;font style="font-family: Calibri; font-size: 11pt; color: rgb(68, 114, 196);"&gt;&lt;span style="font-style: italic;"&gt;FIBO is intended for a range of users including in its simplest form as an English language Glossary that could be used to inform a bank or a regulator’s Data Dictionary, or the actual FIBO Data Dictionary could be repurposed as a bank or regulators Data Dictionary. In its most complex form, FIBO in its native Web Ontology Language (OWL), could be used as a bank’s operational ontology. There are also those external uses of FIBO such as&lt;/span&gt; &lt;a href="http://fibo.schema.org/" style="font-style: italic; color: rgb(68, 114, 196);"&gt;FIBO.schema.org&lt;/a&gt; &lt;span style="font-style: italic;"&gt;which uses FIBO as a reference to find specific information on the Internet&lt;/span&gt;&lt;span style="font-style: italic;"&gt; &lt;/span&gt;&lt;span style="font-style: italic;"&gt;[8]&lt;/span&gt;&lt;/font&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;So what’s an ontology then&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri; font-style: italic;"&gt;An ontology (in OWL) is made up of statements about Classes (i.e., sets of things) and Properties (ways that things relate to other things). FIBO defines the sets of things that are of interest in financial business applications and the ways that those things can relate to one another. In this way, FIBO can give meaning to any data (e.g., spreadsheets, relational databases, XML documents) that describe the business of finance. FIBO considers both Classes and Properties to be Concepts. The languages of Ontologies were originally developed by the US DoD and are codified by the World Wide Web Consortium (W3C).&lt;/span&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri;"&gt;[8]&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;We don’t dive here into more detail about OWL, which is a Semantic Web language designed to represent rich and complex knowledge about things, groups of things, and relations between things. We do that at a later stage and concentrate on the diagrammatic representation of concept models, which can be expressed in UML class diagrams.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;There are two main categories of diagram types describing an aspect of the model&lt;/span&gt;
        &lt;/div&gt;
        &lt;ul style="margin-top: 0mm; margin-bottom: 0mm; margin-left: 0mm; padding-left: 0pt;"&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div&gt;
           &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Structure diagrams emphasize the things that must present in the system being modeled&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div style="margin-top: 0pt; margin-bottom: 8pt;"&gt;
           &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Behavior Diagrams emphasize what must happen in the system being modeled&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;We use both kinds of diagrams in the article series but start for now with Class Diagrams.&lt;/span&gt;
        &lt;/div&gt;
        &lt;span style="font-size: 13pt; color: rgb(47, 84, 150); font-family: &amp;quot;Calibri Light&amp;quot;;"&gt;Class Diagram &lt;/span&gt;
        &lt;div&gt;
         &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Structural models in UML, especially Class models, are frequently used to define and visualize business concept models as defined above.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; font-family: Calibri;"&gt;Concepts are represented by classes, while relationships are represented by associations.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="text-align: left; margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/aa2255f1580a40f95c340e913f8f181f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm; text-align: center;"&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; font-family: Calibri;"&gt;For example, the Diagram1 consists of&lt;/span&gt;
        &lt;/div&gt;
        &lt;ul style="margin-top: 0mm; margin-bottom: 0mm; margin-left: 0mm; padding-left: 0pt;"&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div&gt;
           &lt;span style="font-size: 11pt; color: rgb(0, 0, 0); font-family: Calibri;"&gt;Three&lt;/span&gt;
           &lt;span style="font-size: 11pt; font-family: Calibri; font-weight: bold;"&gt;Classes&lt;/span&gt;
           &lt;span style="font-size: 11pt; font-family: Calibri;"&gt;  “Trading,” “Market” and “Risk”&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div&gt;
           &lt;span style="font-size: 11pt; color: rgb(0, 0, 0); font-family: Calibri;"&gt;Two&lt;/span&gt;
           &lt;span style="font-size: 11pt; font-family: Calibri; font-weight: bold;"&gt;Associations&lt;/span&gt;
           &lt;span style="font-size: 11pt; font-family: Calibri;"&gt;“takesPlace” and “bears”&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div style="margin-top: 0pt; margin-bottom: 8pt;"&gt;
           &lt;span style="font-size: 11pt; color: rgb(0, 0, 0); font-family: Calibri;"&gt;The two associations have multiplicity associated with the specific classes “Market” and “Risk.”&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; font-family: Calibri;"&gt;The overall diagram reads as follows:&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; font-family: Calibri;"&gt;“Trading takes place in zero to multiple Markets, and each Market may bear zero to multiple Risks.”&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/31c3fc318d9fce2918e5a5e873ab7c70.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; font-family: Calibri;"&gt;Two additional relationship types play as well a role in our concept modeling&lt;/span&gt;
        &lt;/div&gt;
        &lt;ul style="margin-top: 0mm; margin-bottom: 0mm; margin-left: 0mm; padding-left: 0pt;"&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div&gt;
           &lt;span style="font-size: 11pt; color: rgb(0, 0, 0); font-family: Calibri;"&gt;Generalization Relationship: a generalization relationship is a relationship in which one class element (the child) is based on another class element (the parent). The two concepts in relation have to be of the same type. The child element represents a refinement or more specific element of the parent one. For example, two specific Risk Types.&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div&gt;
           &lt;span style="font-size: 11pt; color: rgb(0, 0, 0); font-family: Calibri;"&gt;Aggregation Relationship:  an aggregation relationship is a relationship in which a class is a part of or subordinate to the other element. In a way, it assembles or configures a more complex object. For example, an important aspect of a Market is Market Liquidity. We use the aggregation here because the Liquidity is a part of the Market itself. It would not exists on its own when there is no Market.&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div style="margin: 0.7mm 0mm 0mm; text-align: left;"&gt;
         &lt;span style=" font-size: 12pt; color: rgb(31, 55, 99); font-family: &amp;quot;Calibri Light&amp;quot;;"&gt;Naming Conventions&lt;/span&gt;
        &lt;/div&gt;
        &lt;div&gt;
         &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;In Associations and Relations, we use the terms&lt;/span&gt;
        &lt;/div&gt;
        &lt;ul style="margin-top: 0mm; margin-bottom: 0mm; margin-left: 0mm; padding-left: 0pt;"&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div&gt;
           &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;mayHave, to express the optionality in the relation, i.e., the multiplicity 0..1&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
         &lt;li style="margin-left: 33pt; margin-right: 0pt; padding-left: 0pt; font-size: 11pt;"&gt;
          &lt;div style="margin-top: 0pt; margin-bottom: 8pt;"&gt;
           &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;hasA, to express the multiplicity of 1&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;That’s the minimal primer about Class diagrams. We enhance and enrich the diagrams in the context of FIBO ontology mapping, but let’s keep it simple for the moment, one step after the other, and switch over to our actors.&lt;/span&gt;
        &lt;/div&gt;
        &lt;span style="font-size: 13pt; color: rgb(47, 84, 150); font-family: &amp;quot;Calibri Light&amp;quot;;"&gt;The Diagrammer’s Actors – Alice &amp;amp; Bob&lt;/span&gt;
        &lt;div&gt;
         &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Exploring important real-world concepts in diagrams also requires actors who engage and interact with systems and individuals.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/40802f4d7316263ca27a7d4c60492921.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="text-align: center; margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 9pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Maybe an inspiration for the most famous crypto couple: Movie 1968 “Bob &amp;amp; Carol &amp;amp; Ted &amp;amp; Alice”  (&lt;/span&gt;
         &lt;a href="https://themovieisle.com/2018/12/11/blu-ray-review-arrow-videos-bob-carol-ted-alice-arrow-academy/" style="text-indent: 0mm; font-size: 9pt; color: rgb(0, 0, 255); font-family: Calibri; line-height: 108%; text-decoration: underline;"&gt;Link&lt;/a&gt;
         &lt;span style=" font-size: 9pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;)&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;In the diagrammer series, we are following the actor naming approach, which was introduced by Ron Rivest, Adi Shamir, and Leonard Adleman in their crypto paper 1978 and is as of today the de-facto standard in the crypto and engineering world when it comes down to “place-holder” names, aka “Alice and Bob.”&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri; font-style: italic;"&gt;Alice and Bob are the names of fictional characters used for convenience and to aid comprehension. For example, &amp;ldquo;How can Bob send a private message M to Alice in a public-key cryptosystem?&amp;rdquo; is believed to be easier to describe and understand than &amp;ldquo;How can B send a private message M to A in a public-key cryptosystem?&amp;rdquo;&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri; font-style: italic;"&gt;In cryptography and computer security, Alice and Bob are used extensively as participants in discussions about cryptographic protocols or systems. The names are conventional, and other than Alice and Bob often use a rhyming mnemonic to associate the name with the typical role of that person.&lt;/span&gt;
         &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri;"&gt;[9]&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Over time a full cast of additional actors was introduced; you can find a list here [9]. As we progress in the series, we introduce new actors -  with a rhyming mnemonic - if necessary.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/c0829a15eb1fa32be9a32c00d9b797b9.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;In the example above, Alice plays a role as “Alice the Buyer” who will interact with “Bob the Seller,” as well as “Alice the Borrower,” which interacts with “Bob the Lender.”  “Charlie the Custodian” may play a role as well.&lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt; Want to know more about the most famous crypto couple? Head over to&lt;/span&gt;
         &lt;a href="http://cryptocouple.com/" style="text-indent: 0mm; font-size: 11pt; color: rgb(0, 0, 255); font-family: Calibri; line-height: 108%; text-decoration: underline;"&gt;&lt;a href="http://cryptocouple.com/"&gt;http://cryptocouple.com/&lt;/a&gt;&lt;/a&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/37824ab9b81c16a8f37e5ad16c022865.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;That’s it for today; we are now ready to dive into the DEFI concept models…&lt;/span&gt;
        &lt;/div&gt;
       &lt;/div&gt;
       &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;&lt;/div&gt;Bibliography
       &lt;table style="border-collapse: collapse; min-width: 100%;"&gt;
        &lt;tbody&gt;
         &lt;tr style=""&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;[7]&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;“Enterprise Data Management Council (EDM Council),” EDMCouncil, [Online]. Available: &lt;a href="https://edmcouncil.org/"&gt;&lt;a href="https://edmcouncil.org/"&gt;https://edmcouncil.org/&lt;/a&gt;&lt;/a&gt;.&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr style=""&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;[8]&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;“FIBO Primer,” EDM Councile, June 2019.&lt;/span&gt;
            &lt;span style=""&gt;[Online]. Available: &lt;a href="https://cdn.ymaws.com/edmcouncil.org/resource/collection/16D6DC67-430E-4F75-9E07-08B1EC228091/FIBO_Primer_v0.2.pdf"&gt;&lt;a href="https://cdn.ymaws.com/edmcouncil.org/resource/collection/16D6DC67-430E-4F75-9E07-08B1EC228091/FIBO_Primer_v0.2.pdf"&gt;https://cdn.ymaws.com/edmcouncil.org/resource/collection/16D6DC67-430E-4F75-9E07-08B1EC228091/FIBO_Primer_v0.2.pdf&lt;/a&gt;&lt;/a&gt;.&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr style=""&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;[9]&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;“Wikipedia Alice and Bob,” Wikipedia, [Online].&lt;/span&gt;
            &lt;span style=""&gt;Available: &lt;a href="https://en.wikipedia.org/wiki/Alice_and_Bob"&gt;&lt;a href="https://en.wikipedia.org/wiki/Alice_and_Bob"&gt;https://en.wikipedia.org/wiki/Alice_and_Bob&lt;/a&gt;&lt;/a&gt;.&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
         &lt;/tr&gt;
        &lt;/tbody&gt;
       &lt;/table&gt;
       &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
        &lt;span style="mso-fareast-font-family: &amp;quot;Times New Roman&amp;quot;;"&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
        &lt;span style=""&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
        &lt;span style=" font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="https://d.docs.live.net/f250da2627755048/Documents/Cloudburo/The%20Diagrammer/1%20-%20How%20To%20Read%20The%20Diagrams.docx"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The Diagrammer Series – Explaining The DEFI World In Diagrams</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/12/23/the-diagrammer-series-explaining-the-defi-world-in-diagrams.html"/>
    <id>https://dev.cloudburo.net/2019/12/23/the-diagrammer-series-explaining-the-defi-world-in-diagrams.html</id>
    <published>2019-12-23T01:39:38+00:00</published>
    <updated>2020-01-03T01:15:39+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
        &lt;div&gt;
         &lt;span style="font-size: 14pt; color: rgb(47, 84, 150); font-family: &amp;quot;Calibri Light&amp;quot;; font-weight: bold;"&gt;Mergenthaler’s Diagrammer disrupted the graphs room in the seventies&lt;/span&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The goal of the &amp;ldquo;Diagrammer Series&amp;rdquo; is to explain the evolving systems landscape and its associated concepts in the context of Decentralized Finance in a visualized way using (UML) diagramming techniques. &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;When researching for a blog series name, the word “Diagrammer” jumped into the mind.  Similar to the words “the banker,” “the writer,” “the programmer,” “the diagrammer,” would describe the person&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri; font-weight: bold;"&gt;who documents the systems and concepts of the world in diagrams and drawings to provide more clarity and helps for a better understanding of them.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Well, the word Diagrammer doesn’t exist according to the Oxford dictionary, so I did some Google search queries to understand how the world is commonly used in the world.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The search brought me to a very interesting Video published via the Vimeo platform [1], which explains the Mergenthaler’s Diagrammer, an automated machine used in the seventies for the production of printed quality engineering drawings and photographic films.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Amazed by the approach used fifty years ago to tackle the automation of diagramming, I thought it was a perfect fit to kick off my Diagrammer series to explore systems and concepts in the new world of decentralized finance.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/7c171a42b09a34572ad85b155ed710c7.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;span style="font-size: 13pt; color: rgb(47, 84, 150); font-family: &amp;quot;Calibri Light&amp;quot;;"&gt;Mergenthaler’s Diagrammer to automate the drafting in the seventies&lt;/span&gt;
         &lt;div&gt;
          &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Producing engineering diagrams in the seventies was a laborious task, which involved a lot of manual, complex drawing tasks in large graph rooms.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/9742580c4a86c7ee7e3a33e7289626b5.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt; Everything had to be drawn by hand with a pencil, which may result in a drafting bottleneck in the overall engineering process.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/fb68caef7e974580554f736a2f80e6cd.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;So the Mergenthaler Linotype Company&lt;/span&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri; font-weight: bold;"&gt;-&lt;/span&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;which was founded in 1886 by Ottmar Mergenthaler in the United States in 1886 and revolutionized the book and newspaper typesetting process with its famous Linotype machine – was searching for a practical approach to automating drafting.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;They found in the Diagrammer - the so-called “Shirt Sleeves Automation” – a solution which would tackle the photo drafting bottleneck an reduce the graph room operational costs, as well as produce superior diagram quality than the manual output.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/3b8724f2b200e048f313463bba475edf.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;In the production of a single diagram, the operator attaches a sheet of film behind the viewing screen of the operator unit.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/718f7d74ae1c88c8c51e4844a198f6b6.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;After receiving a rough sketch of the drawing, he attaches it to the front of the viewing screen to be used as a progress reference during the production cycle.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/b7362b4050b7b9e37d0bbd20fc3c3640.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The drawing itself is done via the symbol buttons panel, which can hold up to 256 symbols.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/f186f1adfb7ed2c265afe3e507c01263.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;The symbol is optically projected onto the screen and can be moved around to bring it to its proper location and orientation.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/3b0961827299702e403a342ec6651ce3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;By pressing the Expose button, the symbol was recorded on the special film. This process takes less than a second and allowed to speed up and standardize the drawings.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/f38149c7e1815ca400c144208bddcfd5.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;In the end, normal film development was necessary to get the diagrams done.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/5769fc6526b38b7aea819c4b5776f876.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Quite amazing how, in the early days of computing, drawing processes were automated and standardized. According to the video, the whole process was four times as fast as manual drawings.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;I suggest to watch the full video; it’s a very good example of superb design craftmanship. The video outlines multiple features of the modular built-up Diagrammer.  &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;For example, the inherent flexibility of the symbols button panel, allowed to “program” the Diagrammer for drawings and diagrams of any engineering field. Either the whole panel could be replaced or a dedicated symbol.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/be4fa9f8e487583b946fb1cb7b8acc9f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;span style="font-size: 12pt; color: rgb(31, 55, 99); font-family: &amp;quot;Calibri Light&amp;quot;;"&gt;The Diagrammers to automate the drawings in 2020&lt;/span&gt;
         &lt;div&gt;
          &lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;Well, fifty years later, there are a variety of diagramming tools available, which automate the process of modeling systems via diagramming. When it comes down to model complex systems, I believe Sparx Enterprise Architecture is the most versatile.&lt;/span&gt;
         &lt;/div&gt;
         &lt;div&gt;
          &lt;span style="font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri; font-style: italic;"&gt;Enterprise Architect helps individuals, groups and large organizations model and manage complex information. By integrating and connecting a wide range of structural and behavioral information in visual form, you can build a coherent, verifiable model of what-is or what-will-be.&lt;/span&gt;
          &lt;span style=" font-size: 11pt; color: rgb(68, 114, 196); font-family: Calibri;"&gt;[2]&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;br&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;span style=""&gt; 
       &lt;img class='article  img-thumbnail' src='/images/1c3df48661295eaafb2185a861a89fdc.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;&lt;/div&gt;
         &lt;span style="font-size: 12pt; font-family: &amp;quot;Calibri Light&amp;quot;;"&gt;Article series ambition to establish a DEFI Ontology&lt;/span&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;span style=""&gt;&lt;span style="font-size: 11pt; font-family: Calibri;"&gt;The article series is centered around the development of an Ontology in the context of Decentralized Finance concepts (our subject matter).&lt;/span&gt;&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;span style=""&gt;&lt;span style="font-size: 11pt; font-family: Calibri;"&gt;So what is an Ontology then? Think of&lt;/span&gt;&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;span style="font-size: 11pt; font-family: Calibri; color: rgb(45, 79, 201); font-style: italic;"&gt;an ontology as a model that represents some subject matter… An Ontology communicates what kinds of things there are (for the subject matter of interest) and how they are related to each other.&lt;/span&gt;
          &lt;span style="font-size: 11pt; font-family: Calibri; color: rgb(45, 79, 201); font-style: italic;"&gt;[3]&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;span style=""&gt;&lt;span style="font-size: 11pt; font-family: Calibri;"&gt;Ontologies are everywhere; in essence, software uses ontologies at its core to interact with each other. They may be named differently, for example, product catalogs, knowledge graphs, data structures that capture models of the entities in the world in which a system interacts, but they play an important role.&lt;/span&gt;&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;span style=""&gt;&lt;span style="font-size: 11pt; font-family: Calibri;"&gt;An ontology allows us to build up a common understanding of the structure of information among people or software agents, as well as establish a re-usable domain knowledge base. Even if the task may be hard to achieve:&lt;/span&gt;&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;font style="font-size: 11pt;"&gt;&lt;span style="font-size: 11pt; color: rgb(45, 79, 201); font-family: Calibri; font-style: italic;"&gt;… ontologies sure a hard to build. Understanding how the entities in some application areas might be modeled, how they might interrelate with one another, and how they might be captured in software is really difficult.&lt;/span&gt;&lt;span style="font-size: 11pt; color: rgb(45, 79, 201); font-family: Calibri; font-style: italic;"&gt; &lt;/span&gt;&lt;span style="font-size: 11pt; color: rgb(45, 79, 201); font-family: Calibri; font-style: italic;"&gt;[3]&lt;/span&gt;&lt;/font&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;span style=""&gt;&lt;span style="font-size: 11pt; font-family: Calibri;"&gt;The exercise on its own is valuable in know-how build-up by the writer (and hopefully reader of the series) in the topics of Decentralized Finance, as well as the usage of Ontology models.&lt;/span&gt;&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;span style=""&gt;&lt;span style="font-size: 11pt; font-family: Calibri;"&gt;The intention is to build the DEFI model up on the family of ontology specifications called the Financial Industry Business Ontology (FIBO).&lt;/span&gt;&lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
          &lt;font style="font-size: 11pt;"&gt;&lt;span style="font-size: 11pt; color: rgb(45, 79, 201); font-family: Calibri; font-style: italic;"&gt;FIBO is a modularized formal model of the concepts represented by finance industry terms as used in official financial organization documents such as contracts, product/service specifications, and governance and regulatory compliance documents. This is referred to as a Business Conceptual Model as distinct from models or descriptions of data or IT implementations.&lt;/span&gt;&lt;span style="font-size: 11pt; color: rgb(45, 79, 201); font-family: Calibri; font-style: italic;"&gt; &lt;/span&gt;&lt;span style="font-size: 11pt; color: rgb(45, 79, 201); font-family: Calibri; font-style: italic;"&gt;[4]&lt;/span&gt;&lt;/font&gt;
         &lt;/div&gt;
         &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
          &lt;font face="Calibri" style="font-size: 11pt;"&gt;&lt;span style="font-size: 11pt; font-family: Calibri;"&gt;Stay tuned, in the next weeks and months; we develop an overall model of the decentralized finance domain with the help of an ontology and diagrams, which helps us to understand better what’s going on&lt;/span&gt;&lt;/font&gt;
         &lt;/div&gt;
        &lt;/div&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
         &lt;span style=""&gt;&lt;span style="font-size: 11pt; color: rgb(1, 1, 1); font-family: Calibri;"&gt;In the meantime go back in history and watch the full video of the Mergenthaler Diagrammer, an amazing engineering piece from the early days of the computer:&lt;/span&gt;&lt;/span&gt;
        &lt;/div&gt;
        &lt;ul&gt;
         &lt;li&gt;
          &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;
           &lt;a href="https://player.vimeo.com/video/75532300?byline=0&amp;amp;portrait=0" style="font-size: 11pt; font-family: Calibri;"&gt;&lt;a href="https://player.vimeo.com/video/75532300"&gt;https://player.vimeo.com/video/75532300&lt;/a&gt;&lt;/a&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div style="margin: 0mm 0mm 2.81mm;"&gt;&lt;/div&gt;
        &lt;span style="font-size: 14pt; color: rgb(47, 84, 150); font-family: &amp;quot;Calibri Light&amp;quot;; font-weight: bold;"&gt;Bibliography&lt;/span&gt;
       &lt;/div&gt;
       &lt;table style="border-collapse: collapse; min-width: 100%;"&gt;
        &lt;tbody&gt;
         &lt;tr style=""&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;[2]&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;“Sparx Enterprise Architect,” Sparx, [Online]. Available: &lt;a href="https://sparxsystems.com/"&gt;&lt;a href="https://sparxsystems.com/"&gt;https://sparxsystems.com/&lt;/a&gt;&lt;/a&gt;.&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr style=""&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;[3]&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;M. Uschold, “Demystifying OWL for the Enterprise,” Morgan Claypool Publishers, 2018.&lt;/span&gt;
            &lt;span style=""&gt;[Online]. Available: &lt;a href="https://books.google.ch/books?id=WuReDwAAQBAJ&amp;amp;lpg=PP1&amp;amp;hl=de&amp;amp;pg=PP1#v=onepage&amp;amp;q&amp;amp;f=false"&gt;&lt;a href="https://books.google.ch/books?id=WuReDwAAQBAJ&amp;amp;amp;lpg=PP1&amp;amp;amp;hl=de&amp;amp;amp;pg=PP1#v=onepage&amp;amp;amp;q&amp;amp;amp;f=false"&gt;https://books.google.ch/books?id=WuReDwAAQBAJ&amp;amp;amp;lpg=PP1&amp;amp;amp;hl=de&amp;amp;amp;pg=PP1#v=onepage&amp;amp;amp;q&amp;amp;amp;f=false&lt;/a&gt;&lt;/a&gt;.&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr style=""&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;[4]&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
          &lt;td style=" padding: 8px; border: 1px solid;"&gt;
           &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
            &lt;span style=""&gt;N. F. Noy and D. L. McGuinness, “&lt;a href="http://protege.stanford.edu/"&gt;protege.stanford.edu&lt;/a&gt;,” Stanford University, [Online].&lt;/span&gt;
            &lt;span style=""&gt;Available: &lt;a href="https://protege.stanford.edu/publications/ontology_development/ontology101-noy-mcguinness.html"&gt;&lt;a href="https://protege.stanford.edu/publications/ontology_development/ontology101-noy-mcguinness.html"&gt;https://protege.stanford.edu/publications/ontology_development/ontology101-noy-mcguinness.html&lt;/a&gt;&lt;/a&gt;.&lt;/span&gt;
           &lt;/div&gt;&lt;/td&gt;
         &lt;/tr&gt;
        &lt;/tbody&gt;
       &lt;/table&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="https://d.docs.live.net/f250da2627755048/Documents/Cloudburo/The%20Diagrammer/1%20-%20How%20To%20Read%20The%20Diagrams.docx"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The Economy explained by Ray Dalio in 30 minutes</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/12/22/the-economy-explained-by-ray-dalio-in-30-minutes.html"/>
    <id>https://dev.cloudburo.net/2019/12/22/the-economy-explained-by-ray-dalio-in-30-minutes.html</id>
    <published>2019-12-22T01:45:51+00:00</published>
    <updated>2019-12-23T06:10:40+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
         Raymond &amp;ldquo;Ray&amp;rdquo; Dalio is an American billionaire investor, who is a co-founder of the investment firm Bridgewater Associates, one of the world&amp;rsquo;s largest hedge funds. Astonishingly he also a producer of an economical 101 YouTube video (from the year 2013), which explains how &amp;ldquo;The Economic Machine Works.&amp;rdquo;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The 30 minutes video (worth every minute) explains in a simple but not simplistic way the inner mechanism of the machine. Three main forces are described, which drives the economy.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Productivity Growth
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Short Term Debt Cycle
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Long Term Debt Cycle
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;div class="responsive-video"&gt;
         &lt;iframe src="https://www.youtube.com/embed/PHe0bXAIuk0?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
        &lt;/div&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 18pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Hey Meta - A free online meta-tag generator</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/12/20/hey-meta-a-free-online-meta-tag-generator.html"/>
    <id>https://dev.cloudburo.net/2019/12/20/hey-meta-a-free-online-meta-tag-generator.html</id>
    <published>2019-12-20T07:09:54+00:00</published>
    <updated>2019-12-20T07:29:37+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;span style="color: rgb(28, 30, 41);"&gt;&amp;ldquo;Hey Meta&amp;rdquo; is a handy tool which allows you to generate impactful metatags for your website.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;span style="color: rgb(28, 30, 41);"&gt;Meta tags enable search engines, social networks, and messaging services to get the required information from your website and display it in a visual way instead of just a plain old link.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;span style="color: rgb(28, 30, 41);"&gt;&amp;ldquo;Hey Meta&amp;rdquo; helps you generate those meta tags by editing your existing ones or writing new ones which you generate and easily place on your website.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;span style="color: rgb(28, 30, 41);"&gt;You can find the free online meta-tag generator here:&lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="color: rgb(28, 30, 41); margin-top: 0pt; margin-bottom: 0pt;"&gt;
       &lt;a href="https://www.heymeta.com/" style="color: #4a6ee0; background: transparent;"&gt;&lt;a href="https://www.heymeta.com/"&gt;https://www.heymeta.com/&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/2b433a1a6e0f849c4130951b267a3591.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Introduction to Synthetix - Defi Derivatives Exchange On Ethereum</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/12/07/introduction-to-synthetix-defi-derivatives-exchange-on-ethereum.html"/>
    <id>https://dev.cloudburo.net/2019/12/07/introduction-to-synthetix-defi-derivatives-exchange-on-ethereum.html</id>
    <published>2019-12-07T15:28:16+00:00</published>
    <updated>2019-12-18T22:35:16+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Chris Blec (@ChrisBlec) has an excellent Youtube Series about Defi.&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The following video gives an introduction to the synthetic asset trading platform built on the Ethereum blockchain. The trading platform isn&amp;rsquo;t fully decentralized yet (i.e. the pricing-feed oracles are managed by a central team) but there is a clear roadmap to decentralization. Check it out:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;div class="responsive-video"&gt;
        &lt;iframe src="https://www.youtube.com/embed/MKVLvlk_Lhs?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Running Nextcloud on Windows 10 Docker Installation</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/09/16/running-nextcloud-on-windows-10-docker-installation.html"/>
    <id>https://dev.cloudburo.net/2019/09/16/running-nextcloud-on-windows-10-docker-installation.html</id>
    <published>2019-09-16T21:46:10+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;span style="font-size: 12pt; font-weight: bold;"&gt;Prerequisite&lt;/span&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Having Docker Desktop installed. I used the Hyper-V version, which requires Windows 10 Professional licence.
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9c6ad656c9f00698941b05cb5a636b19.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Enable Sharing your Drive in Docker Desktop
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/5e6740dd74776673e1dc78ae37585f3f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Create directories which will be mounted by Docker
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e88e224b1637b363edd167d2010b691c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;span style="font-size: 12pt; font-weight: bold;"&gt;Add docker-compose.yml file&lt;/span&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;span style="font-size: 10pt;"&gt;Get the following docker-compose.yml (which is an extension of the following&lt;/span&gt;
          &lt;a href="https://nerdblog.steinkopf.net/2018/03/nextcloud-mit-docker/" style="font-size: 10pt;"&gt;tutorial&lt;/a&gt;
          &lt;span style="font-size: 10pt;"&gt;)&lt;/span&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;ul&gt;
         &lt;li&gt;
          &lt;div&gt;
           &lt;a href="https://gist.github.com/talfco/06786c494997c13c8bed0a25e1930f48" style="font-size: 10pt;"&gt;&lt;a href="https://gist.github.com/talfco/06786c494997c13c8bed0a25e1930f48"&gt;https://gist.github.com/talfco/06786c494997c13c8bed0a25e1930f48&lt;/a&gt;&lt;/a&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Adjust the volume entries, to reflect your directory locations
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt; font-weight: bold;"&gt;Add d&lt;/span&gt;
        &lt;span style="font-size: 12pt; font-weight: bold;"&gt;b.env file&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;span style="font-size: 10pt;"&gt;Add the following file&lt;/span&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/f3f0890bc0b95f3edfde5d0f3b3eb140.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt; font-weight: bold;"&gt;Run docker-compose&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Run the command
          &lt;span style="font-family: &amp;quot;Segoe UI Symbol&amp;quot;; font-style: italic;"&gt;docker-compose up&lt;/span&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;ul&gt;
         &lt;li&gt;
          &lt;div&gt;
           &lt;span style="font-family: &amp;quot;Segoe UI Symbol&amp;quot;; font-style: italic;"&gt;Which will start the 3 docker instances&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Head over to the config.php in your local mounted docker volumes
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1b7891306e0f35849894a986f0318c8f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           And add in the file an additional entry
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/886b7cfd2c864990913197011ba81748.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Stop and restart the Docker images
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Now you are ready to log  into your nextcloud environment (provide the admin password the first time you log in)
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Open&lt;br&gt;
          &lt;a href="http://localhost:8094/"&gt;&lt;a href="http://localhost:8094"&gt;http://localhost:8094&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/eafeeea8cc3dddefddc91a386366f552.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Done - Three docker containers are created and running
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           docker container 1: maria-db
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           docker container 2: nextcloud application
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           docker container 3: db backup container
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/fdef13ffff02aeee6696a90bde573156.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>DeFi Token Trading In Java Using The Kyber Network #1 - A KyberDAO Funded Tutorial</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/07/26/defi-token-trading-in-java-using-the-kyber-network-1-a-kyberdao-funded-tutorial.html"/>
    <id>https://dev.cloudburo.net/2019/07/26/defi-token-trading-in-java-using-the-kyber-network-1-a-kyberdao-funded-tutorial.html</id>
    <published>2019-07-26T12:24:32+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
         The tutorial will show you how easily you can access the Kyber Network out of a Java Application in order to trade crypto tokens.&lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/134656958ddd44297263bcd31f8fd4fe.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The tutorial has implemented the primary trading scenarios:
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Convert Ether to a Token
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Convert a Token to Ether, as well as
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Convert a Token to a Token.
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The tutorial was established as part of the
        &lt;a href="https://blog.kyber.network/kyberdao-experiment-2-on-daostack-d1caca6caf35"&gt;KyberDAO&lt;/a&gt; &amp;ldquo;DAOstack&amp;rdquo; experiment. Therefore the first three sections will give an overview of this experiment and the collected experiences.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         If you are just interested in the Java Tutorial, scroll down to the relevant section.&lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;About DAO&amp;rsquo;s and the DAOstack&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         As part of my research journey into the technology trends of the emerging world of decentralization, I started recently to investigate into Decentralized Autonomous Organizations (DAO&amp;rsquo;s) and their impact on the future working model. My first article to the topic I published on Medium under the title &amp;ldquo;
        &lt;a href="https://medium.com/coinmonks/the-death-of-the-corporation-3aa6c6207985"&gt;Death of the Corporation&lt;/a&gt;&amp;rdquo;, which exploits the benefit of such a new way of working. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         It&amp;rsquo;s a new series which I started after my initial one - published in Q4 2018 - about the emergence of Polkadot (
        &lt;a href="https://medium.com/coinmonks/tagged/polkadot-hello-world"&gt;Medium Polkadot Hello World series&lt;/a&gt;). In a way, my own bootstrapping into the crypto space.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Decentralized Autonomous Organizations (DAOs) have seen a recent resurgence in activities, after being slashed in 2016 when the infamous hack of &amp;ldquo;The DAO&amp;rdquo; led to the ETH-ETC hard fork.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Circle Research provides in their excellent
        &lt;a href="http://research.circle.com/wp-content/uploads/2019/07/2Q19-crypto-retrospective.pdf"&gt;Q2-2019 crypto retrospective&lt;/a&gt;, the following definition:
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         &amp;ldquo;DAO&amp;rsquo;s are internet-native organization that can execute transactions autonomously based on a predefined set of rules enocded in a transparent, trustless platform (i.e. blockchain). All DAO&amp;rsquo;s manage the allocation of valuable internal capital (e.g. funds to be issued to open source network developer) without relying on hierarchichal management. DAO shareholders (e.g. contributors, members, token holders etc.) at any level can submit and vote on any proposal, but don ot take part in the execution prossed (i.e. the delivery of funds)
       &lt;/div&gt;
       &lt;div&gt;
         &amp;hellip;
       &lt;/div&gt;
       &lt;div&gt;
         Since no centralized entity or individual controls a DAO, these organizations can effectively manage the allocation of funds or member-approved decisions in open, distrubted networks, which can be ideal for crypto networks and associated applications&amp;rdquo;.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         That brings in
        &lt;a href="https://daostack.io/"&gt;DAOstack&lt;/a&gt; -  the so-called operating-system for collective intelligence - a blockchain platform (
        &lt;a href="https://daostack.io/alchemy"&gt;Alchemy&lt;/a&gt;)  for running Distributed Autonomous Organization on top of it backed by the so-called Holographic consensus.&lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The consensus protocol helps DAOs prioritize the most value-aligned proposals, even with million members. The goal of the consensus protocol is to incentivize people to correctly predict what DAO&amp;rsquo;s care about (its mission) , and lets DAOs make good decisions without requiring everyone to vote on everything (
        &lt;a href="https://daostack.io/deck/DAOstack-Deck-en.pdf" style="font-size: 10pt;"&gt;DAOStack Slide Deck&lt;/a&gt;). 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         In the words of Matan Field (founder of DAOstack)
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         &amp;ldquo;A DAO is orientable and super-scaleable&amp;rdquo; (
        &lt;a href="https://dev.cloudburo.net/2019/06/12/ethcc-keynote-by-matan-field-daostack.html"&gt;ETHCC Keynote Videos&lt;/a&gt;)
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         DAOstack was experimenting in 2018 in an Alpha release and went in a public Beta with their product called &amp;ldquo;
        &lt;a href="https://alchemy.daostack.io/"&gt;Alchemy Earth&lt;/a&gt;&amp;rdquo; on the Ethereum mainnet opening it up to communities and organizations, which want to create DAO organizations.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         There are various DAO experiments established by decentralized networks and applications. Two of them namely the Kyber Network, as well as Polkadot were basing their experiment on DAOstack. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/23e31c712f4c2c019c735cd99b1a0aa2.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
         Source: 
        &lt;a href="http://research.circle.com/wp-content/uploads/2019/07/2Q19-crypto-retrospective.pdf"&gt;Circle Research: Q2-2019 crypto retrospective&lt;/a&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         My credo when investigating into new technologies is to try it out by myself (&amp;ldquo;eat your own dog-food&amp;rdquo;) and not just looking at it from a top-down angle. I&amp;rsquo;m an avid hobbyists programmer and established in the recent years a
        &lt;a href="https://publishingbot.cloudburo.net/"&gt;subscription based blogging product based on Evernote&lt;/a&gt;. Moving forward I was now looking out for some tech work in the Ethereum space to kick-start my decentralized programming activities. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         So these experiments were ideal for me to test the waters and come up with two proposals which were decided either by the Kyber Network -or the Polkadot community. Finally, both proposals got approved by the respective DAO&amp;rsquo;s and delivered, this article concentrates on the KyberDAO proposal.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;About Kyber Network and the KyberDAO&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Kyber Network was an early-,over which  onboarded a DAO (the so-called
        &lt;a href="https://alchemy.daostack.io/dao/0x6bee9b81e434f7afce72a43a4016719315069539"&gt;KyberDAO&lt;/a&gt;) to Alchemy Earth. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;a href="https://kyber.network/"&gt;Kyber Network&lt;/a&gt; is an on-chain liquidity protocol that aggregates from a wide range of token reserves and powers instant and secure token exchange in any decentralized application.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         It&amp;rsquo;s a well-known Ethereum based platform in the new world of
        &lt;a href="https://defi.network/"&gt;Decentralized Finance Applications&lt;/a&gt;. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c1993350c7d203003b11fa24bf4597c7.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
         Source: 
        &lt;a href="https://kyber.network/"&gt;Kyber Network&lt;/a&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The Kyber Network allows you to exchange Ethereum based token(s), similar to a traditional foreign exchange trade which allows you to exchange fiat currencies. The difference is that there is no central exchange involved at all!  The underlying base currency is Ether (ETH) and not any fiat currency. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         As part of &amp;ldquo;
        &lt;a href="https://blog.kyber.network/kyberdao-experiment-2-on-daostack-d1caca6caf35"&gt;KyberDAO&lt;/a&gt;&amp;rdquo; community experiment, the network launched in June their DAOstack based DAO (after a first experiment on the Aragon platform) and funded it with about 17,000 KNC (around $4500). Anyone from the community can submit a proposal with a fund request for a portion or the full amount of the grant (see
        &lt;a href="https://blog.kayber.network/kyberdao-experiment-2-on-daostack-d1caca6caf35"&gt;announcement&lt;/a&gt;).
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         So it&amp;rsquo;s an ideal test environment to request for a funded proposal in the context of my programming experience builds up. In a certain way, a win-win situation for me (Knowledge buildup) as well as the Kyber Network to get some code exposure to the Java community with my proposal. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;The decision to invest my time into the Kyber Network was easy because the documentation of their platform from any aspect is just excellent  It allows a newcomer to get an understanding of it very quickly. &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;From the&lt;/span&gt;
        &lt;a href="https://developer.kyber.network/docs/API_ABI-Intro/" style="font-size: 10pt;"&gt;interface point of view&lt;/a&gt;
        &lt;span style="font-size: 10pt;"&gt;Kyber Network provides - besides the direct ABI smart contract- a RESTful API which gives users (without much smart contract knowledge) the ability to interact with their contracts. So the ideal starting point to kick start my programming in the Ethereum crypto space.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;About my KyberDAO proposal&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
         On Alchemy Earth in the KyberDAO section, I created a proposal with the goal
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         &amp;ldquo;To develop a Java Kyber Trading tutorial and publish the findings in a Medium article.&amp;rdquo;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The proposal itself - shows in the below screenshot of the  Alchemy UI, is backed by a detailed document which is located 
        &lt;a href="https://docs.google.com/document/d/1H-cX3dFJoOfw7rxnUecW8fYUo6ER9GgnUlWZ7bFVngY/edit?usp=sharing"&gt;here&lt;/a&gt;.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/cf584e7b7c244945fac8199075974a73.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         To publish the proposal, you require a Metamask account and a minimal amount of Ether (some cents to pay for the gas fee, when proposal data is written to the blockchain). Refer to the following
        &lt;a href="https://www.youtube.com/watch?v=BucC_e7T2oo"&gt;YoutTube Tutorial&lt;/a&gt; of @eriktrodigues which walks you through all the necessary onboarding steps.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         I was quite excited to see, what happens when a completely new-joiner request  for some funding of its work in a DAO community. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         My first proposal got well accepted by the community. There were some questions about the requested amount of funding, which may be normal in a contract negotiation.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/2a09bb1d4dd09b598ed081b73bc5a04d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;I decided to re-adjust the price, which required to re-publish a completely new proposal. This process is somewhat clumsy and results that two open proposals (not automatically linked to each other via a versioning number or similar) are in the system. From a UX point of view, it&amp;rsquo;s not immediately clear for a reviewer which proposal should be looked at. That may get confusing in case there are a large numberof proposals in the reviewing phase potentially with multiple version.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;So I brought the problem up in the&lt;/span&gt;
        &lt;a href="https://daotalk.org/t/collected-user-insights-needs-and-feature-requests/536/5" style="font-size: 10pt;"&gt;DAOstack community forum&lt;/a&gt;
        &lt;span style="font-size: 10pt;"&gt;, which took up the feature request and kick-started a discussion around the topic.  That speaks for the DAOstack community, which is open and very responsive to problems, features, and requests by its user. &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d44313ce3b1a00137b4866f02e743202.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;About the Kyber Java Client Library&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;So now let&amp;rsquo;s dig into the Java client library for the Kyber Network, which I developed as part of my funding request. For a start, let&amp;rsquo;s run the Java Tutorial Application. Some the preparation steps.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Preparation Step: Get Java, Git and Gradle installed on your machine&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Well it&amp;rsquo;s obvious to have Java  and Git installed on your machine, additional the
        &lt;a href="https://gradle.org/"&gt;Gradle&lt;/a&gt; build environment will be used, so that you can easily run the tutorial code from the command line. Install all these three dependencies on your machine.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Preparation Step: Create a Ropsten Test Wallet using the web3j command line utility&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;A web3j fat jar is distributed with each web3j release providing command line tools. The command line tools allow you to use some of the functionality of web3j from your terminal. &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;In our case, we have to create a test wallet on the Ropsten test network which is used for our token swapping scenarios.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           There are various installers available to the command line tools
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           in case of Windows use the
          &lt;a href="https://github.com/web3j/web3j/releases/tag/4.3.0"&gt;ZIP file distribution&lt;/a&gt; and extract in a directory
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           then run the web3j.bat file
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Use the
        &lt;a href="https://docs.web3j.io/command_line.html#wallet-tools"&gt;wallet tools&lt;/a&gt; to create a wallet 
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;span style="font-style: italic;"&gt;&amp;lsquo;wallet create&amp;rsquo;  &lt;/span&gt;will create a wallet.json file
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/042f19dfe2e96d0245ffa25ec2be9b75.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Check out the created Ethereum Address in the Wallet file and transfer some Ether to the address.
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           You can use the ropsten faucet to create ethereum test coins:&lt;br&gt;
          &lt;a href="https://faucet.ropsten.be/"&gt;&lt;a href="https://faucet.ropsten.be/"&gt;https://faucet.ropsten.be/&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Use the 
          &lt;a href="https://ropsten.etherscan.io/address/0x25971ca9171d8076f81b6699dc19bad66a0091a3"&gt;&lt;a href="https://ropsten.etherscan.io/"&gt;https://ropsten.etherscan.io/&lt;/a&gt;&lt;/a&gt; frontend to check your address, transactions and any other blockchain information.
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           The password chosen for the Wallet is required in our tutorial application to load the necessary credentials.
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Preparation Step: Create an Infura Test Node Account&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;For writing the Kyber Swap transactions to the Ethereum blockchain you will require an Infura Test Node Account (obviously there are other possibilities, but that&amp;rsquo;s the most straightforward).&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Get an account setup on
          &lt;a href="https://infura.io/project/dbbbc196b84949beae0c7eb321c00421"&gt;Infura&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Create a new project. You will use the Infura secret token (Project Secret) to connect to the Ropsten Test network.&lt;br&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/87febec8c1d83513f1ad4282b6404568.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Preparation Step: Clone the github directory and create a secret directory&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           Clone the github directory with the tutorial: 
          &lt;a href="https://github.com/talfco/clb-kyber-java-tutorial"&gt;&lt;a href="https://github.com/talfco/clb-kyber-java-tutorial"&gt;https://github.com/talfco/clb-kyber-java-tutorial&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           create a
          &lt;span style="font-style: italic;"&gt;secret&lt;/span&gt; directory in the
          &lt;span style="font-style: italic;"&gt;clb-kyber-java-tutorial &lt;/span&gt;and
         &lt;/div&gt;&lt;/li&gt;
        &lt;ul&gt;
         &lt;li&gt;
          &lt;div&gt;
            copy the
           &lt;span style="font-style: italic;"&gt;wallet.json&lt;/span&gt; file over
          &lt;/div&gt;&lt;/li&gt;
         &lt;li&gt;
          &lt;div&gt;
            create a
           &lt;span style="font-style: italic;"&gt;secret.properties&lt;/span&gt; file and add an entry for the
           &lt;span style="font-style: italic;"&gt;wallet-password&lt;/span&gt; as well as your
           &lt;span style="font-style: italic;"&gt;infura-token&lt;/span&gt;
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
       &lt;/ul&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b81c3560aebeba32a26ee2b86a49e0a1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Run the Tutorial Application&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;Just type&lt;/span&gt; 
        &lt;span style="font-size: 10pt; font-style: italic;"&gt;gradle run &lt;/span&gt;
        &lt;span style="font-size: 10pt;"&gt;which will kick off the tutorial application.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;The application will call three methods:&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           First, it converts parts of your test Ether to two DAI tokens (
          &lt;span style="font-style: italic;"&gt;eth2token&lt;/span&gt;). The Kyber buy rate is required in order to determine the amount of Ether required.
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Second, it converts back one DAI token to Ether (
          &lt;span style="font-style: italic;"&gt;token2eth&lt;/span&gt;). The Kyber sale rate is required in order to determine the amount of Ether paid out.
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Third, it will convert one DAI token to one BAT token (
          &lt;span style="font-style: italic;"&gt;token2token). &lt;/span&gt;
          &lt;span style="font-style: italic;"&gt; &lt;/span&gt;For this transaction, the buy rate, as well as the sale rate, is required in order to determine how many BAT tokens can be purchased
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/f64d2752b6930e717fc692dd463f4107.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
         Github-Gist: 
        &lt;a href="https://gist.github.com/talfco/a88d094baff1777880192ec8a4a06f6a"&gt;&lt;a href="https://gist.github.com/talfco/a88d094baff1777880192ec8a4a06f6a"&gt;https://gist.github.com/talfco/a88d094baff1777880192ec8a4a06f6a&lt;/a&gt;&lt;/a&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Check the console output for created Transaction Hashes and other information.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Ethereum Transactions Generated by the Tutorial&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;The tutorial application will generate 3 Ethereum Transactions, which you can checkout via the etherscan.io web application&lt;/span&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://ropsten.etherscan.io/address/"&gt;&lt;a href="https://ropsten.etherscan.io/address/"&gt;https://ropsten.etherscan.io/address/&lt;/a&gt;&lt;/a&gt;&amp;lt;yourTestWalletAddress&amp;gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           You will see three transactions, triggered by our three functions
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/38c4d204d881390dba3bfd81f9e1622e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;You are now also token owner on the Ropsten Network for DAI and BAT&amp;rsquo;s token. In the future you may use this simple Java Application to generate any kind of test token (as long as it is supported on the Kyber test network)&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;img width="733"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/93e30bc66e5c53083d5d5490ae5cc348.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;If you are a newcomer, I highly suggest that you study the detailed transaction information, which will give you a lot of insight son how an Ethereum transaction is built up.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;As for example the screenshot below is the detailed transaction information from the&lt;/span&gt;
        &lt;span style="font-size: 10pt; font-style: italic;"&gt;eth2token&lt;/span&gt;
        &lt;span style="font-size: 10pt;"&gt;conversion (2 DAI tokens bought).  You could now drill down and explore the Kyber Contract which is involved in this transaction.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/a3bf9a2e4b4de44f4466c47a65b4c289.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Implementation Aspects - Kyber API Functionality designed as web3j module&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;This tutorial is my frist Java programming exposure to Ethereum, so I was checking for a decent java base library for the Ethereum network. One well-known is&lt;/span&gt;
        &lt;a href="https://web3j.io/" style="font-size: 10pt;"&gt;web3j&lt;/a&gt;
        &lt;span style="font-size: 10pt;"&gt;from the Web3 lab. It&amp;rsquo;s mainly focusing on the Smart contracts (which is mainly shielded by the Kyber Restful API) and will have the necessary tool kits to load wallet credentials and sign transactions, which plays a role as well in the Kyber Restful API&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1b02d66cc527c92e7baa76f7bca6da0c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The introduced java classes and interfaces are inheriting from the core classes of web3j and are implemented in a similar way. This allowed me to leverage a lot of code from web3j on the one side; on the other side developers using web3j will find similar patterns. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/69d007eb8dc0d3097de1e1ecd32c92d8.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;In order to be web3j compliant (which is built around JSON-RPC interfaces), I introduced a&lt;/span&gt;
        &lt;span style="font-size: 10pt; font-style: italic;"&gt;JsonRpc2_0Kyber &lt;/span&gt;
        &lt;span style="font-size: 10pt; font-weight: bold;"&gt; &lt;/span&gt;
        &lt;span style="font-size: 10pt;"&gt;class &lt;/span&gt;
        &lt;span style="font-size: 10pt;"&gt;which acts as a protocol converter and prepares the request for the Kyber REST API.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;The Kyber Java API interface supports the following functions.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e85994130714ad2d5aa7ceb3f4d2a36d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
         Github-GIST: 
        &lt;a href="https://gist.github.com/talfco/12c9729681c347d07829f001db43aeb2"&gt;&lt;a href="https://gist.github.com/talfco/12c9729681c347d07829f001db43aeb2"&gt;https://gist.github.com/talfco/12c9729681c347d07829f001db43aeb2&lt;/a&gt;&lt;/a&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;As one can see the major part is Java strong typed. JSON data requests are automatically converted to Java Classes via&lt;/span&gt;
        &lt;a href="https://github.com/FasterXML/jackson" style="font-size: 10pt;"&gt;Jackson XML&lt;/a&gt;
        &lt;span style="font-size: 10pt;"&gt;parsing support.  &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;A second article will deep-dive into the various design aspects to the built client library. &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;Trading Scenarios Code Excerpts&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;To conclude the tutorial; the code sequence of the three scenarios is provided. As you can see the code is quite compact, readable and understandable. If you would check out a basic web3j Ethereum transaction sample, you would see the similarity of the code.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Scenario: ETH2TOKEN&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;Just realize how easy it is to swap tokens on Ethereum using the Kyber API&amp;rsquo;s!&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/ca35270994a3be72874abe3c3fcb5bfa.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;Github-GIST: &lt;/span&gt;
        &lt;a href="https://gist.github.com/talfco/13ac48bf03a488be16a73f36e2ff181e"&gt;&lt;a href="https://gist.github.com/talfco/13ac48bf03a488be16a73f36e2ff181e"&gt;https://gist.github.com/talfco/13ac48bf03a488be16a73f36e2ff181e&lt;/a&gt;&lt;/a&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt;Scenario: TOKEN2ETH&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 12pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/7f01a4cbc99f098400ae1f5cd1adbdfb.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Github-GIST: 
        &lt;a href="https://gist.github.com/talfco/0aab8034dc503f3c242ef58c43e7b137"&gt;&lt;a href="https://gist.github.com/talfco/0aab8034dc503f3c242ef58c43e7b137"&gt;https://gist.github.com/talfco/0aab8034dc503f3c242ef58c43e7b137&lt;/a&gt;&lt;/a&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 12pt;"&gt;Scenario Token2Token&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 10pt;"&gt;Refer to the GIST directly: &lt;/span&gt;
       &lt;a href="https://gist.github.com/talfco/8b1d5829f3961bd86ecd981e5f3fd0c8"&gt;&lt;a href="https://gist.github.com/talfco/8b1d5829f3961bd86ecd981e5f3fd0c8"&gt;https://gist.github.com/talfco/8b1d5829f3961bd86ecd981e5f3fd0c8&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14pt;"&gt;Final Point&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 10pt;"&gt;I hope this tutorial was useful for you, so get the code loaded into a Java IDE and start playing around with it. You will realize how easy it is to execute and swap token transactions on the Ethereum network.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 10pt;"&gt;As already mentioned, I plan to come up with a second article, which explains the java client library and its implementation strategy in more detail.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The Anatomy of the first SEC approved Blockchain ICO process</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/07/12/the-anatomy-of-the-first-sec-approved-blockchain-ico-process.html"/>
    <id>https://dev.cloudburo.net/2019/07/12/the-anatomy-of-the-first-sec-approved-blockchain-ico-process.html</id>
    <published>2019-07-12T06:17:16+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
         On 11th July 2019, the United States Securities and Exchange Comission (SEC) has approved a $28 million Reg A+ offering for decentralized Internet company Blockstack.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         This is the first time that a Crypto offering has received SEC qualification and it will chart a way forward for US small business funding in the future. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         According to a
        &lt;a href="https://www.coindesk.com/blockstack-plans-one-of-the-first-reg-a-sec-approved-token-offerings"&gt;Coindesk&lt;/a&gt; article the founders Muneeb Ali and Ryan Shea spent $2 million to get approval for the sale.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         “Mr. Ali said it took so long and cost so much because the company and the SEC had to start from scratch to create a protocol for a digital-token offering under Reg A+,”
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The Reg A+ platform lets companies raise up to $50 million from retail investors as opposed to only from so-called accredited investors. Connecting a token with a Reg A+ funding round could turn these into truly cryptocurrency-based equity investment vehicles, although Blockstack is selling utility tokens this time around.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         I&amp;rsquo;m following
        &lt;a href="https://blockstack.org/"&gt;Blockstack&lt;/a&gt; since 2017 and was mainly interested in their identity solution, which allows you to register your identity on the Blockstack blockcain. I registered at that time the indentity name &amp;ldquo;felixk&amp;rdquo;:&lt;br&gt;
        &lt;i&gt;&lt;a href="https://explorer.blockstack.org/name/felixk.id"&gt;&lt;a href="https://explorer.blockstack.org/name/felixk.id"&gt;https://explorer.blockstack.org/name/felixk.id&lt;/a&gt;&lt;/a&gt;&lt;/i&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e0eca6650e21428860d741571ffe5fb7.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         As they state on their website:
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;Blockstack is a decentralized computing platform that puts users in control of their data and identity. Apps built on Blockstack make data breaches and trust violations an antiquated notion.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Being interested in KYC and regulatory processes I outline in this article, the various steps Blockstack had to execute for their SEC approved ICO (which costs them at the end $2 million). Being one of the 8000 non-institutional voucher holder, I got informed periodically about the progress of this approval process and the necessary steps. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt;May 2017 - Token Sale for Accredited Investors&lt;/span&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;Blockstack announced a Token Sale for a total of $50M for accredited investors. As part of this announcement they distributed 8000 vouchers to interested individuals with the same price offer. I was one of the persons who applied for the voucher&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/98015b810db3d24ee9b39fa5e355b3a7.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt;December 2017 - Distribution of Token Voucher for Individuals&lt;/span&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         In December the Token Voucher got distributed to the 8000 persons who were applying for it,
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/8ef2514e576f5522bc02a3af29f6a4e3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The voucher states that I&amp;rsquo;m eligible to request for 25&amp;#39;000 Stacks at a sale price of $0.12
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b928b8f6ea91929440128444547c9b20.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt;October 2018 - Stack Genesis Block Announcement&lt;/span&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;Blockstack announed the Launch of the Stacks Genesis Block.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&amp;ldquo;This year&amp;rsquo;s hard fork is an especially exciting milestone for the ecosystem because it distributes the first Stacks tokens to existing purchasers and recipients&amp;hellip;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;This hard fork launches the Stacks blockchain v1, and enables the following two features for the Blockstack network:&lt;/font&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;font style="font-size: 10pt;"&gt;Registration of all digital assets and smart contracts for registering digital assets with the Stacks token.&lt;/font&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;font style="font-size: 10pt;"&gt;A genesis block that distributes Stacks tokens to existing purchasers.&lt;/font&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;The genesis block will deliver 395M Stacks tokens to purchasers of SAFTs and interests in two private funds that were sold in our 2017 Accredited Sale.&amp;rdquo;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/aba464feda13d8d57f1ec5f4dcfcb189.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt;April 2019 - SEC Filing Announcement&lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Muneb Ali announced the SEC Filing for $50M Regulated Token Offering for its long-time supporters of Blockstack voucher holder (around 16 months after intial distribution of the voucher):
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         &amp;ldquo;What this means for you as a voucher holder:
       &lt;/div&gt;
       &lt;div&gt;
         Once the SEC has approved the offering, you will be able to purchase up to 25,000 Stacks at a sale price of $0.12 (up to $3,000 worth), with one eligible voucher per eligible person. Voucher holders can purchase additional Stacks at $0.30 per token, along with the general public who are able to participate in this sale at the updated token price, subject to availability. Non-U.S. persons may be ineligible to participate if the law in your local jurisdiction prohibits this token offering.&amp;rdquo;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/4f42c3882273726f92d8f92e910f13ad.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt; font-weight: bold;"&gt;May 2019 - KYC Announcement for Voucher Holders&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Time to register your voucher in order to be eligible to redeem it later. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/ae40481b2870998d77e7cbfd36f66034.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The registration process was doing some initial KYC checks. In my case additional verification was necessary executed by NetVerify which consisted of scanning Identity Cards etc.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/9c493130327a59653bb3cf9a01b63149.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 10pt;"&gt;Finally the Voucher Registration got confirmed.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/c211fefb2d721c17e325b90adf883258.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 14pt; font-weight: bold;"&gt;July 2019 - SEC Qualified Token Sale Starts&lt;/span&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Blockstack announced that their Token Sale is the first SEC-qualified Offering in US History on the 10th of July. Sale will start immediately one day later.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-weight: bold;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/a9ce96066045063083c4beca8b03db78.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         As Voucher Holder you got informed about the procedure. There is no guarantee for Voucher Holder to claim the Stacks as listed on the voucher. &amp;ldquo;Pre-registration serves as a head start&amp;rdquo;.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/93d29e6283738ad9338d9a13a8c5eba3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
         At Token sales start I got a Email which confirmed my pre-registration (again) and the possibility to start purchasing tokens at the price outlined in the voucher back in 2017.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/cb606da13b32d403feeabd7af80b4b88.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt;&lt;br&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;font style="font-size: 10pt;"&gt;The process was guided through on the &lt;a href="http://stackstoken.com"&gt;stackstoken.com&lt;/a&gt; Website and required to get a Stacks Wallet Address as the target address for the tokens (download of Stackswallet app).  Payment transfer was possible in USD (via wire-transfer) or by transferring Ethereum or Bitcoin (direct and fast).&lt;br&gt;&lt;/font&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-size: 14pt;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/b05d1fdf9d973167e2a23c54c2fe8f66.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Finally the Ethereum transaction got confirmed after 60+ confirmations.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c76c90a1d6ed1adfba5813f3a6669bf1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As one can see, quite some orchestrated processes Blockstack had to implement in order to be compliant with the SEC regulatory obligations. Interested to see how Blockstack will evolve.
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="https://blockstack.org/about"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>J.P. Konig's Assessment of Facebook Libra's Cryptocurrency</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/07/10/j-p-konig-s-assessment-of-facebook-libra-s-cryptocurrency.html"/>
    <id>https://dev.cloudburo.net/2019/07/10/j-p-konig-s-assessment-of-facebook-libra-s-cryptocurrency.html</id>
    <published>2019-07-10T20:18:55+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;p&gt;&lt;img class='pull-left img-responsive article img-thumbnail' src='/images/97b1df36e0304aaa5c195c123d837496.jpeg'&gt;&lt;/p&gt;
  
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         J.P Konigs Moneyness blog about a variety of finance and monetary economic topics is a great source of information and a worthwhile read.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         His article
        &lt;a href="http://jpkoning.blogspot.com/2019/06/esperanto-moneys-interval-of-certainty.html"&gt;Esperanto, money&amp;rsquo;s interval of certainty, and how this applies to Facebook&amp;rsquo;s Libra&lt;/a&gt; reviews Libra&amp;rsquo;s decision to index its crypto currency against a basket of fiat currencies.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         This implies that Libra&amp;rsquo;s system will be based on an entirely new unit of account, which indicates a new monetary measurement.  This is quite a far-reaching decision because usually new media of exchange or payments system are piggybacking off existing national units of account. As an example, he provides M-Pesa - a well known and successful mobile payment systems introduced in Africa - which is indexed against the Kenyan shilling.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         J.P. Konigs suspect that Libra&amp;rsquo;s decision is driven by the dream to introduce a worldwide universal monetary unit. As he outlines in the article with various examples, this is an old dream, which never worked out. The core problem is that nobody really wants to invest time and effort in learning a second language as prices.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;So Facebook is inflicting an inconvenience on its users by forcing us to adopt a new unit of account. To make for a better user experience, it should probably index the Libra payments network to the units of account that we&amp;rsquo;re all used to.&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
         &amp;hellip;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;But this means that Libra users will lose one of the greatest services provided by money:&lt;/span&gt;
        &lt;span style="font-style: italic; font-weight: bold;"&gt;money&amp;rsquo;s interval of certainty&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;. This is one of society&amp;rsquo;s best free lunches around&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Money&amp;rsquo;s interval of certainty emerges from two facts
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           The instrument which we hold in our wallet (i.e., the money) are indexed to the same unit of account in which shops set prices. That means we don&amp;rsquo;t have to make constant foreign exchange conversion
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Shops are keeping sticker prices fixed for an extended period, which in a way is an implicit contract with the customer and gives him some certainty.
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         This level of certainty would disappear.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;Anyone who has ≋100 in their account won&amp;rsquo;t know whether they can afford to buy a given item two weeks from now. But if they hold $100, they&amp;rsquo;ll still have that certainty, since dollar prices are still sticky.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         This would have quite an impact on the poor&amp;rsquo;s, which are just barely getting by and may be struck by price fluctuations in Libra in context to their local currency.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         In the end, this clashes with Libra&amp;rsquo;s founding principle to help the world&amp;rsquo;s unbanked.&lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;Facebook and David Marcus truly wants to help the unbanked, it seems to me that it would better to index Libras to the various local units of account.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Interesting to see how this experiment evolves, as J.P. concludes his article:
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;&amp;hellip;one of the changes I suspect Facebook will have to make if it wants to get traction is to link the Libra network to already-existing units of account. A new unit of account is just too Utopian.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Read the full article
        &lt;a href="http://jpkoning.blogspot.com/2019/06/esperanto-moneys-interval-of-certainty.html"&gt;here&lt;/a&gt;.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Image by
        &lt;a href="https://pixabay.com/users/sharonang-99559/%3Futm_source%3Dlink-attribution%26utm_medium%3Dreferral%26utm_campaign%3Dimage%26utm_content%3D1219146"&gt;Sharon Ang&lt;/a&gt; from
        &lt;a href="https://pixabay.com/%3Futm_source%3Dlink-attribution%26utm_medium%3Dreferral%26utm_campaign%3Dimage%26utm_content%3D1219146"&gt;Pixabay&lt;/a&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Ethereum Transactions Explained: An ERC-20 Token Transfer</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/07/07/ethereum-transactions-explained-an-erc-20-token-transfer.html"/>
    <id>https://dev.cloudburo.net/2019/07/07/ethereum-transactions-explained-an-erc-20-token-transfer.html</id>
    <published>2019-07-07T09:09:14+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
        &lt;div&gt;
          When starting with Ethereum based Transactions it&amp;rsquo;s sometimes confusing to understand what&amp;rsquo;s going on, behind the hood, and which of the addresses plays what kind of role.
        &lt;/div&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;
          Thanks to 
         &lt;a href="https://etherscan.io/"&gt;&lt;a href="https://etherscan.io"&gt;https://etherscan.io&lt;/a&gt; /&lt;/a&gt; it&amp;rsquo;s quite easy to follow a transaction flow and reverese engineer the overall flow.
        &lt;/div&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;
          In this article I explain a Ethereum ERC-20 token transaction scenario:
        &lt;/div&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold; font-style: italic;"&gt;&amp;ldquo;Send 900 KNC (KyberNetwork) Token for a Wallet with the address (0xe443) to the address (0x227).&amp;rdquo; &lt;/span&gt;
        &lt;/div&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;
          This resulted in the following transaction with
         &lt;i style="font-weight: bold;"&gt;Transaction Hash &lt;/i&gt; 0xb39:
        &lt;/div&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;ul&gt;
         &lt;li&gt;
          &lt;div&gt;
            The
           &lt;span style="font-style: italic; font-weight: bold;"&gt;From&lt;/span&gt; field, represents the blockchain address of the sender Wallet (0xe443)
          &lt;/div&gt;&lt;/li&gt;
         &lt;li&gt;
          &lt;div&gt;
            The
           &lt;span style="font-style: italic; font-weight: bold;"&gt;To&lt;/span&gt; field, represents the KyberNetwork Token contract (0xdd9), which holds all Kyber token assets
          &lt;/div&gt;&lt;/li&gt;
         &lt;li&gt;
          &lt;div&gt;
           &lt;span style="font-style: italic; font-weight: bold;"&gt;Tokens Transferred&lt;/span&gt; field, shows in the
           &lt;span style="font-weight: bold;"&gt;From&lt;/span&gt; field the sender of token (MEW Wallet) and in the
           &lt;span style="font-weight: bold;"&gt;For&lt;/span&gt; field the receiver address (0x227) 
          &lt;/div&gt;&lt;/li&gt;
         &lt;li&gt;
          &lt;div&gt;
            The
           &lt;span style="font-style: italic; font-weight: bold;"&gt;Transaction Fee&lt;/span&gt;
           &lt;span style="font-style: italic;"&gt; &lt;/span&gt;is 0.13 USD.
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;
          It&amp;rsquo;s important to realize that a ERC-20 token transfer will go to token contract address
         &lt;u&gt;and not directly to receiver&lt;/u&gt; address (as for example when transfer Ethereum coins directly). The receiver address is configured as additional parameter of the contract.
        &lt;/div&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/6cf59f1a054a097485f908ccaa2cb35a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;          &lt;/div&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           If we check out the KyberNetwork contract (0x99d), we can see that the
          &lt;span style="font-weight: bold;"&gt;Total Supply&lt;/span&gt; of tokens is around 214&amp;#39;0250&amp;#39;142,&amp;hellip; tokens (KNC) which results in a current
          &lt;span style="font-style: italic; font-weight: bold;"&gt;Fully dilluted Market Cap&lt;/span&gt; of 52&amp;#39;071&amp;#39;916 USD (token multiplied by its current
          &lt;span style="font-style: italic; font-weight: bold;"&gt;Price&lt;/span&gt;)
          &lt;span style="font-style: italic; font-weight: bold;"&gt;.&lt;/span&gt;
          &lt;span style="font-style: italic;"&gt;  &lt;/span&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Currently there are
          &lt;span style="font-style: italic;"&gt;53&amp;#39;219&lt;/span&gt;
          &lt;span style="font-style: italic; font-weight: bold;"&gt;Holders&lt;/span&gt; (i.e. Ethereum
          &lt;span style="font-style: italic; font-weight: bold;"&gt; &lt;/span&gt;addresses, holding KNC tokens)
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Having
          &lt;span style="font-weight: bold;"&gt;&lt;span style="font-weight: bold; font-style: italic;"&gt;Filtered by Token Holder&lt;/span&gt; &lt;/span&gt;set to my receiver address (0x227) , will show the actual balance of 900 KNC (of a value of around 218 USD)
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         It should be now clear, a ERC-20 contract will hold a list of all token holders (53&amp;#39;219 addresses) with the actual token assets,
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b2b6f4ed2d8e7df0e9142574dd44d583.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Checking my Ethereum Address directly (0x227) will show the Token received.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/409ec3b19a2598baf0684cf3a2ed55f3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>DAO Project Work Announcement (KyberDAO Proposal)</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/07/01/dao-project-work-announcement-kyberdao-proposal.html"/>
    <id>https://dev.cloudburo.net/2019/07/01/dao-project-work-announcement-kyberdao-proposal.html</id>
    <published>2019-07-01T06:07:44+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        My first proposal for the
       &lt;a href="https://alchemy.daostack.io/"&gt;Alchemy DAOstack&lt;/a&gt; based DAO (Distributed Autonomous Organization) &amp;ldquo;KyberDAO&amp;rdquo; got approved and funded. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/86bda129baa673f16c2ee6977b14cc96.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The proposal covers the creation of a Medium article with the title “Hello World Kyber Network for Java”. The article will provide a Java tutorial of the three Web3 Kyber swap scenarios and serves as an introduction for Java Developer’s to the Kyber Network. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The article will be published as part of the Coinmonks Medium publication  and will be accompanied by a Github Tutorial repository. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find the Proposal (managed as part of the DAOstack Ethereum contract)
       &lt;a href="https://alchemy.daostack.io/dao/0x6bee9b81e434f7afce72a43a4016719315069539/proposal/0x25ea4cdb14c844bcf44691e588305b2d157fae0d696c5a7440c360691243c955"&gt;here&lt;/a&gt;. The project progress/documentation will be managed in a dedicated Github project: 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://github.com/talfco/clb-kyber-java-tutorial"&gt;&lt;a href="https://github.com/talfco/clb-kyber-java-tutorial"&gt;https://github.com/talfco/clb-kyber-java-tutorial&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As part of this work, I earned 0.02% reputation into the KyberDAO governance organization.
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="https://alchemy.daostack.io/dao/0x6bee9b81e434f7afce72a43a4016719315069539/proposal/0x25ea4cdb14c844bcf44691e588305b2d157fae0d696c5a7440c360691243c955"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>DAO Project Work Announcement (PolkaDAO Proposal)</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/07/01/dao-project-work-announcement-polkadao-proposal.html"/>
    <id>https://dev.cloudburo.net/2019/07/01/dao-project-work-announcement-polkadao-proposal.html</id>
    <published>2019-07-01T05:23:18+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        My first proposal for the
       &lt;a href="https://alchemy.daostack.io/"&gt;Alchemy DAOstack&lt;/a&gt; based DAO (Distributed Autonomous Organization) &amp;ldquo;PolkaDAO&amp;rdquo; got approved. The proposal will deliver as a first milestone the initial library of a Java-based Polkadot/Substrate library. 
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/292192529c54ba028740d310efc4f0d1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The Polkadot/Substrate Type Library-  as for example exposed via the Polkadot-js API or the Python Polkscan Codec Library -  is the bootstrap library required in a programming language to process blockchain SCALE codec-encoded data structures.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Substrate (the Polkadot underlying blockchain framework/technology) encodes data in the &amp;ldquo;Simple Concatenated Aggregate Little-Endian&amp;rdquo; (SCALE) data format, as implemented by the
       &lt;a href="https://substrate.dev/docs/en/overview/low-level-data-format"&gt;parity-codec&lt;/a&gt; crate and several JavaScript modules.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find the Proposal (managed as part of the DAOstack Ethereum contract)
       &lt;a href="https://substrate.dev/docs/en/overview/low-level-data-format"&gt;here&lt;/a&gt;. Project Documentation and Progress Report is fully managed in a Github repository: 
       &lt;a href="https://github.com/talfco/clb-polkadot-java-types/wiki"&gt;&lt;a href="https://github.com/talfco/clb-polkadot-java-types/wiki"&gt;https://github.com/talfco/clb-polkadot-java-types/wiki&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As part of this work, I earned 0.61% reputation into the PolkaAO governance organization.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>ETHCC Keynote by Matan Field - DAOStack</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/06/12/ethcc-keynote-by-matan-field-daostack.html"/>
    <id>https://dev.cloudburo.net/2019/06/12/ethcc-keynote-by-matan-field-daostack.html</id>
    <published>2019-06-12T20:30:17+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;div&gt;
         There are two excellent speeches by Matan Field which introduces the DAOStack. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The lectures were held at the Ethereum, Community Conference in Paris (March 2018). Matan Field is the founder and architect of the DAOStack, which provides a platform for any kind of DAO. Matan defines a DAO as follows.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The DAO is a new form of human association:
       &lt;/div&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
            That aligns the interests of actors and manages joint resources around a shared mission as companies do.
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           But which also becomes more effective as it grows (and is decentralized and open) like free markets.
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Or in two words
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         &amp;ldquo;a DAO is
        &lt;span style="font-weight: bold;"&gt;orientable&lt;/span&gt; and
        &lt;span style="font-weight: bold;"&gt;super-scalable&lt;/span&gt;&amp;rdquo;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         Orient-able in the sense that it can be oriented towards any decision and super-scalable in the regard that it grows super linear. When you increase the organization, it will become more effective than less effective as a typical organization becomes. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The first video will provide a good overview of the architecture of DAOStack. According to Matan, they were following a systemic approach when building up the platform. I.e., they started with the core platform first, added the protocol and at the end, the applications in contrast to a lot of players in the market, which are starting with the application first. 
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;div class="responsive-video"&gt;
         &lt;iframe src="https://www.youtube.com/embed/799_Ikg1yMs?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
        &lt;/div&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         The second video, will go into more detail in the context of Holographic Consensus Algorithm and how DAOstack tries to solve the scalability challenges.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;div class="responsive-video"&gt;
         &lt;iframe src="https://www.youtube.com/embed/FwL7IYb6YiY?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
        &lt;/div&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
         A perfect starting point into the DAOstack world.
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Very well done video tutorial by Bryan Lange, which describes Classification Algorithms</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/05/25/very-well-done-video-tutorial-by-bryan-lange-which-describes-classification-algo.html"/>
    <id>https://dev.cloudburo.net/2019/05/25/very-well-done-video-tutorial-by-bryan-lange-which-describes-classification-algo.html</id>
    <published>2019-05-25T15:22:44+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Very well done video tutorial by Bryan Lange, which describes  various Classification Algorithms in Python by using Scikit.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;Scikit-learn (formerly scikits.learn) is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.&amp;rdquo;&lt;/span&gt; (
       &lt;a href="https://en.wikipedia.org/wiki/Scikit-learn"&gt;Wikipedia&lt;/a&gt;)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;div class="responsive-video"&gt;
        &lt;iframe src="https://www.youtube.com/embed/y8J6ggsLSfw?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
       &lt;/div&gt;
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Scikit-learn"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Seeing Theory - Excellent Statistics Visualization</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/04/08/seeing-theory-excellent-statistics-visualization.html"/>
    <id>https://dev.cloudburo.net/2019/04/08/seeing-theory-excellent-statistics-visualization.html</id>
    <published>2019-04-08T20:11:07+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/17fc5fd9c844e70b2306dfabdc454c76.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        An excellent visual introduction to probability and statistics can be found on the students web site of the Brown University.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As they state:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Seeing Theory was created by Daniel Kunin while an undergraduate at Brown University. The goal of this website is to make statistics more accessible through interactive visualizations (designed using Mike Bostock’s JavaScript library D3.js).&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Just follow this link: 
       &lt;a href="https://seeing-theory.brown.edu/"&gt;&lt;a href="https://seeing-theory.brown.edu/"&gt;https://seeing-theory.brown.edu/&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Great work.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Polkadot on Ethereum Community Conference 2019</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/03/20/polkadot-on-ethereum-community-conference-2019.html"/>
    <id>https://dev.cloudburo.net/2019/03/20/polkadot-on-ethereum-community-conference-2019.html</id>
    <published>2019-03-20T20:31:23+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/426055531e5e62287fae2b007f748b55.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The following list of videos were recently posted on the Polkadot Watercooler Riot channel. So if you are interested in the current state of the project put some hours aside and watch the videos:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          All videos from Ethereum Community Conference 2019
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://hashfabric.github.io/ethcc2/videos"&gt;&lt;a href="https://hashfabric.github.io/ethcc2/videos"&gt;https://hashfabric.github.io/ethcc2/videos&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Robert Habermeier: Consensus and Finality in Polkadot
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://www.youtube.com/watch?v=sNU40AE2ako"&gt;&lt;a href="https://www.youtube.com/watch?v=sNU40AE2ako"&gt;https://www.youtube.com/watch?v=sNU40AE2ako&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Jack Platts: Introduction - W3F Track Ryan Zurrer: The State of Web3 &amp;amp; Polkadot Governance
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://www.youtube.com/watch?v=qvoAf2uIF3c"&gt;&lt;a href="https://www.youtube.com/watch?v=qvoAf2uIF3c"&gt;https://www.youtube.com/watch?v=qvoAf2uIF3c&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Sergey Nazarov: Secure Decentralized Oracles on the Polkadot Network
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://www.youtube.com/watch?v=oFkTUFzMJVI"&gt;&lt;a href="https://www.youtube.com/watch?v=oFkTUFzMJVI"&gt;https://www.youtube.com/watch?v=oFkTUFzMJVI&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Emiel van der Hoek: Exploring the Polkadot/Substrate Runtime
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://www.youtube.com/watch?v=PLtWXwZRTtw"&gt;&lt;a href="https://www.youtube.com/watch?v=PLtWXwZRTtw"&gt;https://www.youtube.com/watch?v=PLtWXwZRTtw&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Building Payment Channels with Substrate
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://www.youtube.com/watch?v=1CeI6Oa1BnU"&gt;&lt;a href="https://www.youtube.com/watch?v=1CeI6Oa1BnU"&gt;https://www.youtube.com/watch?v=1CeI6Oa1BnU&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Cumulus Talk
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="https://www.youtube.com/watch?v=thgtXq5YMOo" style="color: rgb(35, 140, 245); font-family: Nunito, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; font-variant-caps: normal; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247);"&gt;&lt;a href="https://www.youtube.com/watch?v=thgtXq5YMOo"&gt;https://www.youtube.com/watch?v=thgtXq5YMOo&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Python Tutorial: Fuzzy Name Matching Algorithms</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/03/04/python-tutorial-fuzzy-name-matching-algorithms.html"/>
    <id>https://dev.cloudburo.net/2019/03/04/python-tutorial-fuzzy-name-matching-algorithms.html</id>
    <published>2019-03-04T23:27:04+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;How to cope with the variability and complexity of person name variables used as identifiers.
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;This is the fifth article of our journey into the Python data exploration world. A list of the published articles you can find &lt;/span&gt;
       &lt;a href="https://twitter.com/i/moments/1092507080307720193" style="-en-paragraph:true;"&gt;here&lt;/a&gt;
       &lt;span style=""&gt; (and the source code &lt;/span&gt;
       &lt;a href="https://github.com/talfco/clb-sentiment/tree/master/src/lesson5" style="-en-paragraph:true;"&gt;here&lt;/a&gt;
       &lt;span style=""&gt;). So let’s start then. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;Methods of Name Matching &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In statistical data sets retrieved from public sources the names (of a person) are often treated the same as metadata for some other field like an email, phone number, or an ID number. This is the case in our sample sets: &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         When names are your only unifying data point, correctly matching similar names takes on greater importance, however their variability and complexity make name matching a uniquely challenging task. Nicknames, translation errors, multiple spellings of the same name, and more all can result in missed matches. (
        &lt;a href="https://www.rosette.com/blog/overview-fuzzy-name-matching-techniques/"&gt;rosette.com&lt;/a&gt;)
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;That’s precisely the situation we are confronted now: &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Our twitter data set contains a &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;Name&lt;/span&gt;
       &lt;span style=""&gt; variable, which is set by the Twitter user itself. Dependent on the person’s preference it may &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          a complete artificial name
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          surname, last name (or vice versa)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          only last name
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          abbreviation sure name, abbreviation middle name, last name
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          his full name, but did some misspelling by accident
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          etc. etc. etc.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/846f0ddb1e96d36888f7d2c7d257f451.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;These leaves us with some data quality and normalization challenges, which we have to address so that we can use the &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;Name&lt;/span&gt;
       &lt;span style=""&gt; attribute as a matching identifier. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Some of the challenges —  as well as our strategy how we want to tackle them — are described in the below table. Each of the method used to address a challenge will be explained in this article and is part of the &lt;/span&gt;
       &lt;a href="https://github.com/talfco/clb-sentiment/tree/master/src/lesson5" style="-en-paragraph:true;"&gt;Github tutorial source code&lt;/a&gt;
       &lt;span style=""&gt;. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b54d9fdb7fbd52009ed632a19862d030.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Let’s start then, by addressing the challenge of &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;Titles&amp;amp;Honorifics&lt;/span&gt;
       &lt;span style=""&gt;, &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;Missing Components,&lt;/span&gt;
       &lt;span style=""&gt; and some other anomalies first. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;We are in the lucky position that our list is manageable from a number of records point of view, i.e., we can do a manual check about the anomalies and titles used in “Name” attribute.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;Name Cleanser Step  &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Our quality review shows that the Name field seems to have a good quality (no dummy or nicknames used). However we found some anomalies, as shown below: &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1cf10da704a88f7d7f6fc8b60e931b7a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;We fix these anomalies in our program in a first cleaning step. To stay generic, we use once again our yaml configuration file and add two additional parameters. &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;twitterNameCleaner&lt;/span&gt; which consists of a list of keywords which must be removed from any twitter account name
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;twitterNamesExpander&lt;/span&gt; which expands each Twitter account name abbreviation substring to a full name string.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Our country-specific yaml file is enhanced by the following entries. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c08ff97c1e7399bc5df30201dc4e0201.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The cleansing step is called in the below method, which assesses every row of our Twitter table (its integration into the program is explained later) &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b91aa351351967beca06790a84e7cc5c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Pretty straightforward by using the String &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;replace method&lt;/span&gt;
       &lt;span style=""&gt; &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          we remove every keyword found in the
         &lt;span style="font-style: italic;"&gt;twitterNameCleaner&lt;/span&gt; list from the
         &lt;span style="font-style: italic;"&gt;Name&lt;/span&gt; attribute (replace it with ‘’)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          we replace every abbreviation found in the
         &lt;span style="font-style: italic;"&gt;twitterNamesExpander&lt;/span&gt; dictionary through its full name.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;For our next normalizing step, we introduce an approach which has its origin in the time when America was confronted with a huge wave of immigrants 100 years ago. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;Double Metaphone Algorithm &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The principle of the algorithm goes back to the last century, actually to the year 1918 (when the first computer was years away).  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Just as side information (should you ever participate in a millionaire quiz show), the first computer was 23 years away &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;The Z3 was a German electromechanical computer designed by Konrad Zuse. It was the world’s first working programmable, fully automatic digital computer. The Z3 was built with 2,600 relays, implementing a 22-bit word length that operated at a clock frequency of about 4–5 Hz. Program code was stored on punched film. Initial values were entered manually (&lt;/span&gt;
        &lt;a href="https://en.wikipedia.org/wiki/Z3_%28computer%29" style="font-style: italic;"&gt;Wikipedia&lt;/a&gt;
        &lt;span style="font-style: italic;"&gt;) &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1951952aab2dc3892ab23bc2699e86aa.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; A Z3 replica at the Deutsche Museum (
       &lt;a href="http://creativecommons.org/licenses/by-sa/3.0/"&gt;CC BY-SA 3.0&lt;/a&gt;)
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;So back to 1918, in that year Robert C. Russell of the US Census Bureau invented the Soundex algorithm which is capable of indexing the English language in a way that multiple spellings of the same name could be found with only a cursory glance. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;Immigrants to the United States had a native language that was not based on Roman characters. To write their names, the names of their relatives, or the cities they arrived from, the immigrants had to make their best guess of how to express their symbolic language in English. The United States government realized the need to be able to categorize the names of private citizens in a manner that allowed for multiple spellings of the same name (e.g. Smith and Smythe) to be grouped. (read the full story &lt;/span&gt;
        &lt;a href="http://www.b-eye-network.com/view/1596" style="font-style: italic;"&gt;here&lt;/a&gt;
        &lt;span style="font-style: italic;"&gt;) &lt;/span&gt;
       &lt;/div&gt;
       &lt;div&gt;
        &lt;br&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9d891b330b5e0d174e75ac02a626d49b.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; Immigrants arriving at Ellis Island — Wikipedia — 
       &lt;a href="https://commons.wikimedia.org/wiki/File:Arriving_at_Ellis_Island_LCCN2014710704.jpg"&gt;Commons Licence&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The Soundex algorithm is based on a phonetical categorization of letters of the alphabet. In his patent, Russell describes the strategy assigning a numeric value to each category. For example, Johnson was mapped to J525, Miller to M460 etc. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The Soundex algorithm evolved over time in the context of efficiency and accuracy and was replaced with other algorithms.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;For the most part, they have all been replaced by the powerful indexing system called &lt;/span&gt;
       &lt;a href="http://aspell.net/metaphone/" style="-en-paragraph:true;"&gt;Double Metaphone&lt;/a&gt;
       &lt;span style=""&gt;. The algorithm is available as open source and its last version was released around 2009. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Luckily there is a Python library &lt;/span&gt;
       &lt;a href="https://pypi.org/project/Metaphone/" style="-en-paragraph:true;"&gt;available&lt;/a&gt;
       &lt;span style=""&gt;, which we use in our program. We write some small wrapper methods around the algorithm and implement a compare method. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;doublemetaphone&lt;/span&gt;
       &lt;span style=""&gt; method returns a tuple of two characters key, which are a phonetic translation of the passed in word. Our &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;compare&lt;/span&gt;
       &lt;span style=""&gt; method shows the ranking capability of the algorithm which is quite limited. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7ef655297fa80ef167d3b7e490d3280f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Let’s run some verification checks to assess the efficiency of the algorithm by introducing the &lt;/span&gt;
       &lt;a href="http://test_class.py/" style="font-style: italic;-en-paragraph:true;"&gt;test_class.py&lt;/a&gt;
       &lt;span style=""&gt; which is based on the Python &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;pytest&lt;/span&gt;
       &lt;span style=""&gt; framework. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         The pytest framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries. (
        &lt;a href="https://docs.pytest.org/en/latest/"&gt;Link&lt;/a&gt;)
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Its usage is straightforward and, you can see the test class implementation below &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/0cfad6dd6b23a9a6ab56fbc659d4b81c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The tests result are shown below. We used two names (A+B) and were checking with some changed names (A1/A2+B1/B2/B3) the efficiency of the algorithm. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/4d9af0a1dc2c845b845b91282bde794d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          A1+B1 passed the Strong match check. So missing spaces and ü/ä replacements with u/a seems not affecting the double metaphone key generation
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          B2 passes the Normal match. Spelling mistakes are covered by the algorithm as well
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          A2 + B3 are failing. A2 uses an abbreviation of a name part, which cannot be coped with. This behavior we had to expect and decided to introduce the name expander algorithm (see above). B3 failed due to missing “-”. This was unexpected, but we cover this behavior with a second name cleanser step.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;span style="font-size: 18px;"&gt;Name Cleanser Step 2 &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Our small test run has shown that the following additional cleaning steps are beneficial: &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          We have to get rid of any special character which could result in a failure
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Out of order components, i.e., the last name before the first name affects the phonetic key generation. Therefore best is to sort the name components alphabetically to increase matching accuracy.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Besides getting rid of any special character, we decide to remove any Unicode character, i.e. in Switzerland, multiple German (ä,ö,ü), French (à,é,è) or Italian umlaut are used, and we want to get rid of them as well. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The below &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;normalize_unicode_to_ascii&lt;/span&gt;
       &lt;span style=""&gt; method uses the &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;unicodedata&lt;/span&gt;
       &lt;span style=""&gt; library to convert the name to ASCII and then change all character to lower case. Afterward, two regular expressions are used to remove the special characters, as well as multiple spaces.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Regular expression operations are a powerful mechanism but not easy to understand for a novice. You may work through the &lt;/span&gt;
       &lt;a href="https://scotch.io/tutorials/an-introduction-to-regex-in-python" style="-en-paragraph:true;"&gt;following tutorial&lt;/a&gt;
       &lt;span style=""&gt; to get the first impression of this powerful approach.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Just one explanation, the regular expression term
         &lt;span style="font-style: italic;"&gt;‘[^A-Za-z0–9 ]+’&lt;/span&gt; means take any number of characters between ‘A-Z’ + ‘a-z’ + ‘0–9’ +‘ ‘ out of the passed in string. ^[]+ are special characters in the regular expression. The expression sequence can be translated to “strip the string from any special character.”
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;br&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e73308dde4f32b7d7f9324b29c77456b.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;The Beauty of the Data Frame “Apply” Method &lt;/span&gt;Establish the calculate_name_matching method in both classes
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;We have now all our name cleanser, normalization, and phonetic key generator methods together (bundled in the &lt;/span&gt;
       &lt;a href="http://namemachting.py/" style="font-style: italic;-en-paragraph:true;"&gt;namemachting.py&lt;/a&gt;
       &lt;span style=""&gt; module) and can finally construct our name matching identifiers creation method(s) &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;calculate_name_matching&lt;/span&gt;
       &lt;span style=""&gt; for our two classes &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;govAPI&lt;/span&gt;
       &lt;span style=""&gt; and &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;GovernmentSocialMediaAnalyzer. &lt;/span&gt;
       &lt;span style=""&gt; &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d0ebebd65dd5626a47be01f63b5add2d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; One new module and two new methods are added
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Both of the classes get a new method, which we apply to their Panda data frames and each method creates three new identifier attributes (&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;col_match1, col_match2, col_match3&lt;/span&gt;
       &lt;span style=""&gt;). The three columns can then be used to merge the two data frames. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The method for our &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;governmentAPI&lt;/span&gt;
       &lt;span style=""&gt; class looks as follows: &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/f57cef471d5a02c88d68e2dc88a1cdf1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;So for our &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;govAPI&lt;/span&gt;
       &lt;span style=""&gt; class as follows. It’s an implemented method in our abstract class. The method is used for any implemented sub-class (refer to the factory design explained in our &lt;/span&gt;
       &lt;a href="https://towardsdatascience.com/python-tutorial-connect-government-data-apis-by-using-the-factory-pattern-501e5c65ba6d" style="-en-paragraph:true;"&gt;earlier tutorial&lt;/a&gt;
       &lt;span style=""&gt;) &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/30e49168e0a2612f9f46937e79909c04.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The implementation is straightforward, we normalize the person’s name of each table (from the government API we got back three independent attributes, from the Twitter API one account name) and then calculate the two double metaphone identifier strings. All three new values we append to the passed in row. &lt;/span&gt;
      &lt;/div&gt;Don’t call us we call you: “The Hollywood Principle”
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/63f3c37ff9a3fe108b40531edd10c955.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; Photo by
       &lt;a href="https://unsplash.com/photos/goholCAVTRs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Annie Spratt&lt;/a&gt; on 
       &lt;a href="https://unsplash.com/search/photos/telephone?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;One question is still open: “How do we use our new methods to get the data frame enhanced by the three columns with its calculated values for each row? &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Well, that can be achieved quite easily by using the &lt;/span&gt;
       &lt;a href="https://pandas.pydata.org/pandas-docs/version/0.22/generated/pandas.DataFrame.apply.html" style="-en-paragraph:true;"&gt;Panda Data Frame &lt;/a&gt;
       &lt;a href="https://pandas.pydata.org/pandas-docs/version/0.22/generated/pandas.DataFrame.apply.html" style="font-style: italic;-en-paragraph:true;"&gt;apply&lt;/a&gt;
       &lt;span style=""&gt; method, which is defined as: &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         apply() can apply a function along any axis of the dataframe
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;This is a nice and elegant way to do any calculation on each row or column of a data frame. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Below you see the enhanced &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;create_politican_from_govapi_table&lt;/span&gt;
       &lt;span style=""&gt; method. On code line 4 we newly call the &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;apply&lt;/span&gt;
       &lt;span style=""&gt; method of the data frame (&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;df&lt;/span&gt;
       &lt;span style=""&gt;) and pass in as a parameter our method name &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;self.__calculate_name_matching&lt;/span&gt;
       &lt;span style=""&gt; and instruct the &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;apply&lt;/span&gt;
       &lt;span style=""&gt; method to call our method for each row (&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;axis=1&lt;/span&gt;
       &lt;span style=""&gt;). &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/8e6a705b457a7928da8489ae715615ed.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Now the Panda data frame  &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          iterates through each data row, which represents a data record of a dedicated politician
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          calls our
         &lt;span style="font-style: italic;"&gt;self.__calculate_name_matching&lt;/span&gt; method
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          passes in the data row as a parameter and stores back the data row returned by the method call (which three new columns).
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Very nifty isn’t it? We didn’t have to code any kind of loops which are fetching data, checking for the end of loop conditions and so on. We just have implemented the method which can be passed to the &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;apply&lt;/span&gt;
       &lt;span style=""&gt; method. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;This kind of interaction is a well-known design principle in IT, known under the name “Hollywood Principle”, which the excellent &lt;/span&gt;
       &lt;a href="http://matthewtmead.com/blog/hollywood-principle-dont-call-us-well-call-you-4/" style="-en-paragraph:true;"&gt;blog article of Matthew Mead&lt;/a&gt;
       &lt;span style=""&gt; describes as follows: &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         The essence of this principle is “don’t call us, we’ll call you”. As you know, this is a response you might hear after auditioning for a role in a Hollywood movie. And this is the same concept for the software Hollywood Principle too. The intent is to take care to structure and implement your dependencies wisely.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Think about our implementation above. Our &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;calculate_name_matching&lt;/span&gt;
       &lt;span style=""&gt; method is completely decoupled of the panda data frame implementation. Our method gets just a row dictionary as an input, which we can manipulate and can give back at the end as the return value. We are completely unaware that there is a massive panda data frame implementation involved and don’t have any dependency on it. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         At its most basic level, the principle is about reducing the coupling in a software system. It gets back to the well known phrase in software development: loose coupling and high cohesion. You can keep classes loosely
        &lt;span style="font-style: italic;"&gt;coupled&lt;/span&gt; by ensuring that you don’t have unnecessary references and you are referencing classes and other subsystems properly. Although the Hollywood Principle does not dictate anything about cohesion, it is an important aspect too.
        &lt;span style="font-style: italic;"&gt;Cohesion&lt;/span&gt; is about keeping your classes true to their intent and not allowing their behavior to expand beyond its core purpose. Like high coupling, low cohesion doesn’t tend to cause systems to be unstable or not work properly, but will likely lead to difficulty in maintaining the software.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Enough design teaching for today, when we run our program both plotly politician tables are enhanced by 3 new attributes, which allows us to join them together finally (uff… quite some conceptual work we had to do) &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e689e93554360e3826f764d8ec4ee74a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;Finally, Join the Data Frames
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;We now have to join the two data frames, which is one of the many combining and merging possibilities which Panda is offering. Refer to the following article by &lt;/span&gt;
       &lt;a href="https://datacarpentry.org/python-ecology-lesson/05-merging-data/" style="-en-paragraph:true;"&gt;datacarpentry.org&lt;/a&gt;
       &lt;span style=""&gt;, which gives a good introduction to the overall topic. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         Another way to combine DataFrames is to use columns in each dataset that contain common values (a common unique id). Combining DataFrames using a common field is called “joining”. The columns containing the common values are called “join key(s)”. Joining DataFrames in this way is often useful when one DataFrame is a “lookup table” containing additional data that we want to include in the other.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;This is achieved by the &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;merge&lt;/span&gt;
       &lt;span style=""&gt; method which can be applied to a Panda data frame (see code line 23 below). You have to provide as parameters &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          the two data frames
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          the matching key (in our case the double metaphone attribute
         &lt;span style="font-style: italic;"&gt;col_match2&lt;/span&gt; available in both data frames)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          and the join strategy (
         &lt;span style="font-style: italic;"&gt;how&lt;/span&gt; parameter)
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/441b6a10091be0303e25121eb322dfc4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;We indicate an “outer left” join (&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;how=left)&lt;/span&gt;
       &lt;span style=""&gt; which can be visualized as follows &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9439a4b1b72776e4e8da39c5063dc3ce.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Omitting the &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;how&lt;/span&gt;
       &lt;span style=""&gt; parameter would result in an inner join &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/cf467ad5f09b4484d9c973f71daa9ed8.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;“Inner Join” means only take over rows which are matching, “Left Join” means to take over ALL row of the left data frame. If there is no matching right table record, fill the relevant record with “NaN” values. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Our new Plotly table &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;CH-tw-politican-merged-list&lt;/span&gt;
       &lt;span style=""&gt; has such kind of entries.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/bcfbeecefee5901df7e4cbef2b2e9f00.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Well, that means our matching strategy still misses entries. Let’s compare the Pie Chart of our merged table, with the initial one: &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/fdd1c4cb6053a8919d0d67d6e3723501.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; Twitter User per Party (merged with gov API source)
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The initial one (refer to this &lt;/span&gt;
       &lt;a href="https://towardsdatascience.com/python-tutorial-connect-government-data-apis-by-using-the-factory-pattern-501e5c65ba6d" style="-en-paragraph:true;"&gt;article&lt;/a&gt;
       &lt;span style=""&gt;) missed 51 one, with our simple merge strategy we could identify another 14 entries.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d011404a3ecf2c06521bcfd216bb508a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; Twitter User per Party (just using Twitter API information)
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;So, we are not there yet (argh…), but enough for today, in the next session we try to adapt our matching strategy so that we can reduce the unknown once again. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The source code you can find in the corresponding &lt;/span&gt;
       &lt;a href="https://github.com/talfco/clb-sentiment" style="-en-paragraph:true;"&gt;Github project&lt;/a&gt;
       &lt;span style=""&gt;, a list of all other articles &lt;/span&gt;
       &lt;a href="https://twitter.com/i/moments/1092507080307720193" style="-en-paragraph:true;"&gt;here&lt;/a&gt;
       &lt;span style=""&gt;. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Monologue of the Algorithm Video: how Facebook turns users data into its profit</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/03/03/monologue-of-the-algorithm-video-how-facebook-turns-users-data-into-its-profit.html"/>
    <id>https://dev.cloudburo.net/2019/03/03/monologue-of-the-algorithm-video-how-facebook-turns-users-data-into-its-profit.html</id>
    <published>2019-03-03T17:03:24+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;a href="https://en.panoptykon.org/about"&gt;Panoptykon Foundation&lt;/a&gt; is a polish foundation which was established in April 2009 by a group of engaged lawyers, to express their opposition to surveillance.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        I got recently aware of them and was impressed by their content work around surveillance. The articles have a strong sense for visualizing complex topics and good storytelling.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/0f6647fa5a64fc37c10a694306d0a9e5.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        (Diagram by 
       &lt;a href="https://en.panoptykon.org/about"&gt;Panoptykon Foundation&lt;/a&gt;)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Brilliant is the &amp;ldquo;Monologue of the Algorithm: how Facebook turns users data into its profit&amp;rdquo; which explains the power of Facebook&amp;rsquo;s algorithm in front of a large architectural diagram, the so-called Facebook Factory diagram.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The English version of video can be found on Vimeo:
       &lt;a href="https://player.vimeo.com/video/249633335"&gt;HERE&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        I&amp;rsquo;m quite intrigued about the diagram itself, which has a plethora of information about the Facebook strategy, so I tried to get hold of it. Luckily in the comment section of the Video, the foundation provides a sharing link. Because certain other links to the diagram were already outdated, I decided to share it by myself as well. All credits go to the Panoptykon Foundation!
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find a link to the diagram:&lt;br&gt;
       &lt;a href="https://drive.google.com/open?id=1NymZ53QBOZcmkx_8NBTG4LuU1jQnMB0G"&gt;HERE&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Another great article of the foundation can be found on Quartz:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;Your digital identity has three layers, and you can only protect one of them. Once again the visualization is stunning.” &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Read it here:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;a href="https://qz.com/1525661/your-digital-identity-has-three-layers-and-you-can-only-protect-one-of-them/"&gt;Link to Quartz Article&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Mindful reading ! 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        BTW: 
      &lt;/div&gt;
      &lt;div&gt;
        A german “robo&amp;rdquo; translation (serves the purpose, quite well) can be found here:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;div class="responsive-video"&gt;
        &lt;iframe src="https://www.youtube.com/embed/1NE9PAIPWF0?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Python Tutorial: Short Stop To Introduce Main Statistical Concepts</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/02/24/python-tutorial-short-stop-to-introduce-main-statistical-concepts.html"/>
    <id>https://dev.cloudburo.net/2019/02/24/python-tutorial-short-stop-to-introduce-main-statistical-concepts.html</id>
    <published>2019-02-24T22:07:14+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;span style="font-size: 18px;"&gt;Explaining the concepts by using our tutorial program as a showcase&lt;/span&gt; 
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;I planned to introduce in this session the merging algorithm for our two data sets via the name variables.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;To outline the overall approach understandably and concisely, it’s essential to bring some statistical concepts beforehand.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;I decided to do a short bus stop and embed the work into the statistical framework, which underlies any data exploration project. So no programming today just some concepts, which are vital for the overall understanding. I plan more statistics bus stops in the future to get the scientific context of our program established.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="text-align: center;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/2fecdd0272dc2b28a470c69ff578d33e.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; Photo by
       &lt;a href="https://unsplash.com/photos/CEubYUySRo4?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;chuttersnap&lt;/a&gt; on 
       &lt;a href="https://unsplash.com/search/photos/bus-stop?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;span style="font-size: 24px;"&gt;Population, Sample, Measurement, Parameter, and Statistic &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;We begin with some basic definitions used in statistics, by using the &lt;/span&gt;
       &lt;a href="https://saylordotorg.github.io/text_introductory-statistics/s05-01-basic-definitions-and-concepts.html" style="-en-paragraph:true;"&gt;introduction tutorial&lt;/a&gt;
       &lt;span style=""&gt; of the Saylor Academy (the content is provided under a &lt;/span&gt;
       &lt;a href="https://saylordotorg.github.io/text_introductory-statistics/s00-license.html" style="-en-paragraph:true;"&gt;creative commons license&lt;/a&gt;
       &lt;span style=""&gt;)  &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;A&lt;/span&gt;
        &lt;span style="font-weight: bold;"&gt;population&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;is any specific collection of objects of interest. A&lt;/span&gt;
        &lt;span style="font-weight: bold;"&gt;sample&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;is any subset or subcollection of the population, including the case that the sample consists of the whole population, which maps to the term&lt;/span&gt;
        &lt;span style="font-weight: bold;"&gt;census&lt;/span&gt;.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;span style="font-size: 18px;"&gt;Population &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In our case, the population is the Swiss government members (councilors) of the &lt;/span&gt;
       &lt;a href="https://en.wikipedia.org/wiki/Federal_Assembly_%28Switzerland%29" style="-en-paragraph:true;"&gt;Federal Assembly of Switzerland&lt;/a&gt;
       &lt;span style=""&gt;.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/4c0b504f7df300e09146939838182854.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;span style="font-size: 18px;"&gt;Sample &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Our sample is all councilors, which have a Twitter account and listed as a member of the &lt;/span&gt;
       &lt;a href="https://twitter.com/SoMePolis/lists/bundesparlamentarierinnen" style="-en-paragraph:true;"&gt;SoMePolis Twitter Parliament List&lt;/a&gt;
       &lt;span style=""&gt;. It’s a subset, so we don’t use the term census for the population. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;A&lt;/span&gt;
        &lt;span style="font-weight: bold;"&gt;measurement&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;is a number or attribute/variable computed for each member of a population or sample. The measurements of sample elements are collectively called the&lt;/span&gt;
        &lt;span style="font-weight: bold;"&gt;sample data&lt;/span&gt;.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;span style="font-size: 18px;"&gt;Measurement &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;For each member of the sample set, we are collecting variables via two data set’s i.e., the first set of variables are collected via the Twitter API, the second set via the Government API. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;Sample Data &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Our overall sample data set we get by unifying these two data sets. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;A&lt;/span&gt;
        &lt;span style="font-weight: bold;"&gt;parameter&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;is a number that summarizes some aspect of the population as a whole. A&lt;/span&gt;
        &lt;span style="font-weight: bold;"&gt;statistic&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;is a number computed from the sample data.&lt;/span&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Because our numbers to be computed are based on a subset of a population, we talk about a statistic and not a parameter. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;That’s it about the initial scope definition, let’s focus now about the “Variables” concept which is crucial. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;Data Set’s and Variables &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;As a fresh up, let’s look at the two data sets, which we retrieved already: &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;As a first table (&lt;/span&gt;
       &lt;a href="https://towardsdatascience.com/python-tutorial-government-social-media-analyser-class-build-out-12858190b284" style="-en-paragraph:true;"&gt;Tutorial 2&lt;/a&gt;
       &lt;span style=""&gt;), we retrieved from Twitter the following data record of Swiss politician Twitter accounts. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/5cc7f4ccbd21f36f1ef8ddd1f8eebe00.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;It provides us with three statistical variables playing a role in our future analysis: &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;FollowersCount&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;FriendsCount&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;Party&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;Name&lt;/span&gt;, which may represent the Twitter users real name. The word “may” is here essential, but more to that later.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;What we also got from Twitter is an &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;Identifier&lt;/span&gt;
       &lt;span style=""&gt; variable, which helps us reveal the real identity of a person (in our case a member of the Swiss council): &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;ScreenName&lt;/span&gt; which is the unique identifier of a Twitter account. We can use it in the case have to retrieve additional information via the Twitter API in a later stage.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;As a second Table (&lt;/span&gt;
       &lt;a href="https://towardsdatascience.com/python-tutorial-government-social-media-analyser-class-build-out-12858190b284" style="-en-paragraph:true;"&gt;Tutorial 3&lt;/a&gt;
       &lt;span style=""&gt;), we retrieved via the Swiss Government API the list of all current councilors of the &lt;/span&gt;
       &lt;a href="https://en.wikipedia.org/wiki/Federal_Assembly_%28Switzerland%29" style="-en-paragraph:true;"&gt;Federal Assembly of Switzerland&lt;/a&gt;
       &lt;span style=""&gt;.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/24ab5f54215149cfd86774dffe3714df.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;From this table, we got the following variables, which we want to use for our statistical assessment: &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;firstName-middleName-lastName&lt;/span&gt;, which is the (council’s) person name.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;birthDate&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;council,&lt;/span&gt; the assembly is made up of two chambers i.e., the
         &lt;a href="https://en.wikipedia.org/wiki/National_Council_%28Switzerland%29"&gt;National Council&lt;/a&gt; (lower house) and the
         &lt;a href="https://en.wikipedia.org/wiki/Council_of_States_%28Switzerland%29"&gt;Council of States&lt;/a&gt;. Which is represented by the value ’N’ or ‘S’ in the table.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;electedDate&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;gender&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;maritalStatus&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;party&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;home address (postal Code, townName, zip) &lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;As well as the Identifier Variable &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-style: italic;"&gt;id&lt;/span&gt;, which identifies the data record in the context of the government API
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Let’s dig a little bit deeper about the statistical meaning of variables used in our data sets &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;Variable Term Definition &lt;/span&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         In statistics, a
        &lt;span style="font-weight: bold;"&gt;variable&lt;/span&gt; has two defining characteristics. (1) A variable is an attribute that describes a person, place, thing, or idea. (2) The value of the variable can “vary” from one entity to another.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In our example, a person’s &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;gender&lt;/span&gt;
       &lt;span style=""&gt;, &lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;political party&lt;/span&gt;
       &lt;span style=""&gt; or T&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;witter follower count&lt;/span&gt;
       &lt;span style=""&gt; are potential variables.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 18px;"&gt;Data type categorization &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The Data Type of a variable plays an important role in statistics which must be understood, to correctly apply statistical measurements to your data. In statistics, the term “Measurement Scale” may be used as well. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The following tree categorizes the data type concept  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/5dd29ed6de064b9bd1a45d01126470ff.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Refer to the following excellent &lt;/span&gt;
       &lt;a href="https://towardsdatascience.com/data-types-in-statistics-347e152e8bee" style="-en-paragraph:true;"&gt;Medium article&lt;/a&gt;
       &lt;span style=""&gt; to get an overall introduction to the data type topic.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Let’s apply the classification to our two data sets, which results in the following table. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/aacca73ba1bd12f3d51cbb222d8e447d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Two comments &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          We marked for each set a variable as “unique” which is identifying a dedicated sample result and on which we cannot perform any data analysis. A so-called Identifier Variables
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          In the gov.api data set, I bundled some variables together for describing a person or address. I.e., the name of a person is made of
         &lt;span style="font-style: italic;"&gt;firstName, middleName,&lt;/span&gt; and
         &lt;span style="font-style: italic;"&gt;lastName&lt;/span&gt; of a home address of person consisting of
         &lt;span style="font-style: italic;"&gt;postalCode, townName,&lt;/span&gt; and
         &lt;span style="font-style: italic;"&gt;zip&lt;/span&gt;.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;A multitude of variable types exists, which can be classified with the above scheme (refer to the reference sections for additional links), but we are interested now in the so-called Identifier Variables. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;Identifier Variables &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Identifier Variables and Unique Identifiers are commonly used in statistics to unique identifies for data collection purposes. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         Identifier variables are
        &lt;a href="https://www.statisticshowto.datasciencecentral.com/what-is-a-categorical-variable/"&gt;categorical variables&lt;/a&gt; that have a single individual per category. For example:
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         A Social Security Number, Interviewer ID number or Employee ID number.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         As identifier variables are singular, it’s impossible to perform any
        &lt;a href="https://www.statisticshowto.datasciencecentral.com/probability-and-statistics/data-analysis/"&gt;data analysis&lt;/a&gt; on them. Instead, they are used to identify results.
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Well, our two data sets have a unique identifier in the own domain, but there is no real unique identifier which allows combining the two data-set directly via a unique identifier which is available in both (cross-domain) data set. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In an ideal world, both records would have a unique identifier i.e., a national identifier in their data sets which allows to merge them easily. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The below example shows the national identity card of Switzerland, which has a unique identity number for Swiss citizen (holding an identity card). &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/017f5d13fe40a6bca041c1afd2c39d6d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="text-align: center;"&gt;
        Swiss ID Card — 
       &lt;a href="https://www.checkinscan.com/blog/en/articles/find-issue-date-passport-or-id-card/"&gt;Source&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The below identifier requires that a person holds an identity card, in case a person holds just a passport, you would have to get the unique passport identifier. People who are not traveling wouldn’t have potentially any of the two identity means.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;An even better identifier would be a national security identifier, which almost every citizen holds (after a certain age). Below the number for a person domiciled in Switzerland. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article ' style="max-width:100%" src='/images/532405696bfedbe0f8b6bc2b87c17315.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="text-align: center;"&gt;
        Swiss Social Security Number — 
       &lt;a href="https://www.grundrechte.ch/ahv-nummer-soll-bei-allen-behoerden-globaler-personenidentifikator-werden.html"&gt;Source&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The reality is that your public acquired data sets will not include such &lt;/span&gt;
       &lt;span style="font-weight: bold;"&gt;highly sensitive&lt;/span&gt;
       &lt;span style=""&gt; numbers of persons.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Such strong identification numbers should never be exposed in an unsecured manner (sharing the public on the Internet). Refer to the following article by CNN which describes one of the famous data hacks of Equifax, which resulted in the leaking of the social security number of 143 million Americans. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         Criminals can use your Social Security number to steal your identity. They can open bank accounts and credit cards or apply for a loan. Hackers can also get ahold of your tax refund or get medical treatment under your name. (
        &lt;a href="https://money.cnn.com/2017/09/13/technology/social-security-number-identification/index.html"&gt;money.cnn.com&lt;/a&gt;)
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;That concludes our introduction to statistical concepts for today and brings us back in the next article, to solving the problem via Python of joining data sets which don’t have a universal unique identifier.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In our case we have in both data sets one (or multiple) attributes which describes the personal name of a person. However, be aware; &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         When names are your only unifying data point, correctly matching similar names takes on greater importance. However, their variability and complexity make name matching a uniquely challenging task. Nicknames, translation errors, multiple spellings of the same name, and more all can result in missed matches. (
        &lt;a href="https://www.rosette.com/blog/overview-fuzzy-name-matching-techniques/"&gt;rosette.com&lt;/a&gt;)
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;That’s exactly the situation we are confronted now, let’s move on in the next article. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;References &lt;/span&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          A comprehensive list of different variable types (well any type you can imagine) — 
         &lt;a href="https://www.statisticshowto.datasciencecentral.com/probability-and-statistics/types-of-variables/"&gt;Link: datasciencecentral.com&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Python Tutorial Exercise 3: Implement the govAPI_UK class</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/02/18/python-tutorial-exercise-3-implement-the-govapi_uk-class.html"/>
    <id>https://dev.cloudburo.net/2019/02/18/python-tutorial-exercise-3-implement-the-govapi_uk-class.html</id>
    <published>2019-02-18T22:26:26+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Write a
       &lt;span style="font-style: italic;"&gt;govAPI_UK &lt;/span&gt;implementation class which retrieves the following attributes from the UK government API:
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          family name
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          given ame
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          gender
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          party
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          id (by extracting the number out of the _about attributes)
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Below you see a dedicated record of the
       &lt;i&gt;members &lt;/i&gt;API endpoint. You can access the viewer via the following link:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;a href="http://explore.data.parliament.uk/?endpoint=members"&gt;&lt;a href="http://explore.data.parliament.uk/?endpoint=members"&gt;http://explore.data.parliament.uk/?endpoint=members&lt;/a&gt;&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          As one can see below, there are 4451 member records.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Via the &amp;ldquo;Output to” menu item, you can change the format for example from HTML to JSON.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/75f6c26a26ff4cb8c5f2b2fac78a3186.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          The full API is described here: 
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="http://explore.data.parliament.uk/?learnmore=Members"&gt;&lt;a href="http://explore.data.parliament.uk/?learnmore=Members"&gt;http://explore.data.parliament.uk/?learnmore=Members&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           Scroll down the full page, to get an overview of all attributes for the Members endpoint, as well as possibilities to query parametes 
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          The following request will return a JSON data structure of all members, which you have to transform:
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;a href="http://lda.data.parliament.uk/members.json?_pageSize=500&amp;amp;_page=0"&gt;&lt;a href="http://lda.data.parliament.uk/members.json?pageSize=500&amp;amp;amp;_page=0"&gt;http://lda.data.parliament.uk/members.json?pageSize=500&amp;amp;amp;_page=0&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          The JSON is shown below
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           This formatted view can be achieved by using the online json formatter: 
          &lt;a href="https://jsonformatter.curiousconcept.com/"&gt;&lt;a href="https://jsonformatter.curiousconcept.com/"&gt;https://jsonformatter.curiousconcept.com/&lt;/a&gt;&lt;/a&gt;
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/84c08f9c01bccd1d9208ae8476ac1ff7.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Some programming hints:
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          When you have fetched the JSON and stored in a variable, i.e. 
         &lt;span style="font-style: italic;"&gt;loaded_json&lt;/span&gt; you have to iterate over the array found in&lt;br&gt;
         &lt;span style="font-style: italic;"&gt;loaded_json[‘result’][‘items’] &lt;/span&gt;this is actually the members list
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          As request parameter provide 
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;i&gt;pageSize=500 &lt;/i&gt;store this values as part of the config_UK.yaml file (refer to the
          &lt;i&gt;govAPI_CH&lt;/i&gt; class implementation)
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
          &lt;i&gt;_page &lt;/i&gt;which you count up for each page you request (again refer to the
          &lt;i&gt;govAPI_CH&lt;/i&gt; class)
         &lt;/div&gt;&lt;/li&gt;
        &lt;ul&gt;
         &lt;li&gt;
          &lt;div&gt;
            For the loop condition you can use the attribute
           &lt;i&gt;totalResults, &lt;/i&gt;which is provided as an element in the JSON document. 
          &lt;/div&gt;&lt;/li&gt;
         &lt;li&gt;
          &lt;div&gt;
            I.e. fetch “x” times 500 records until you retrieved overall 4451 records.
          &lt;/div&gt;&lt;/li&gt;
        &lt;/ul&gt;
       &lt;/ul&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/5c6e48b10c90a2be0bacfb6fc5050c36.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Python Tutorial: Connect Government Data API's By  Using The Factory Pattern</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/02/11/python-tutorial-connect-government-data-api-s-by-using-the-factory-pattern.html"/>
    <id>https://dev.cloudburo.net/2019/02/11/python-tutorial-connect-government-data-api-s-by-using-the-factory-pattern.html</id>
    <published>2019-02-11T22:34:11+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Source Politician Data from  Public Government Data API’s to Increase Allocation Accuracy&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In this tutorial, we do mainly two steps
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          First of all we generate some plotly diagrams out of our collected data,
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          secondly, we connect a public government API to our program in order to retrieve government members and party assignment in a reliable way
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As you already know we are interested in a generalized program, which can work with multiple countries. For that, we will introduce an abstract class and the factory pattern in the second part of our tutorial.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        But let’s start with the first quite easy task of generating two charts for our tables.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Plotly Chart Generation&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We create a bar chart as well as a pie chart. As a base, we take our plotly table
       &lt;span style="font-style: italic;"&gt;CH-tw-party-list&lt;/span&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/751c13a5281cb15579ad8b4fa6e6da92.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The code is straightforward:
  &lt;/div&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;div&gt;
      In the bar chart, we visualize the accumulated friends count per party.
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
      In the pie chart, we aggregate the twitter account per party.
    &lt;/div&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_party_friends_count_bar_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
          &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
              &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Party&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# assign x as the dataframe column 'x' &lt;/span&gt;
              &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FriendsCount&lt;/span&gt; 
          &lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__country_code&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;'-tw-party_politicans_count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_party_politicans_count_pie_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="n"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Party&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PartyCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                     &lt;span class="n"&gt;hoverinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'label+percent'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;textinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                     &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Twitter User per Party"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;titlefont&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
                          &lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Courier New, monospace'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                          &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                          &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'#7f7f7f'&lt;/span&gt; 
                      &lt;span class="p"&gt;))&lt;/span&gt; 
      &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__country_code&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;'-tw-party_friends_count'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
    Github Gist: 
   &lt;a href="https://gist.github.com/talfco/fd34b0f8bf75fed2bfa4307b1899e37d"&gt;https://gist.github.com/talfco/fd34b0f8bf75fed2bfa4307b1899e37d&lt;/a&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 14px;"&gt;As one can see in the code excerpt, various configuration parameters allow you to modify the layout of a chart. Head over to the&lt;/span&gt;
   &lt;a style="font-size: 14px;" href="https://plot.ly/pandas/"&gt; Plotly Python Open Source Graphing Library&lt;/a&gt;
   &lt;span style="font-size: 14px;"&gt; to find out more about the various possibilities with charts, panda and plotly.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/59f7cbe865d467e007f41141c92466ce.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As one can see we have a lot of “unkowns”, i.e. we couldn’t identify the corresponding party by just analyzing Twitter data elements. In the second part of this tutorial, we will connect another data source for addressing this issue.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7b0307e94d4ad54a6cc124c6e7372c5d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Government Data API Factory&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/76b40038953263256ecc659e32aa3d1a.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="text-align: center;"&gt;
       &lt;span style="font-size: 14px; background-color: #f5f5f5; color: #111111; font-family: -apple-system, system-ui, 'San Francisco', 'Helvetica Neue', Helvetica, Ubuntu, Roboto, Noto, 'Segoe UI', Arial, sans-serif;"&gt;Photo by &lt;/span&gt;
       &lt;a style="box-sizing: border-box; background-color: #f5f5f5; font-size: 14px; color: #999999; font-family: -apple-system, system-ui, 'San Francisco', 'Helvetica Neue', Helvetica, Ubuntu, Roboto, Noto, 'Segoe UI', Arial, sans-serif;" href="https://unsplash.com/photos/zb29xBwpt6c?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Rodney Minter-Brown&lt;/a&gt;
       &lt;span style="font-size: 14px; background-color: #f5f5f5; color: #111111; font-family: -apple-system, system-ui, 'San Francisco', 'Helvetica Neue', Helvetica, Ubuntu, Roboto, Noto, 'Segoe UI', Arial, sans-serif;"&gt; on &lt;/span&gt;
       &lt;a style="box-sizing: border-box; background-color: #f5f5f5; font-size: 14px; color: #999999; font-family: -apple-system, system-ui, 'San Francisco', 'Helvetica Neue', Helvetica, Ubuntu, Roboto, Noto, 'Segoe UI', Arial, sans-serif;" href="https://unsplash.com/search/photos/factory?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In the recent years, the availability of so-called open Government API’s exploded.  It stems from the idea that data should be open, as Wikipedia describes the term of
       &lt;a href="https://en.wikipedia.org/wiki/Open_data"&gt;Open Data&lt;/a&gt;:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;Open data is the idea that some data should be freely available to everyone to use and republish as they wish, without restrictions from copyright, patents or other mechanisms of control….&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;One of the most important forms of open data is open government data (OGD), which is a form of open data created by ruling government institutions. Open government data&amp;rsquo;s importance is borne from it being a part of citizens&amp;#39; everyday lives, down to the most routine/mundane tasks that are seemingly far removed from government.”&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A good starting point f for getting an overview of government data API’s is the programmablweb directory, which list over 20’00 different API’s.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The government API category can be found here:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://www.programmableweb.com/category/government/apis?category=20094"&gt;&lt;a href="https://www.programmableweb.com/category/government/apis?category=20094"&gt;https://www.programmableweb.com/category/government/apis?category=20094&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Two examples of Government API’s:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The data API of the US government: 
       &lt;a href="https://www.data.gov/developers/apis"&gt;&lt;a href="https://www.data.gov/developers/apis"&gt;https://www.data.gov/developers/apis&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/5690fad8adfa123f25dff86cab2356e2.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Or the Swiss Government API of the Swiss Parliament: 
       &lt;a href="http://ws-old.parlament.ch/"&gt;&lt;a href="http://ws-old.parlament.ch/"&gt;http://ws-old.parlament.ch/&lt;/a&gt;&lt;/a&gt;:
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1336d71cb6fa2a52132cf14cda1a5b1d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;  We will use the Swiss Parliament  API’s to extract personal data of the parliament members (mainly the  Party allocation) in order to increase the accuracy of our twitter matching algorithm.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Councillors Data&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        What we require is the
       &lt;span style="font-style: italic;"&gt;councillors &lt;/span&gt;data objects: 
       &lt;a href="http://ws-old.parlament.ch/councillors"&gt;&lt;a href="http://ws-old.parlament.ch/councillors"&gt;http://ws-old.parlament.ch/councillors&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/73fbc1ede34d4fdf85ab4fb12b432d44.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In order to get the data in a program readable form we have to attach the query parameter:
       &lt;span style="font-style: italic;"&gt;format=json&lt;/span&gt;. Which will return the content as a JSON document: 
       &lt;a href="http://ws-old.parlament.ch/councillors?format=json"&gt;&lt;a href="http://ws-old.parlament.ch/councillors?format=json"&gt;http://ws-old.parlament.ch/councillors?format=json&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As we have already explained in our
       &lt;a href="https://towardsdatascience.com/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter-d5f999555f98"&gt;second tutorial&lt;/a&gt;  a public API  may return a lot of information. In order to control the amount of data returned in one request, the concept of a cursor or paging mechanism is used.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The Swiss Parliament API returns about 25 records in one request. The latest request record will have an attribute attached which tells you if there are more data available (
       &lt;span style="font-style: italic;"&gt;hasMorePages=true).&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In case it sets to ‘
       &lt;span style="font-style: italic;"&gt;true’ &lt;/span&gt;you may fetch the next page by adding the query parameter&lt;br&gt;
       &lt;span style="font-style: italic;"&gt;pageNumber=2 &lt;/span&gt;etc.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/8ce76625df8f934a2b3a720a90449243.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You will find such kind of information about the API normally in its user documentation, e.g. the Swiss Parliament API has some parameters to control the output format, language etc.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/2543213fe4805b0088278b203a01ae16.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having now a basic understanding of the API, we can enhance program which is capable of reading data from country-specific government API’s. Let’s dig into the code.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Enhancing the Code - the UML Diagram&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;Introducing the government API in a general way needs some serious design and enhancement of our program. The UML class diagram of our enhanced program looks as follows (don’t be overwhelmed by the complexity, all the details will be explained later in this article).&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/3f3a89b6f749bf1fc945e6e4b3e92010.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A quick summary of what we have done until now:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          We created the
         &lt;span style="font-style: italic;"&gt;GovernmentSocialMediaAnalyzer &lt;/span&gt;class
         &lt;span style="font-style: italic;"&gt; &lt;/span&gt;in the second
         &lt;a href="https://towardsdatascience.com/python-tutorial-government-social-media-analyser-class-build-out-12858190b284"&gt;tutorial&lt;/a&gt;, which is capable of retrieving twitter relevant account data of politician of a country. We used a configuration driven based approach - based on YAML -  to abstract the country-specific data into a configuration file
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Several methods were defined which allowed us to create panda data frames, as well as plotly specific tables and charts.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Now we will introduce three new classes 
       &lt;span style="font-style: italic;"&gt;govAPIFactory, govAPI  &lt;/span&gt;(an abstract class) and
       &lt;span style="font-style: italic;"&gt;govAPI_CH, &lt;/span&gt;which will build a generalized approach for connecting any kind of government API’s.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Factory Method Pattern &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Software DesignPattern play an important role in Software design, as described by
       &lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern"&gt;Wikipedia&lt;/a&gt;:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In our design, we will use the Factory Method Pattern to generalise the connectivity to a government API, which is explained by
       &lt;a href="https://en.wikipedia.org/wiki/Factory_method_pattern"&gt;Wikipedia&lt;/a&gt; as follows: 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;In class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes,&lt;/span&gt;
       &lt;span style="font-style: italic; font-weight: bold;"&gt; or implemented in a base class and optionally overridden by derived classes&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;—rather than by calling a constructor.&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our design will be based on the strategy, to define 
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          a base class (parent -
         &lt;span style="font-style: italic;"&gt;GovAPI) &lt;/span&gt;which is abstract and
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          a derived class (child - GovAPI_CH), which will have the country specific implementation (i.e Switzerland).
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          in the future, we can introduce additional classes for example for the United Kingdom we would construct the implementation class:
         &lt;span style="font-style: italic;"&gt;GovAPI_UK&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Abstract Base Class “GovAPI&amp;quot; &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/f65f5d6a9d887a9ad58bf6a526249349.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;govAPI&lt;/span&gt; is an abstract class that contains several abstract methods. An abstract method is a a method that is declared, but contains no implementation.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In Python, an abstract class is derived (or inherited) from the class ABC and will have one to more methods marked with
   &lt;span style="font-style: italic;"&gt;@abstractmethod&lt;/span&gt;.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt; 
  &lt;span class="o"&gt;...&lt;/span&gt; 


  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GovAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_government_members&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;pass&lt;/span&gt; 
      &lt;span class="o"&gt;...&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    So the abstract class provides you with a build plan, for any implementation class which inherits from it. in our class the
   &lt;span style="font-style: italic;"&gt;govAPI_CH. &lt;/span&gt;What kind of methods does
   &lt;span style="font-style: italic;"&gt;govAPI_CH&lt;/span&gt; has to implement ?
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    First of all the implementation of the 
   &lt;span style="font-style: italic;"&gt; load_government_members() &lt;/span&gt;method has to take care of the politician&amp;rsquo;s data records fetching from the government API.
   &lt;span style="font-style: italic;"&gt; &lt;/span&gt; Each fetched record - which represents the data of a single politician - must be passed to  the method
   &lt;span style="font-style: italic;"&gt;&lt;em&gt;add_person_record &lt;/span&gt;(which is already implemented by the 
   &lt;span style="font-style: italic;"&gt;govAPI&lt;/span&gt; base class)
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The question now is, what the heck is the 
   &lt;span style="font-style: italic;"&gt;&lt;/em&gt;add_person_record&lt;/span&gt; method doing ? Well look at the code below. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add_person_record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
          &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_active&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'lastName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_last_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'firstName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_first_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'middleName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_middle_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'gender'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_gender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'party'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_party&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'council'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_council&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'electedDate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_elected_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'birthDate'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_birthdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'maritalStatus'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_marital_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'statePostalCode'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_state_postal_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'district'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_district&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
          &lt;span class="s"&gt;'townName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_town_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
    Github: 
   &lt;a href="https://gist.github.com/talfco/b6bf98b61b2809542ccb51a7d6bb8160"&gt;https://gist.github.com/talfco/b6bf98b61b2809542ccb51a7d6bb8160&lt;/a&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The method is just preparing a target dictionary for our person record. I.e. the attribute names defined (
   &lt;span style="font-style: italic;"&gt;lastName, firstName, council etc.&lt;/span&gt;) are the names we want to use for any GovAPI implementation.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    That means our retrieved record in the form of a dedicated government API implementation (i.e. in the form of the Swiss Government Parliament API) has to be transformed by using a bunch of getter methods.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Each of this getter methods is either abstract or returns an empty string. It’s the responsibility of the implementer of an inherited class (
   &lt;span style="font-style: italic;"&gt;GovAPI_CH&lt;/span&gt;)  to provide the correct getter implementation. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_active&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="k"&gt;pass&lt;/span&gt; 
  &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="k"&gt;pass&lt;/span&gt; 
  &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_last_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="k"&gt;pass&lt;/span&gt; 
  &lt;span class="nd"&gt;@abstractmethod&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_first_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="k"&gt;pass&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_middle_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="k"&gt;pass&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_party&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_council&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
    Github: 
   &lt;a href="https://gist.github.com/talfco/9bc3e30fce652a46eec55bc5a2dce25c"&gt;https://gist.github.com/talfco/9bc3e30fce652a46eec55bc5a2dce25c&lt;/a&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px; font-family: 'Helvetica Neue';"&gt;Implementation Class “GovAPI_CH&amp;quot;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The getter method implementations of
   &lt;span style="font-style: italic;"&gt;GovAPI_CH&lt;/span&gt; is shown below. It consists of a bunch of getter methods, which will return required attribute values out of the record.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt; &lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GovAPI_CH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GovAPI&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="err"&gt;…&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_active&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_last_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lastName'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_first_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'firstName'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_middle_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_party&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'party'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="o"&gt;...&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_birthdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_convert_utc_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'birthDate'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'salutationTitle'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_country&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'CH'&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_state_postal_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'cantonName'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postalAddress'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_town_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'postalAddress'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'city'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_elected_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_convert_utc_timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'councilMemberships'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'entryDate'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
    Github: 
   &lt;a href="https://gist.github.com/talfco/dd482ff73c8e35baacf15ffb63852638"&gt;https://gist.github.com/talfco/dd482ff73c8e35baacf15ffb63852638&lt;/a&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Let&amp;rsquo;s drill down into the method
   &lt;span style="font-style: italic;"&gt;load_gevernment_members:&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Our implementation uses the python module
   &lt;a style="font-style: italic;" href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt; which is &amp;ldquo;an elegant and simple HTTP library for human-beings”. In the introduction section of this article, we provided an overview of the Swiss parliaments API. The code below will fetch the data, using the paging mechanism.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The URL and its parameter we placed in our configuration YAML file.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  govAPIUrl: "http://ws-old.parlament.ch/" 
  govAPICouncillorsRes: "councillors" 
  govAPIParams: 
     - format : "json" 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;ul&gt;
   &lt;li&gt;
    &lt;div&gt;
      The first
     &lt;span style="font-style: italic;"&gt; requests.get &lt;/span&gt;will fetch all the councillors overview pages&lt;br&gt;
     &lt;a href="http://ws-old.parlament.ch/councillors?format=json&amp;amp;pageNumber=1"&gt;&lt;a href="http://ws-old.parlament.ch/councillors?format=json&amp;amp;amp;pageNumber=1"&gt;http://ws-old.parlament.ch/councillors?format=json&amp;amp;amp;pageNumber=1&lt;/a&gt;&lt;/a&gt;. In case a data record is marked as
     &lt;span style="font-style: italic;"&gt;active&lt;/span&gt; the details record will be fetched
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
      The second request will use the
     &lt;span style="font-style: italic;"&gt;id &lt;/span&gt;attributed of the record and construct the URL for the details record. I.e in this example we fetch the politician record with the id ‘1358’:&lt;br&gt;
     &lt;a href="http://ws-old.parlament.ch/councillors/1358?format=json&amp;amp;pageNumber=1"&gt;&lt;a href="http://ws-old.parlament.ch/councillors/1358?format=json"&gt;http://ws-old.parlament.ch/councillors/1358?format=json&lt;/a&gt;&lt;/a&gt;
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
      The retrieved detail record we pass to the method
     &lt;span style="font-style: italic;"&gt;addPerson&lt;/span&gt; which will transform the provided data record to the target one (by using the getters we have implemented).
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
      Finally, we check for the 
     &lt;span style="font-style: italic;"&gt;hasMorePages &lt;/span&gt;attribute and in case we reached the last record we will break the loop.
    &lt;/div&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_government_members&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="n"&gt;page_number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; 
      &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'govAPIUrl'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="n"&gt;politician_res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'govAPICouncillorsRes'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="n"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'govAPIParams'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
          &lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'pageNumber'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
          &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_headers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
          &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;'User-Agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Mozilla/5.0'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; 
          &lt;span class="n"&gt;politicians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;politician_res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
          &lt;span class="n"&gt;has_more_pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; 
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;politician&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;politicians&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;politician&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hasMorePages'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
                  &lt;span class="n"&gt;has_more_pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; 
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;politician&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'active'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; 
                  &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;politician&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
                  &lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;politician_res&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
                  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_add_person_record&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;has_more_pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
              &lt;span class="k"&gt;break&lt;/span&gt; 
          &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
              &lt;span class="n"&gt;page_number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    The above method will be called within the
   &lt;span style="font-style: italic;"&gt;govAPI&lt;/span&gt; function
   &lt;span style="font-style: italic;"&gt;create_politican_from_govapi_table&lt;/span&gt; (already implmented by the
   &lt;span style="font-style: italic;"&gt;govAPI&lt;/span&gt; parent class) which will transform the list of politician records into a Panda dataframe. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_politican_from_govapi_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_government_members&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
      &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_records&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    It’s important to realize here, that the
   &lt;span style="text-decoration: underline;"&gt;structure of this Panda dataframe will be the same of any kind of Government API,&lt;/span&gt; as long as we implement a specific class based on the
   &lt;span style="font-style: italic;"&gt;govAPI&lt;/span&gt; abstract class. So we normalized our data so that we can work and process it afterward in a standardized way.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Again we strived an important design pattern, our target structure (or model), is known under the name
   &lt;a href="https://en.wikipedia.org/wiki/Canonical_model"&gt;Canonical Model&lt;/a&gt;. As Wikipedia describes:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;&amp;quot;A canonical model is a design pattern used to communicate between different data formats. Essentially: create a data model which is a superset of all the others (&amp;quot;canonical&amp;rdquo;), and create a &amp;ldquo;translator&amp;rdquo; module or layer to/from which all existing modules exchange data with other modules.”&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Conceptually we have built a mini-data pipeline. For each government API we have to implement a data record fetching function and transformation rules (the getters) which will transform the data to our standardised one.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;em&gt; 
   &lt;img class='article  img-thumbnail' src='/images/97461d53364ff4c0f54f351fa61f30c9.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/em&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The whole pattern visualized in a UML sequence diagram.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          “consume” operation is represented by step 60
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          &amp;ldquo;transform rules” operation are represented by the step 80-110.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          “storeAs” operation is represented by step 120
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9f9a4b9bb3b3bcac6882ca987cecb85f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    It’s important that you understand the responsibility of the various classes.
   &lt;span style="font-style: italic;"&gt;govAPI &lt;/span&gt;and
   &lt;span style="font-style: italic;"&gt; govAPI_CH&lt;/span&gt; (red dots) are visible to the outside world (
   &lt;span style="font-style: italic;"&gt;govAPIFactory&lt;/span&gt;,
   &lt;span style="font-style: italic;"&gt;gsma&lt;/span&gt;) as one class instance. For the caller is irrelevant who is implementing which method. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    One final thing is missing, the
   &lt;span style="font-style: italic;"&gt;govAPIFactory&lt;/span&gt; class, which is quite straightforward. Depending on the
   &lt;span style="font-style: italic;"&gt;country_code&lt;/span&gt; a corresponding implementation class instance will be created and returned to the caller:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;govAPI_CH&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GovAPI_CH&lt;/span&gt; 
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GovAPIFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="nd"&gt;@classmethod&lt;/span&gt; 
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_country_gov_api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;country_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;country_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"CH"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GovAPI_CH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Uff, that was quite some content to be absorbed, we introduced two important design pattern the factory method and canonical data model, as well have shown how to generate a first pair of charts.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The 
   &lt;span style="font-style: italic;"&gt;lesson3.py &lt;/span&gt;program will generate the table within Plotly under the name
   &lt;span style="font-style: italic;"&gt;CH-govapi-member-list&lt;/span&gt;.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 24px;"&gt; 
   &lt;img class='article  img-thumbnail' src='/images/c3a84655e0d0740adf1f26315a129599.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Exercise&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;You can find the exercise here: &lt;a style="font-size: 14px;" href="https://dev.cloudburo.net/2019/02/11/python-tutorial-exercise-3-implement-the-govapi_uk-class.html"&gt;Link&lt;/a&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Source Code&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The source code can be found here (lesson 3 directory):
       &lt;span style="font-size: 18px;"&gt; &lt;/span&gt;
       &lt;a style="font-size: 18px;" href="https://github.com/talfco/clb-sentiment"&gt;&lt;a href="https://github.com/talfco/clb-sentiment"&gt;https://github.com/talfco/clb-sentiment&lt;/a&gt;&lt;/a&gt; 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a style="font-size: 11px; font-style: italic;" href="https://publishingbot.cloudburo.net/"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Python Tutorial: Government Social Media Analyser Class Build Out</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/02/03/python-tutorial-government-social-media-analyser-class-build-out.html"/>
    <id>https://dev.cloudburo.net/2019/02/03/python-tutorial-government-social-media-analyser-class-build-out.html</id>
    <published>2019-02-03T15:03:07+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        In this exercise, we will convert our initial program (
       &lt;a href="https://dev.cloudburo.net/2019/01/27/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter.html"&gt;refer to the first tutorial)&lt;/a&gt; to a general purpose program for fetching twitter information of parliaments member of a country. This means we do the first iteration of generalization and refactoring of our code. 
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Generalization Step 1&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our ambition is to have a program which can analyze Twitter accounts of politicians of any country not only Switzerland. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For example, there is a Twitter Government account  (
       &lt;a href="https://twitter.com/TwitterGov?lang=de"&gt;&lt;a href="https://twitter.com/TwitterGov"&gt;https://twitter.com/TwitterGov&lt;/a&gt;&lt;/a&gt;) which have various Twitter lists of the government of multiple countries.&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9e098d5955d31e02f9bf7eefdaaa2ef0.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So our program should be generalized in a way that we can use it (i.e., configuring) for other countries as well.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;The Yaml Configuration File&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our first 
       &lt;a href="https://github.com/talfco/clb-sentiment/blob/master/src/lesson1/lesson1.py"&gt;lesson1.py&lt;/a&gt; Python program was hard coding the twitter account- and its list name directly in the program itself.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/cea2c17a0e7ee33fbbe288375e8d558c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Now what we want to do is to read this information out from a configuration file, similar to what we have done for passing in the Twitter API secrets in the first lesson (
       &lt;a href="https://dev.cloudburo.net/2019/01/27/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter.html"&gt;refer to the tutorial&lt;/a&gt;)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This information isn’t any secret one, so we create a new public yaml configuration file, which will be used for any
       &lt;span style="text-decoration: underline;"&gt;country-configuration&lt;/span&gt; parameters of our program. Having all these parameters offloaded to a configuration file is a crucial point when you generalize programs. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As you can see in the screenshot below, we name the file
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; config-CH.yaml. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/5372f3b0586a1857ea27e1c1ebe6f239.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So why to use the
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;CH&lt;/span&gt; post-fix? Well the
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;CH&lt;/span&gt; postfix is the Alpha-2 code of the international
       &lt;a href="https://en.wikipedia.org/wiki/ISO_3166-1"&gt; ISO-Country Code&lt;/a&gt; standard for Switzerland. Code values (or reference values) are the ingredient of any program to encode information. Best practice is to use standardized one if possible (don’t reinvent the wheel here). I.e., for countries we decided to use Alpha-2 code of the standard  ISO 3166-1. As you will see later for encoding languages, we take a similar approach. ISO, by the way, means “
       &lt;a href="https://en.wikipedia.org/wiki/International_Organization_for_Standardization"&gt;International Organization for Standardization&lt;/a&gt;.”
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1726e1072e39b595649e35019647e5c9.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Refactoring and Enhancing&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;The GovernmentSocialMediaAnalyzer Class&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For our generalized program, we do a first
       &lt;a href="https://en.wikipedia.org/wiki/Code_refactoring"&gt;refactoring&lt;/a&gt; step. Code refactoring is the process of restructuring existing computer code without changing its external behavior. So we rephrase our class in 
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;sample1.py&lt;/span&gt; to 
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;GovernmentSocialMediaAnalyzer &lt;/span&gt;and enhance its class constructor
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;init&lt;/span&gt; method by a parameter
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;country_code&lt;/span&gt;. We took a design decision, that. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&lt;span style="font-style: italic; text-decoration: underline;"&gt;Design Decision 1&lt;/span&gt;: An instance of our class GovernmentSocialMediaAnalyzer will encapsulate the data and behavior of a dedicated country.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The code enhancements are shown below:
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          The passed in
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;country_code&lt;/span&gt; parameter (e.g.,
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;CH&lt;/span&gt;) during class creation
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          will be stored as a private instance variable
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;country_code&lt;/span&gt; 
         &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt; and used&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;to create the yaml configuration &lt;/span&gt;
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;file_name&lt;/span&gt;, 
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          from where we will load the configuration data and store the data in the private variable
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;cfg&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/ff137148f0b721db33a4ec2b2dcb1d3f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So now we are ready to generalize our
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;get_government_members&lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt; method by reading the twitter account-  and list-name out of the configuration data, which is stored in&lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; self.cfg &lt;/span&gt;instance variable.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e5c9bbded85336ef03eef198d16e57c9.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our program is now ready for any country. I.e. we could use it for any government list of the 
       &lt;a href="https://twitter.com/TwitterGov?lang=de"&gt;&lt;a href="https://twitter.com/TwitterGov"&gt;https://twitter.com/TwitterGov&lt;/a&gt;&lt;/a&gt;. store the relevant information in a corresponding configuration file, i.e.
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;config-US.yaml &lt;/span&gt;(for a US government list) and retrieve the account information.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Enhance the init method&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        But le’ts finalize first the refactoring and enhancement of our
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;init&lt;/span&gt; class. We take another design decision
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&lt;span style="font-style: italic; text-decoration: underline;"&gt;Design Decision 2&lt;/span&gt;: The init method should encapsulate the loading of all Twitter accounts of the list from Twitter, as well as the conversion to the relevant attributes in attributes column (= array of Strings). The column should be made available as private class instance variables&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That means when we create a
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;GovernmentAnalyzer&lt;/span&gt; instance for a dedicated country, the initialization phase of the case will include the all the necessary steps to get the data from Twitter into our intern data structures (as represented as columns)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We will do this step in a dedicate helper method, which will be called
       &lt;span style="font-family: &amp;quot;courier new&amp;quot;, courier, monospace;"&gt;extract_columns&lt;/span&gt;..
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The refactored class out of lesson 1 now looks like this. We made the column attributes more descriptive and defined them as class instance variables so that the columns can be used by any method within our class.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c61d38d630b206ea5cc99011bab2d7d7.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So we have finalized and refactored the class instance creation class
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          30-38: code block to load the country-specific configuration file
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          51-64: code block to read the twitter security token and keys from the secret configuration file and then connect to the Twitter API
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          66: call to the
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;_extract_columns &lt;/span&gt;method to retrieve the data and convert it into columns
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e43ff305b04af2d0bb4b7d538ca59f62.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Generalization Step 2&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; check_for_party algorithm&lt;/span&gt; of tutorial one was hard coding the party abbreviations in the code itself.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/a43176be0f63f175365fa4c4136a552c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Well, let’s refactor the code and move the party information to our configuration file. Thanks to the flexibility of the YAML file, this can be done quite easily.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic; text-decoration: underline;"&gt;Design Decision 3&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;: We want to use several party abbreviations (potentially in multiple languages) and keywords (e.g. the parties Twitter screen-name) per party to try to identify the party ownership of a politician.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So our configuration
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; config-CH.yaml&lt;/span&gt; will require configuration information per party. A list of parties and their abbreviations can be found on
       &lt;a href="https://www.parlament.ch/de/organe/fraktionen/im-parlament-vertretene-parteien"&gt;parlament.ch &lt;/a&gt; in four languages for Switzerland. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In YAML you can easily build up a list of configuration items (e.g. a party configuration item). List members are denoted by a leading hyphen (-) with one member per one to multiple lines, or enclosed in square brackets ([ ]) and separated by comma space(, ).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In our YAML file
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          a party list member is denoted by the hyphen notation. A party-list member has a
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;twitter&lt;/span&gt; and
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;abbrs&lt;/span&gt; attribute. The
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;abbrs&lt;/span&gt; (abbreviations) attribute itself is a list of string denoted by the square bracket notation.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/df78821b6fd007be77881454be2a6c0a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        If we check the loaded configuration file (stored in the
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; self.cfg &lt;/span&gt;variable)  in the Python debugger, it should be clear how the data structure is looking like using Python lists and dictionaries.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d751fc1228e0c91c6d2c2cb791af8703.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A side-remark to the
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;abbrs&lt;/span&gt; attribute, we introduced their a list of party abbreviations, i.e. having multiple national languages means also that a party has multiple abbreviations (e.g. for German and French).  In our case above “FDP” and “PLR”. And we want to check for all of them. In other countries, there may be potentially just one abbreviation, but with decision, we are future proof.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our improved
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;check_for_party&lt;/span&gt; method nows look like follows. It will iterate over all twitter accounts and each parties configuration record and checks if the twitter account has a match in its description or screen_name to a party.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1dbed834816e94088d73b5be24f4ed1f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-size: 14px;"&gt;On line 98,102 and 110 we are getting the data out of our configuration structure. &lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Dependent on the attribute type, we have to iterate over the list of values (98, 102) or fetch the data directly (112)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          If we have a match, the first abbreviation will be returned, as our code value to identify parties:
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; res = party[‘abbrs’][0]&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Fine Tuning the Algorithm&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Introducing a Second Plotly Table:  Grouping Accounts by Party&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;In order to fine tune our algorithm, we have to check its effectiveness on finding a party to twitter account. For that we have to introduce a second table, which will group our twitter accounts according their party allocation.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;Obviously the powerful panda package will provide us the necessary tooling. You can refer to the &lt;/span&gt;
       &lt;a style="font-size: 14px;" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html"&gt;following panda API description&lt;/a&gt;
       &lt;span style="font-size: 14px;"&gt; with all the details how to group data.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9f84e9a3c76cd2e64df1af12140f5784.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Some comments to the code fragment:
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          151-155: We are creating here a panda_data record consisting of 4 columns. The&lt;br&gt;
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;col_party&lt;/span&gt;,
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;col_followers_count&lt;/span&gt;,
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;col_friends_count. &lt;/span&gt;
         &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;The &lt;/span&gt;
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;col_party&lt;/span&gt;
         &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt; is used twice, the first column is used for labelling each row (as you see on line 158 we do the grouping by party) and in the second column we do sum up of the rows which have the same party,&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          157: We create a first panda data frame of this table with the four columns
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          158: Here we transform the created data frame by using the
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;groupby&lt;/span&gt; function. We also define the aggregation
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;agg&lt;/span&gt; operations for the 2nd, 3rd and 4th row. 
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          162-166: The basic stuff to create a nice plotly table.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Let’s run the program and check the accuracy of our party assignment allocation algorithm. As a result of the program  execution you will now have to tables in your plotly account (also some grid tables will be created, which are not relevant at the moment).&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/3ae58b05798604e630ec703efc6e955d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;Enhance our Config File with Keyword Attribute&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our first run shows, that the majority of the politician (65) don’t mention their party abbreviations or party twitter screen_name in their account description/screen_name. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/3e2264ab761a0b708446c3e322745f2d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let’s try to fine tune our algorithm. Let’s go through the list once again and check for other keywords which could help us to identify their party relationship. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/3241a02fc08e1f14c8da1187123a3042.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b7e215026898254eb45ded342a981edb.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We found the following key words:
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          socialist (SP)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          glp (GLP), 
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Grüne  (GLP)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          @lega  (Lega)
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let’s add this one to our configuration file with a new attribute: 
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;keywords&lt;/span&gt;. That’s the beauty of YAML you easily can extend with additional attributes. In our case another list attribute. As for example:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/4e0a3d21aa4c54169def8644b15adc90.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        And we add the additional check in our check_for_party method 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/761f1ea2dd9538956c1ba483dee7a38c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Et voila, we could identify 13 additional twitter accounts with over 20’000 followers. Still, 52 accounts can’t be mapped to a party, but for that, we have to connect another data source, which will be done in a later tutorial. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/8293bffc014cd4137794187e51ae8042.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As a final step for today, we refactor the
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;create_politican_table&lt;/span&gt; method. Mainly we standardize the file name used in plotly by using the country code in the file name. That allows us to generate tables for different countries and ensuring that they are not overwriting each other in our plotly account.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e49d76fc5ae25fcf2c133a907749bb9a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Wrap Up&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
        There we are, we have now generalized and refactored our overall application and have good foundation backed by a configuration file for a further build out. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We can now instantiate a
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;GovernmnetSocialMediaAnalyzer&lt;/span&gt; for a dedicated country (supposing that we have provided the necessary configuration file)  and extract twitter relevant data into a plotly table for further processing.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/582a44eaa64cd90fa8d7a2e1f29cfc53.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As a UML Sequence Diagram visualized, the interaction flow of our class can be represented as follows:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/91796177dcf970c204df0b690313323b.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        If you want to understand more details about UML sequence diagrams, refer to the following
       &lt;a href="https://www.geeksforgeeks.org/unified-modeling-language-uml-sequence-diagrams/"&gt;tutorial&lt;/a&gt;. It’s an excellent technique to visualize various aspects of a program.  In the above diagram, the return calls of a message are depicted in blue.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As an example: The message line to the panda package to create a data frame is depicted in red (
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;createDataFrame&lt;/span&gt;), its return message line of a 
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;dataFrame&lt;/span&gt; object in blue.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Exercise&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;Use one of the lists offered via the Government Twitter account (&lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt; &lt;/span&gt;
       &lt;a href="https://twitter.com/TwitterGov/lists/us-cabinet?lang=de"&gt;&lt;a href="https://twitter.com/TwitterGov"&gt;https://twitter.com/TwitterGov&lt;/a&gt;&lt;/a&gt;
       &lt;span style="font-size: 14px;"&gt;), for example the list of UK member of parliaments (&lt;/span&gt;
       &lt;a href="https://twitter.com/TwitterGov/lists/uk-mps?lang=de"&gt;&lt;a href="https://twitter.com/TwitterGov/lists/uk-mps"&gt;https://twitter.com/TwitterGov/lists/uk-mps&lt;/a&gt;&lt;/a&gt;). 
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Work out at corresponding yaml configuration file
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Check out what kind of information could be used to identify the party of the politician.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Enhance the keywords with your findings
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Enhance the main program with a user input question, something like “Which government do you want to analyze”. Provide a list of available configurations and then run the program with the user selection.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Think about the changes necessary in order to analyze multiple politicians lists per country. I.e. we want to differentiate multiple government bodies per country and have that generalized in the configuration files.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Source Code&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The source code can be found here:
       &lt;span style="font-size: 18px;"&gt; &lt;/span&gt;
       &lt;a style="font-size: 18px;" href="https://github.com/talfco/clb-sentiment"&gt;&lt;a href="https://github.com/talfco/clb-sentiment"&gt;https://github.com/talfco/clb-sentiment&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a style="font-size: 11px; font-style: italic;" href="https://publishingbot.cloudburo.net/"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Python Tutorial Exercise 1: Introduce check_for_party</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/01/27/python-tutorial-exercise-1-introduce-check_for_party.html"/>
    <id>https://dev.cloudburo.net/2019/01/27/python-tutorial-exercise-1-introduce-check_for_party.html</id>
    <published>2019-01-27T11:17:41+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
    This is the exercise for the first tutorial: 
   &lt;a href="https://dev.cloudburo.net/2019/01/27/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter.html"&gt;&lt;a href="https://dev.cloudburo.net/2019/01/27/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter.html"&gt;https://dev.cloudburo.net/2019/01/27/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter.html&lt;/a&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In order to identify the associated party of a Swiss politician, we introduce the method
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;check_for_party&lt;/span&gt;, which checks the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;screen_name&lt;/span&gt; as well as the account
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;description&lt;/span&gt; field for the mentioning of one of the party’s abbreviation. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    A minimal implementation may look like this:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="c"&gt;# Method will return the party of the list member by analyzing &lt;/span&gt;
  &lt;span class="c"&gt;# twitter account attributes. If party cannot be detected the &lt;/span&gt;
  &lt;span class="c"&gt;# account column  have an entry "unknown" &lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_for_party&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;account_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
      &lt;span class="n"&gt;party_column&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
      &lt;span class="n"&gt;party_abbreviations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"FDP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"CVP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"SP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"SVP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"EVP"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"BDP"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;account_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
          &lt;span class="n"&gt;party&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"unknown"&lt;/span&gt; 
          &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;abbr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;party_abbreviations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;abbr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;abbr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
                  &lt;span class="n"&gt;party&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;abbr&lt;/span&gt; 
          &lt;span class="n"&gt;party_column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;party&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;party_column&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    We extend the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; create_plotly_table&lt;/span&gt; with the following statemens
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/74b960f2dc1ba29e6af8ced20c65bd40.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The new Plotly Table will look like this. 
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7197a1abeec53696a9b614914fba86d3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
        Clearly the algorithm is very inaccurate at the moment, but it shows you the direction. E.g. you could enhance by including the french abbreviations, or twitter handles of the party’s which are refrenced in the description (grunliberale) etc,
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find the extended program (with the exercise code)  here: 
       &lt;a href="https://github.com/talfco/clb-sentiment/blob/master/src/lesson1/lesson1-ex1.py"&gt;&lt;a href="https://github.com/talfco/clb-sentiment/blob/master/src/lesson1/lesson1-ex1.py"&gt;https://github.com/talfco/clb-sentiment/blob/master/src/lesson1/lesson1-ex1.py&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Python Tutorial: Retrieve a list of Swiss Government Members From Twitter</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/01/27/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter.html"/>
    <id>https://dev.cloudburo.net/2019/01/27/python-tutorial-retrieve-a-list-of-swiss-government-members-from-twitter.html</id>
    <published>2019-01-27T01:11:41+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      &lt;div&gt;
        The tutorial will show you how to extract a list of tweeting Swiss Government Members via the Twitter API. The extracted data will be put into a Panda Dataframe and then visualized via the powerful Plotly package. 
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/51f95668e3af88d125b4a83cd7d0781c.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="text-align: center;"&gt;
       &lt;span style="font-size: 12px;"&gt;Source Attribution: &lt;/span&gt;
       &lt;a style="font-size: 12px;" href="http://www.parlament.ch/"&gt;&lt;a href="http://www.parlament.ch/"&gt;http://www.parlament.ch/&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The result will look as follows:
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/730b95c858afee7d04beb7c0d9eb186a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;Interested in the Swiss Government system? Head over to &lt;/span&gt;
       &lt;a style="font-size: 14px;" href="https://www.thelocal.ch/20170403/ten-things-you-need-to-know-about-the-swiss-political-system"&gt;Ten Things you need to know about the Swiss Political system&lt;/a&gt;
       &lt;span style="font-size: 14px;"&gt;. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Where to get the data from?&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;The twitter account &lt;/span&gt;
       &lt;a href="https://twitter.com/SoMePolis"&gt;SoMePolis&lt;/a&gt; maintains a list of Swiss government members, who have a Twitter account.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The list can be found here:&lt;br&gt;
       &lt;a href="https://twitter.com/SoMePolis/lists/bundesparlamentarierinnen"&gt;&lt;a href="https://twitter.com/SoMePolis/lists/bundesparlamentarierinnen"&gt;https://twitter.com/SoMePolis/lists/bundesparlamentarierinnen&lt;/a&gt; &lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7b6bf9cd54824d52c91cbed1c48cc3c1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The goal of the program is to fetch all list members (government members who are tweeting) and extract some key figures (followers and friends)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Create a Twitter Developer Account and App&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;To fetch data via the public Twitter API, you have to register your application via the site &lt;/span&gt;
       &lt;a style="font-size: 14px;" href="https://developer.twitter.com/"&gt;&lt;a href="https://developer.twitter.com"&gt;https://developer.twitter.com&lt;/a&gt;&lt;/a&gt;
       &lt;span style="font-size: 14px;"&gt;. You have to describe the purpose of your application. The approval process may take one or two days. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9e65e059ea800c2ae59275490ec49473.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        After the confirmation, you then create your first App in your developer account.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/495e6095e1bfaf110cb5bab9b820b7df.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having done that, Twitter will generate  API keys and tokens which you will use in your program to communicate with the Twitter API.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/61892cc0c837e0f565efb1c790b2528e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Write the Program&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;It’s time to write the program.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;We will create a class &lt;/span&gt;
       &lt;span style="font-size: 14px; font-family: &amp;quot;Courier New&amp;quot;;"&gt;TwitterClient&lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt; which offers two methods &lt;/span&gt;
       &lt;span style="font-size: 14px; font-family: &amp;quot;Courier New&amp;quot;;"&gt;get_government_members&lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt; and &lt;/span&gt;
       &lt;span style="font-size: 14px; font-family: &amp;quot;Courier New&amp;quot;;"&gt;create_plotly_table&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/4aaf0fc7e4f43e7e9e02ad68b466876b.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The program will use the following python packages
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;a href="http://docs.tweepy.org/en/3.7.0/index.html"&gt;tweepy&lt;/a&gt;: will provide access to the Twitter public API
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;a href="https://pyyaml.org/wiki/PyYAMLDocumentation"&gt;yaml&lt;/a&gt;: is a parser which can read yaml configuration files (used to store our secret keys)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;: is a library providing high-performance, easy-to-use data structures, and data analysis tools
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;a href="https://plot.ly/python/"&gt;plotly&lt;/a&gt;: is a graphing library which makes interactive, publication-quality graphs online. 
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That’s is by using these 4 libraries we are ready to go.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;The Program&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;strong&gt;init&lt;/strong&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;Within the Class initialization method, we have to establish a connection with the Twitter API.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/49f934f474f747cb7ae40ce8c4de86c3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    For that, we use our keys and tokens which are loaded from a yaml file, which is located outside of the current directory in the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;secret&lt;/span&gt; directory.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"../../secret/twitter.yaml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    This is a common approach, to locate sensitive data in a directory which only lives on the local computer and never will be checked in a remote source system as Github.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;a href="https://en.wikipedia.org/wiki/YAML"&gt;Yaml&lt;/a&gt; is a human-readable data serialization language. It is commonly used for configuration files but could be used in many applications where data is being stored.
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/71e07c466e88a02f595bb0eb931dd2dd.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    It has a straightforward syntax, for our case four
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;&amp;lt;key&amp;gt;:&amp;lt;value&amp;gt;&lt;/span&gt; pairs for the security tokens, which are loaded:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="n"&gt;consumer_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'apiKey'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="n"&gt;consumer_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'apiSecretKey'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'accessToken'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
  &lt;span class="n"&gt;access_token_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'accessSecretToken'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    As a side information, when you enhance your program and require additional non-sensitive configuration data, you would introduce a second yaml file with public information, which you can check-in with the normal source code.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In the next step, we use
   &lt;a href="https://en.wikipedia.org/wiki/OAuth"&gt;OAuth&lt;/a&gt; to authenticate with Twitter and gain access to their API.  OAuth is an open standard for access delegation, commonly used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords. I.e. you will provide them with your secret access token and keys.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 12px; --inversion-type-color:  simple; color: rgb(48, 27, 45); font-family: Menlo;"&gt; 
   &lt;img class='article  img-thumbnail' src='/images/126d143d904d25d079dc7a0042df94b4.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 12px; --inversion-type-color: simple;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px; --inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;We create a private class variable &lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;span style="--inversion-type-color:  simple; font-size: 14px; color: rgb(0, 0, 0); font-family: &amp;quot;Courier New&amp;quot;;"&gt;_&lt;em&gt;api&lt;/span&gt;&lt;/span&gt;
       &lt;span style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt; which holds the reference to the Twitter API. Via this reference object you can now interact with the Twitter API, all methods available are described &lt;/span&gt;
       &lt;a style="font-size: 14px; --inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;" href="http://docs.tweepy.org/en/3.7.0/api.html#tweepy-api-twitter-api-wrapper"&gt;here&lt;/a&gt;
       &lt;span style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;. We use a private variable for the API  because we don&lt;/span&gt;
       &lt;span style="caret-color: rgb(228, 207, 225); --inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;’&lt;/span&gt;
       &lt;span style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;t want to offer the API directly to consumers of our classes but rather provide higher level methods as &lt;/span&gt;
       &lt;span style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Courier New&amp;quot;;"&gt;get&lt;/em&gt;government_members&lt;/span&gt;
       &lt;span style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Defining the scope of your class variables - public, protected, private - is an important design decision, when you are designing classes which will be used within a program or module. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;You communicate via the __api reference with the Twitter server. All available methods can be found here: &lt;/span&gt;
       &lt;a href="http://docs.tweepy.org/en/v3.5.0/api.html" style="--inversion-type-color:  simple;"&gt;&lt;a href="http://docs.tweepy.org/en/v3.5.0/api.html"&gt;http://docs.tweepy.org/en/v3.5.0/api.html&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/2c3f08f2ae86c89157d0a4fbbbba8140.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;get_government_members&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;In this method, we will fetch all twitter politician accounts out of the above described list &lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;BundesparlamentarierInnen&lt;/span&gt; of the twitter account 
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;SoMePolis.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/8d531d07d7d9f862e103be2e53ace7f1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In a first step, we get all Twitters lists of the SomePolis account and search for the required one. Having found it we will use its
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;list.id&lt;/span&gt; in order to retrieve all members (twitter accounts) of the list.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 12px; --inversion-type-color:  simple; color: rgb(51, 65, 43); font-family: Menlo;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/0122b63432ad51386982c9639ae62206.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In order to retrieve all members of a list we have to use a so-called
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;Cursor&lt;/span&gt;.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_members&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;list_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
      &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    It’s an important concept in API interfaces in order to manage data retrieval of arbitrary large lists (i.e. a list may have millions of entries)
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    If you use in the program the following code sequence, you would just return the first 25 members of the list.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="n"&gt;__api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_members&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    With this strategy, the Twitter API will ensure that it will not have to deliver huge data amount in a single request to a client program. In case you want all members you have to call multiple times the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;list_members. &lt;/span&gt;
   &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;In each request a packet of 25 list member accounts will be returned. This concept is called “pagination” and is used throughout public API’s of various providers (you can find more information here: &lt;/span&gt;
   &lt;a style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &amp;quot;Helvetica Neue&amp;quot;;" href="http://docs.tweepy.org/en/v3.5.0/cursor_tutorial.html"&gt;Tweeply Cursor Tutorial&lt;/a&gt;
   &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;)&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;The list has about 110 members, that means the&lt;/span&gt;
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; list_members &lt;/span&gt;
   &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;method will be called five times. At the end, the &lt;/span&gt;
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;result&lt;/span&gt;
   &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt; variable will have the 110 Twitter Accounts accounts.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px; font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;create_plotly_table&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 14px; font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Fi,nally we extract out of the list of twitter accounts certain data for further processing.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7ee6857e4ade87332c0f9872362e39a5.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;We will prepare a &lt;/span&gt;
       &lt;a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html" style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Panda Dataframe&lt;/a&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;, which is a t&lt;/span&gt;wo-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Of our list of Twitter accounts we will extract
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          the
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;screen_name, &lt;/span&gt;
         &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;which is the @&amp;lt;twitterName&amp;gt;&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          the
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;name, &lt;/span&gt;
         &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;which is the normally the full name of the person&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          the
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;description&lt;/span&gt;, which provides an additional description about the person
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          the
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;followers_count&lt;/span&gt;, as well as the
         &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;friends_count&lt;/span&gt; of the Twiitter account.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;We have to create columns for the data frame which is achieved via the following command sequence&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;col1 = [list.screen_name for list in lists]&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;We iterate through our &lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;lists&lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt; and extract for each record the &lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;screen_name&lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Finally, we create a plotly &lt;/span&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;Table:&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        There are the two main modules that we will need in order to generate our Plotly graphs.
      &lt;/div&gt;
      &lt;div&gt;
        *
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;plotly.plotly &lt;/span&gt;contains the functions that will help us communicate with the Plotly servers
      &lt;/div&gt;
      &lt;div&gt;
        *
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;plotly.graph_objs&lt;/span&gt; contains the functions that will generate graph objects for us.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You will have to create an account  at 
       &lt;a href="https://plot.ly/"&gt;&lt;a href="https://plot.ly"&gt;https://plot.ly&lt;/a&gt;&lt;/a&gt; (when you first run the application, to which your generated table will be uploaded. As a result, you will get a table similar like this one in your account.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;img src="https://www.evernote.com/shard/s74/res/0707e5ff-9888-4ea2-9fe0-0d51d332d13c/Capto_Capture%202019-01-26_04-44-17_AM.png" width="710"&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 18px;"&gt;Account Creation at Plotly&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 18px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 14px;"&gt;The first time you run the program, you will be asked to sign up and create an account at plotly.&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 14px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 12px; color: rgb(0, 0, 0); font-family: Helvetica; --inversion-type-color: simple;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/ccae60b5b1cde3343e95e176b30eb6f4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: normal; font-weight: normal; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); -webkit-text-stroke-color: rgb(0, 0, 0);"&gt; &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: normal; font-weight: normal; font-size: 12px; font-family: Times; color: rgb(0, 0, 0); -webkit-text-stroke-color: rgb(0, 0, 0);"&gt; &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 18px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 14px;"&gt;Having created an account you will have to retrieve the access token (by creating a new one if necessary)&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/5443e5d3211e19599f40d6d52280335a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 18px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 14px;"&gt;And store it in the file &lt;/font&gt;
       &lt;font style="font-size: 14px;" face="Courier New"&gt;.credentials &lt;/font&gt;
       &lt;font face="Helvetica Neue" style="font-size: 14px;"&gt;in the home directory in the folder &lt;/font&gt;
       &lt;font style="font-size: 14px;" face="Courier New"&gt;.plotly&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 14px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/99a49df2864cd4755f9f655f0f97c732.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That’s it for today as an exercise try to add the following code sequence.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Exercise&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Try to identify the party of each government person, by anaylzing its
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;screen_name&lt;/span&gt; or
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;description&lt;/span&gt;. As a guiding help, check out the
       &lt;a href="https://www.parlament.ch/en/organe/groups/parties-in-parliament"&gt;following guide of parties in Switzerland&lt;/a&gt;. Main parties are “CVP”, “FDP”, “SP”, “SVP” as well as “Grüne”. There is a high chance that the abbreviation are mentioned by a person (see screenshot below).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So build up a new Panda Column and add it to the Data Frame for visualizing.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1103fa74449d215e347812d06eafbebc.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt;Source Code&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The source code can be found here:
       &lt;span style="font-size: 18px;"&gt; &lt;a style="font-size: 18px;" href="https://github.com/talfco/clb-sentiment"&gt;&lt;a href="https://github.com/talfco/clb-sentiment"&gt;https://github.com/talfco/clb-sentiment&lt;/a&gt;&lt;/a&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Sequence Diagram: Ethereum Contract Transaction Execution</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/01/14/sequence-diagram-ethereum-contract-transaction-execution.html"/>
    <id>https://dev.cloudburo.net/2019/01/14/sequence-diagram-ethereum-contract-transaction-execution.html</id>
    <published>2019-01-14T19:09:10+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        This is a draft article and will be updated later. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          To find a zoomable image of the diagram go: 
         &lt;font style="font-size: 18px;"&gt;&lt;a href="https://lh3.googleusercontent.com/GBESDH7kIr5qY1yprhVY8k76G57f6z3PTYwyyKeosS9GgLPbT9edbpSahjTHQaIAV5rIm_evB5cOOD21HlWmL140aR5lMlkDE1YT0wGujfpC-FUJ7hpV5_JrxTM69Q536zLAD9-5_Tg=w2400" style="font-size: 18px; font-weight: bold;"&gt;here&lt;/a&gt;&lt;/font&gt;.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          The diagram was generated using the PlantUML tool, you can find the source on:
         &lt;font style="font-size: 18px;"&gt;&lt;a href="https://github.com/talfco/clb-uml-models/tree/master/models/ethereum" style="font-size: 18px; font-weight: bold;"&gt;github&lt;/a&gt;&lt;/font&gt;.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div style=""&gt;
       &lt;font face="hurme_no2-webfont, -apple-system, system-ui, sans-serif" style="color: rgb(18, 21, 23); --inversion-type-color: simple;"&gt;&lt;span style="caret-color: rgb(232, 235, 237); font-size: 16px;"&gt;&lt;h1&gt;Hello world&lt;/h1&gt;&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d8e16c90411be8004a287e36041f011e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Beginners Learning Platform For The Blockchain Space</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2019/01/05/beginners-learning-platform-for-the-blockchain-space.html"/>
    <id>https://dev.cloudburo.net/2019/01/05/beginners-learning-platform-for-the-blockchain-space.html</id>
    <published>2019-01-05T23:21:58+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;a href="http://Litepaper.com"&gt;Litepaper.com&lt;/a&gt; is a learning platform which provides so-called beautiful learning bundles in context of blockchain and cryptocurrencies. Beautiful is here the right word since the overall website is very well designed from a UX point of view.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Content wise it is targeted at beginners who want to get rge  first introduction into the problem domain space.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9e7412d191414c0daff8687fe9783077.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Each learning bundle is covering a certain topic space
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b1bf784619b90ae7111b28ae77ee95db.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
        Each bundle consists of modules each about 3-5 mins lengths covering a certain topic, i.e. “Ethereum”.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/3182e1286630fa045565be0b03c1a6a2.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9fc212e1e58d2988cbc907bada10743b.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
        Head over to
       &lt;a href="http://litepaper.com"&gt;litepaper.com&lt;/a&gt; to get educated.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Data Journalism: The Disinformation Report Assessing the IRA US Propaganda War</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/12/21/data-journalism-the-disinformation-report-assessing-the-ira-us-propaganda-war.html"/>
    <id>https://dev.cloudburo.net/2018/12/21/data-journalism-the-disinformation-report-assessing-the-ira-us-propaganda-war.html</id>
    <published>2018-12-21T07:10:04+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;p&gt;&lt;img class='pull-left img-responsive article img-thumbnail' src='/images/2758f55a209b0936b7f96c76bcffe945.jpeg'&gt;&lt;/p&gt;
  
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;a href="https://www.newknowledge.com/"&gt;New Knowledge&lt;/a&gt;, a company which provides a disinformation solution for brands,  published an excellent and extensive report recently.
      &lt;/div&gt;
      &lt;div&gt;
        The report investigates into the Russian propaganda war during the United States election in 2016.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As  the New Knowledge blog states:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;For years, Russia has leveraged social media to wage a propaganda war with operations that initially targeted their own citizens and sphere of influence. In 2014, they broadened those operations to include the United States and ran a multi-year campaign to manipulate and influence Americans, exploiting social and political divisions. The scale was massive — reaching 126 million people on Facebook, posting 10.4 million tweets on Twitter, uploading 1,000+ videos to YouTube, and reaching over 20 million users on Instagram.&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The activities were orchestrated by the Internet Research Agency (IRA). In 2017 Facebook, Twitter and Alphabet (Google) were requested to hand over their data content which was attributed to the IRA to the Congress Hearing.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        New Knowledge triggered an independent investigation of this dataset and produced a Whitepaper, as well as a slide-deck.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        It&amp;rsquo;s a fantastic piece of work which is a showcase what is possible today in the domain of data journalism using advanced technology to find the signals in the noise.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find the whitepaper and slide-deck here:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://www.newknowledge.com/disinforeport"&gt;&lt;a href="https://www.newknowledge.com/disinforeport"&gt;https://www.newknowledge.com/disinforeport&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 11px;" face="Helvetica Neue"&gt;&lt;span style=" background-color: rgb(245, 245, 245); font-size: 11px; font-style: italic; color: rgb(17, 17, 17);"&gt;Photo by &lt;/span&gt;&lt;a href="https://unsplash.com/photos/ute2XAFQU2I?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" style="box-sizing: border-box; background-color: rgb(245, 245, 245); letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: nowrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 11px; font-style: italic; color: rgb(153, 153, 153); font-variant-caps: normal; font-variant-ligatures: normal;"&gt;Andrew Neel&lt;/a&gt;&lt;span style=" background-color: rgb(245, 245, 245); font-size: 11px; font-style: italic; color: rgb(17, 17, 17);"&gt; on &lt;/span&gt;&lt;a href="https://unsplash.com/search/photos/journalism?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" style="box-sizing: border-box; background-color: rgb(245, 245, 245); letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: nowrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; font-size: 11px; font-style: italic; color: rgb(153, 153, 153); font-variant-caps: normal; font-variant-ligatures: normal;"&gt;Unsplash&lt;/a&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Quick Tips: How To Show Hidden Files in the Mac Finder</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/12/14/quick-tips-how-to-show-hidden-files-in-the-mac-finder.html"/>
    <id>https://dev.cloudburo.net/2018/12/14/quick-tips-how-to-show-hidden-files-in-the-mac-finder.html</id>
    <published>2018-12-14T19:27:22+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Never took the time to hunt this feature really down for years (don’t know why), but it’s easy as that: 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;b&gt;&lt;span style="border: 0px; font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);"&gt;Use &amp;lt;CMD&amp;gt;&amp;lt;shift&amp;gt; &amp;lt;.&amp;gt; to see hidden directory tree in the Finder&lt;/span&gt;&lt;span style="color: rgb(36, 39, 41); font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);"&gt; &lt;/span&gt;&lt;/b&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;b&gt;&lt;span style="color: rgb(36, 39, 41); font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/b&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(36, 39, 41); font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);"&gt;That’s it, helpful if you configure for example in IntellJ some configurations directory for Groovy.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(36, 39, 41); font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(36, 39, 41); font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);"&gt;Post it here, because I will forget it again ;)&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(36, 39, 41); font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(36, 39, 41); font-family: Arial, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);"&gt;&lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The new Data Journalism Handbook by Google News Lab</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/12/09/the-new-data-journalism-handbook-by-google-news-lab.html"/>
    <id>https://dev.cloudburo.net/2018/12/09/the-new-data-journalism-handbook-by-google-news-lab.html</id>
    <published>2018-12-09T10:50:32+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Recently, the Google News Lab launched the first part of its new
       &lt;a href="https://datajournalismhandbook.net/"&gt;Data Journalism Handbook&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Google News Lab supported a new version of the book which was worked out with the
       &lt;a href="https://ejc.net/"&gt;European Journalism Centre&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The book is published online (see link above) as well as on paper (2019) and contains sections about:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        It includes sections about:
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Telling stories with social media data from Buzzfeed’s Lam Thuy Vo
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Collaborative investigations from Spiegel Online’s Christina Elmer
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Archiving data journalism by Meredith Broussard
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          The latest trends in data visualisation
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        It’s the result of over a year of editing and gathering data journalists and academics together in hackathons at major journalistic events.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Definitive an excellent source of information you may find the full announcement
       &lt;a href="https://medium.com/google-news-lab/introducing-the-new-data-journalism-handbook-3e9c1ed7db2b"&gt;here&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Polkadot Hello World #5: Minting, Bonding, Staking and Slashing</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/11/21/polkadot-hello-world-5-minting-bonding-staking-and-slashing.html"/>
    <id>https://dev.cloudburo.net/2018/11/21/polkadot-hello-world-5-minting-bonding-staking-and-slashing.html</id>
    <published>2018-11-21T23:25:27+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        This week’s article is about “minting”, “bonding”, “staking” and “slashing” which are core functions of a Proof of Stake (POS) blockchain consensus engine.
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;It’s a follow-up article of “&lt;/span&gt;
       &lt;a href="https://medium.com/coinmonks/polkadot-hello-world-2-get-ready-to-be-nominated-as-official-validator-cc355ff4fd4d" style="-en-paragraph:true;"&gt;Polkadot Hello World #2: Get Nominated As An Official Validator&lt;/a&gt;
       &lt;span style=""&gt;”, which is an introduction to the topic and explains the Byzantine Fault Tolerance (BFT) and it’s relationship to PoS. So you may check out this one as well. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;When I was thinking about the right teaser image for this article - by playing around with the keyword “slashing” - I got remembered of the brilliant hit by Ian Dury &amp;amp; The Blockheads “Hit Me With Your Rythm Stick” from 1979. So instead of a static image, I start this article with this old post-punk music video, honouring the validators out in the PoS network universes, trying not to get hit by the rhythm stick of the consensus engines … &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;div class="responsive-video"&gt;
        &lt;iframe src="https://www.youtube.com/embed/2U5d7X7sE4k?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;… so back to work then.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;When I started my Polkadot blockchain researching work some weeks ago I wasn’t aware that the crypto economy is actually going through a big shift in direction to decentralized staking networks. Not just Polkadot, but a lot of other blockchain networks are looking forward replacing (or already replaced) the energy-hungry Proof of Work consensus approach with a new consensus model, the so-called Proof of Stake (PoS). &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Just a short wrap-up: In a PoS consensus network a group of Validators together will form the new chain. They are a new breed of miners (well minters) who … &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;… are proposing and voting on the next block, and the weight of each validator’s vote depends on the size of its deposit (i.e. stake). Significant advantages of PoS include &lt;/span&gt;
        &lt;span style="font-style: italic; font-weight: bold;"&gt;security, reduced risk of centralization, and energy efficiency&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;.&amp;rdquo; (&lt;/span&gt;
        &lt;a href="https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQs" style="font-style: italic;"&gt;Ethereum Proof of Stake Wiki&lt;/a&gt;
        &lt;span style="font-style: italic;"&gt;) &lt;/span&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;span style="font-size: 24px;"&gt;Minting&lt;/span&gt;
      &lt;span style="font-size: 24px;"&gt;  &lt;/span&gt;
      &lt;div&gt;
       &lt;span style="font-size: 24px;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/8dc80a557d9e0912e4abb5c17f7e8288.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt;San Francisco Mint Employees in the Machine Shop — 1873 (&lt;/span&gt;
       &lt;a href="https://commons.wikimedia.org/wiki/File:Photograph_of_four_San_Francisco_Mint_employees_in_the_Machine_Shop._-_NARA_-_296569.jpg" style="font-size: 14px;"&gt;License Wikimedia Commons&lt;/a&gt;
       &lt;span style="font-size: 14px;"&gt;)&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style=""&gt;This brings us to the first keyword of the article. The process of generating blocks with Proof-of-Stake is loosely referred to as &lt;/span&gt;
       &lt;span style="font-weight: bold;"&gt;Minting&lt;/span&gt;
       &lt;span style=""&gt;. Not sure why the word is used but could imagine that the task of the Validator is more driven to check an already produced raw block and attest its correctness. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Where in the world of PoW there is this hard and dirty (energy-consuming) job to be done of Mining to get hold of a raw block. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/91ce2aca55c5d8cf7dd0df6c7bc7e93a.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; Bundesarchiv Bild 183–17031–0003, Bergarbeiter bohrend — 1952 (
       &lt;a href="https://commons.wikimedia.org/wiki/File:Bundesarchiv_Bild_183-17031-0003,_Bergarbeiter_bohrend.jpg"&gt;Creative Commons License&lt;/a&gt;)
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;Polkadot’s Consensus Algorithm &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Combining the PoS consensus approach with BFT research in a public blockchain was first introduced by Jae Kwon around 2011 and ultimately led to the development of the &lt;/span&gt;
       &lt;a href="https://tendermint.com/" style="-en-paragraph:true;"&gt;Tendermint Algorithm&lt;/a&gt;
       &lt;span style=""&gt; (in 2015), which is the PoS consensus engine in the &lt;/span&gt;
       &lt;a href="https://cosmos.network/" style="-en-paragraph:true;"&gt;Cosmos Network&lt;/a&gt;
       &lt;span style=""&gt;, another Internet of Blockchains solution. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Various different consensus algorithms got developed in the meantime, amongst others Polkadot was announcing in its white paper a modern new algorithm. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;Polkadot achieves low-level consensus over a set of mutually agreed valid blocks through a modern asynchronous Byzantine fault- tolerant (BFT) algorithm. The algorithm will be inspired by the simple Tendermint and the substantially more involved HoneyBadgerBFT . The latter provides an efficient and fault-tolerant consensus over an arbitrarily defective network infrastructure, given a set of mostly be-nign authorities or validators.&amp;rdquo;&lt;/span&gt;(
        &lt;a href="https://polkadot.network/PolkaDotPaper.pdf"&gt;Polkadot Whitepaper&lt;/a&gt;)
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The algorithm got the name “Grandpa”, as an abbreviation for “&lt;/span&gt;
       &lt;a href="https://medium.com/polkadot-network/grandpa-block-finality-in-polkadot-an-introduction-part-1-d08a24a021b5" style="-en-paragraph:true;"&gt;GHOST-based Recursive Ancestor Deriving Prefix Agreement&lt;/a&gt;
       &lt;span style=""&gt;” and may be integrated into the upcoming Polkadot POC-3. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;To finish this short excursion to the consensus algorithm world, let me introduce the category to which Grandpa belongs to, a so-called “&lt;/span&gt;
       &lt;span style="font-weight: bold;"&gt;chain-based proof of stake&lt;/span&gt;
       &lt;span style=""&gt;” category: &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;The algorithm pseudo-randomly selects a validator during each time slot and assigns that validator the right to create a single block, and this block must point to some previous block (normally the block at the end of the previously longest chain), and so over time most blocks converge into a single constantly growing chain.&amp;rdquo;&lt;/span&gt; (
        &lt;a href="https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQs"&gt;Ethereum Proof of Stake Wiki&lt;/a&gt;)
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;span style="font-size: 24px; font-weight: bold;"&gt;Bonding&lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;A key concept in PoS networks is “Bonding” which can be translated as building up a strong “binding” relationship with a PoS network. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;You express your commitment to the network by locking a defined amount of your network token for a certain time period. You signal the network that you are a trustable network actor and accept the rules and regulations of the network. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;Staking &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;With bonding, you locked in your investment, but that’s far not enough. You have to put your token “at stake” or “at risk”. So you express to the network, “hey I’m ready to participate in securing the network and I accept punishment in case I don’t play to the rules and regulations of the network.” &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In Polkadot POC-2 Bonding/Staking are a combined action &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/963d8ae07f80ab2dd7f3f62f03c18040.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;By submitting a “staking.stake” transaction and sign it with the private key of your address, your Polkadot Stacking Tokens (DOT) will be locked and you are ready to act as a validator (in case you get elected). &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/0de5557c95c3253dedb3a5708ede6257.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;By staking your token and taking over an active role in the network, you are eligible for newly minted token and fees, which over time will &lt;/span&gt;
       &lt;span style="font-weight: bold;"&gt;grow your ownership in the network.&lt;/span&gt;
       &lt;span style=""&gt;  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In contrast to that, people who are not bonding their token to the network will have easy access to them which means ultimately liquidity. But they will not participate in the constant stream of new token distribution and will over time &lt;/span&gt;
       &lt;span style="font-weight: bold;"&gt;reduce their ownership in the network&lt;/span&gt;
       &lt;span style=""&gt;. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Having a reasonable set of trustful validators, which actively participate in the securing of the network and which altogether will grow their ownership of a successful network, is the nucleus of a PoS blockchain network. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;Rewarding in Polkadot &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;This implies that there is a reward system in place which is fine-tuned and well balanced to foster trustful Validators. As the &lt;/span&gt;
       &lt;a href="https://polkadot.network/PolkaDotPaper.pdf" style="-en-paragraph:true;"&gt;Polkadot Whitepaper&lt;/a&gt;
       &lt;span style=""&gt; paper states &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;In general, it is important that the reward is sufficiently large to make verification worthwhile for the network, yet not so large as to offset the costs of fronting a well-financed, well-orchestrated ”industrial-level” criminal hacking attack on some unlucky validator to force misbehaviour.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Gavin’s Wood goes on and describes the envisaged reward system as follows: &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;Incentivisation can happen through a pro-rata allocation of funds coming from a token base expansion (up to 100% per year, though more likely around 10%) together with any transaction fees collected. While monetary base expansion typically leads to inflation, since all token owners would have a fair opportunity at participation, no tokenholder would need to suffer a reduction in value of their holdings over time provided they were happy to take a role in the consensus mechanism.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;By expanding the overall amount of available DOT tokens, there is obviously an inflation or an overall value dilution ongoing, which can be neglected as long as you participate. The expansion is unlimited as he states: &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic; font-weight: bold;"&gt;&amp;ldquo;What is the inflation rate for Polkadot staking tokens&lt;/span&gt;
        &lt;span style="font-style: italic;"&gt;: The Polkadot staking token base expansion is unlimited. It rises and lowers according to market effects in order to target a particular proportion of tokens held under long-term bond in the validation process.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Taking all these facts into consideration, it’s clear that DOT’s aren’t aimed as cryptocurrencies. &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
        &lt;span style="font-style: italic;"&gt;&amp;ldquo;Polkadot tokens are neither intended nor designed to be used as a currency. They would make a bad currency: most will remain illiquid in the staking system and those that are liquid will face substantial fees for transfer of ownership. Rather, the purpose of Polkadot tokens is to be a direct representation of stake in the Polkadot network.&amp;rdquo;&lt;/span&gt;
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;span style="font-size: 24px;"&gt;Slashing in Polkadot &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Now let’s come to the uncomfortable part. As an active network community member - be it as Validator or Delegator — you may be punished in case you don’t comply with rules and regulations.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Validators have the ultimate goal to secure the network and must comply with the network rule being ready 7x24 to validate new blocks and obviously not trying to cheat or attack the network by different means. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Breaking the rule will result in a punishment, also known as &lt;/span&gt;
       &lt;span style="font-weight: bold;"&gt;Slashing&lt;/span&gt;
       &lt;span style=""&gt; &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;In case the consensus algorithm detects a rule break of a Validator, it will reduce or remove completely the staked tokens. The penalty size is dependent on the seriousness of your misbehaviour. Obviously, availability problems of your Validator node will be penalised less than actions which try to attack or fool the network. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;It’s not the consensus algorithm alone which tries to detect misbehaviours, but also well-defined Polkadot network roles, as for example the Fishermen: &lt;/span&gt;
      &lt;/div&gt;
      &lt;blockquote&gt;
       &lt;div&gt;
         Unlike the other two active parties, fishermen are not directly related to the block-authoring process. Rather they are independent “bounty hunters” motivated by a large one-off reward. Precisely due to the existence of fishermen, we expect events of misbehaviour to happen seldom, and when they do only due to the bonded party being careless with secret key security, rather than through malicious intent. (
        &lt;a href="https://polkadot.network/PolkaDotPaper.pdf"&gt;Polkadot Whitepaper&lt;/a&gt;)
       &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;An interesting question which must be answered when the network confiscates tokens. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;What should happen with the sanctioned tokens? Should they be burned (removed completely out of the network) or distributed to the others well-behaving validators? What do you think? &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;The short answer is that burning tokens gives value to everyone through distributed scarcity, whereas distributing it to remaining validators would encourage them to sabotage each other in an effort to get each other’s slashed tokens. ( (&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;Two Point Oh: Explaining Validators&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;)&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1cca72003aeed9a391f8b20d0e788053.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://commons.wikimedia.org/wiki/File:Slashing-and-burning.jpg"&gt;Link&lt;/a&gt; Slashing-and-burning in Eno, Finland. Public Domain Licensing
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As an analogy to the above picture: Having Slashed and Burnt the bonded tokens of bad actors, the soil (or network in our case) is ready to progress with healthy growth.
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Polkadot POC-2 provides already some basic slashing functionality. As for example in the below screenshot, the &lt;/span&gt;
       &lt;span style=""&gt;Polkadot Network Status&lt;/span&gt;
       &lt;span style=""&gt; is reporting a slashing of the Validator node “5FTt471….”, which is going over 4 subsequent steps. Each step gets more severe and finally, after burning 15&amp;#39;000 microDOTs, the Validator gets kicked out of the active Validator set.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/6022e9ad8ae2bea4d9de8d210e9becdf.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;You even have the possibility to adjust the slashing threshold, by executing a threshold transaction. &lt;/span&gt;
      &lt;/div&gt;
      &lt;span style="font-size: 24px;"&gt;Final Remarks &lt;/span&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Minting, Bonding, Staking and Slashing are key functionalities within a Proof of Stake (PoS) network, which gets secured by a new breed of service providers, the so-called Validators, which are minting blocks and are not requiring energy-hungry mining activities. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;The whole new PoS economy model with strong Validator communities isn’t mature yet. There are a lot of important PoS networks (Polkadot, Etherum Casper, Cosmos) still in POC or testing phase, and debates are ongoing about the right mix of Validators (threat of cartels and centralization), how to secure them properly (threat of attacks, which could result in slashing), as well what will be a feasible profit model for a Validator service providers.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;Getting these questions sorted will be key in order to attract a reasonable set of Validators, which will participate in the securing and healthy growth of the network.  &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;My tip to stay up-to-date with the evolvement and progress of the Polkadot network is by subscribing to their riot channels, namely: &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Polkadot Watercooler Riot Channel
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Substrate-technical 
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Validatorians
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style=""&gt;As an example below, Gav Wood informed recently when we have to expect a release 1.0 ready implementation of slashing (which will be early 2019). &lt;/span&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e585efd3a05afe817d1cfa30cc621f8e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
        Stay tuned !
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div style="margin-top: 1em; margin-bottom: 1em;"&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Hidoras Blog Re-Published Cloudburo Article</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/11/06/hidoras-blog-re-published-cloudburo-article.html"/>
    <id>https://dev.cloudburo.net/2018/11/06/hidoras-blog-re-published-cloudburo-article.html</id>
    <published>2018-11-06T19:09:50+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        As part of my CoinMonks Medium Publication article series “
       &lt;a href="https://medium.com/coinmonks/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node-d3c1bbdb9200"&gt;Hello World Polkadot&lt;/a&gt;”, which were initially published on this site, I also introduced an article about leveraging the PaaS Platform of Hidoras.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Mathieu Robin - CEO of Hidoras - reached out to me for publishing the article as part of the Hidoras Website, which now got now published and announced in the periodical Email letter. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://hidora.com/polkadot-hello-world-1-cost-effective-cloud-deployment-validator-node/"&gt;&lt;a href="https://hidora.com/polkadot-hello-world-1-cost-effective-cloud-deployment-validator-node/"&gt;https://hidora.com/polkadot-hello-world-1-cost-effective-cloud-deployment-validator-node/&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/46c5df6c09d65c5f9566d78c8178a5b2.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Polkadot Hello World #4: Security and Availability Aspects of Your Validator Node</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/10/31/polkadot-hello-world-4-security-and-availability-aspects-of-your-validator-node.html"/>
    <id>https://dev.cloudburo.net/2018/10/31/polkadot-hello-world-4-security-and-availability-aspects-of-your-validator-node.html</id>
    <published>2018-10-31T07:29:01+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      &lt;div&gt;
        In this article, I will address two topics in the context of the security and availability aspects of your Validator Node. I’m aware that the tips presented are just covering the tip of the &amp;ldquo;security and availability&amp;rdquo; iceberg for a PoS validator node. Nevertheless, I find them useful to get a minimal amount of security and availability to your test instance.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/3976637b3c0c63fc643f856683058294.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;a href="https://en.wiktionary.org/wiki/tip_of_the_iceberg#/media/File:Iceberg.jpg"&gt;Photomontage of an iceberg&lt;/a&gt; (
   &lt;a href="http://creativecommons.org/licenses/by-sa/3.0/"&gt;CC by SA-3.0&lt;/a&gt;)
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px; font-weight: bold;"&gt;Protecting Your Validator Node&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Exposing Blockchain or Crypto Services on the internet will always attract attacker who may try to crack your system. So better be prepared to take any measure to reduce the risk to be compromised.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    When running my Polkadot Validator I observed quite an extensive amount of attackers who tried to brute force my ssh password. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    One of the first things I did, was to install SSHGuard. So what is SSHGuard? As Andrew Schartzmeyer describes in his
   &lt;a href="https://andschwa.com/post/configuring-sshguard-on-ubuntu-server/"&gt;blog&lt;/a&gt;:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;&amp;ldquo;SSHGuard monitors servers from their logging activity. When logs convey that someone is doing a Bad Thing, sshguard reacts by blocking he/she/it for a bit. Sshguard has a touchy personality: when a naughty tyke insists disturbing your host, it reacts firmer and firmer.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;Now the nice thing about SSHGuard is that, despite its name, it protects quite a different services, and I now use it for SSH, Dovecot, and vsftpd. Unfortunately, the documentation makes it seem that these will be set up automatically, but that is only the case for SSH.&amp;rdquo;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In our case, we use it to protect our SSH port, so the installation is quite straightforward and by default, it will start checking the /var/log/auth.log on a Ubuntu server (in which the SSH attacks etc. are logged).n
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    On an Ubuntu server run the following commands in order to install SSHGuard which will use the
   &lt;a href="https://wiki.gentoo.org/wiki/Iptables"&gt;iptables&lt;/a&gt; as it system firewall. iptables is a program used to configure and manage the kernels netfilter modules.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  apt-get update 
  apt-get install -y sshguard 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    When sshguard blocks any malicious users (by blocking their IP addresses), it will use the sshguard chain. Prepare the chain, and make sure it is also triggered when new incoming connections are detected. Restart sshguard at the end.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  iptables -N sshguard 
  ip6tables -N sshguard   
  iptables -A INPUT -j sshguard   
  ip6tables -A INPUT -j sshguard  
  service sshguard restart 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    In the below example SSHGuard started to block an attempt after 4 unsuccessful login attempts and will increase the block time gradually, should the attacker go on with its attacks.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/f2338e9e90399fe139700c52a590abfc.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In order to get an overview of the blocked IP addresses run the following command:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  iptables -nvL sshguard 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7121116329398ea425af1cc40ac9718e.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    With this easy setup, you can be sure that your sensible sshd port is protected against dumb attackers try to crack into your system.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Inbound Ports of the Polkadot Validator&lt;/span&gt;&lt;/font&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    By the way which ports, are required by Polkadot Validator. There are three inbound ports required by a validator:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;div&gt;
      30333 port for the peer2peer protocol
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
      9933 on RPC and
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
      9944 for the WebSocket (WS) communication
    &lt;/div&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Ideally, your validator node would expose just these three ports as well as the sshd port allowing you to login to the system.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px; font-weight: bold;"&gt;Outbound Ports of the Polkadot Validator&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;font style="font-size: 18px;"&gt;&lt;br&gt;&lt;/font&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Some thoughts about protecting as well as the outbound ports of a Validator.  As described in this
   &lt;a href="https://security.stackexchange.com/questions/24310/why-block-outgoing-network-traffic-with-a-firewall"&gt;security.stackexchange&lt;/a&gt; thread
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;… incoming traffic blocking can only prevent unsolicited traffic from reaching your internal network. However, if you get malware on an internal machine (via running an untrusted executable, or through an exploit) you can still be hit.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;Blocking outgoing traffic helps limit the damage, by preventing the malware from connecting to a command &amp;amp; control server or exfiltrating data.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    So in a production Validator node, this may be considered as vital, but be aware:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;… the idea of outbound filtering would seem a natural course in a high-security environment. However, it is a very large and complex undertaking&amp;hellip;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    To illustrate this I was running a quick exercise by analyzing the communication pattern of a Validator node.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    For that, I was using the excellent tool 
   &lt;a href="https://www.wireshark.org/"&gt;Wire Shark&lt;/a&gt;. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;&amp;ldquo;Wireshark is the world’s foremost and widely-used network protocol analyzer. It lets you see what’s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions.”&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In order to get the input file for Wire Shark, I had to run the tcpdump command on my validator node &amp;hellip;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  root@node32882:~# tcpdump -w dump.out -i venet0 -c 1000  -vvv 
  tcpdump: listening on venet0, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes 
  1000 packets captured 
  1125 packets received by filter 
  0 packets dropped by kernel 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    … and load it into Wire Shark. As one can see in the below screenshot. There a plethora of outbound ports in use by the Validator. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d4b76860aefe027a3f2cc86f81400dd9.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This is expected taken into consideration that the Validator will use a Peer2Peer communication scheme in order to talk to the other around 45 Validators in his network.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In order to protect the outbound ports as well, a detailed know how would be necessary how the underlying P2P library is working, which is out-of-scope of this article (looking at securing a test node).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Nevertheless, it’s worth to mention that the
       &lt;a href="https://en.wikipedia.org/wiki/Payment_Card_Industry_Data_Security_Standard"&gt;Payment Card Industry Data Security Standard&lt;/a&gt; is just asking that from organisations which are offering credit cards (also some kind of validators).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;PCI DSS Requirement 1.2.1 focuses around organizations developing policies and procedures that restrict traffic to that which is absolutely necessary, both inbound and outbound, for business purposes. PCI Requirement 1.2.1 states, “Restrict inbound and outbound traffic to that which is necessary for the cardholder data environment, and specifically deny all other traffic.” The goal of PCI Requirement 1.2.1 is to limit traffic to only essential, required protocols, ports, or services and have the business justification for those required elements. (&lt;/span&gt;
       &lt;a href="https://kirkpatrickprice.com/video/pci-dss-requirement-1-2-1-restrict-traffic-to-that-which-is-necessary/" style="font-style: italic;"&gt;Link&lt;/a&gt;
       &lt;span style="font-style: italic;"&gt;)&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Interesting to see, what the minimal requirements will be to run a Polkadot Validator node.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let’s switch to the second topic of this article.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-family: &amp;quot;Helvetica Neue&amp;quot;; font-weight: bold;"&gt;Increase Availability of your Validator Node&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        I’m running a Validator POC-2 node in a 7x24 fashion and try to get the slashing (due to unavailability of my node) reduced to a minimum. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Nevertheless, from time to time, the process gets a Killed signal which results  that the process must be started.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/3f93fdd412917ac7ead4aa70d1125ab4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    In order to automate this task and reduce the slashing probability to a minimum, I wrote a small cron job script, which gets executed every minute.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The script (monitorValidator.sh) to be triggered will check if there is no polkadot process running
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  &lt;span class="c"&gt;#!/bin/bash &lt;/span&gt;
  timestamp&lt;span class="o"&gt;()&lt;/span&gt; 
  &lt;span class="o"&gt;{&lt;/span&gt; 
  date +&lt;span class="s2"&gt;"%Y-%m-%d %T"&lt;/span&gt; 
  &lt;span class="o"&gt;}&lt;/span&gt; 
  &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/bin/netstat -tulpn | awk &lt;span class="s1"&gt;'{print $7}'&lt;/span&gt; |  grep polkadot | wc -l &lt;span class="k"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt; 
  &lt;span class="k"&gt;then 
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;timestamp&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;: Polkadot Validator Down"&lt;/span&gt; &amp;gt;&amp;gt; /var/log/polkamonitor.log 
    /root/.cargo/bin/polkadot --name &lt;span class="nv"&gt;$POLKADOT_NAME_POC2&lt;/span&gt; --validator --key &lt;span class="nv"&gt;$POLKADOT_KEY_POC2&lt;/span&gt; &amp;amp;&amp;gt;&amp;gt; /var/log/polkamonitor.log 
  &lt;span class="k"&gt;fi&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    To install the crontab, execute the following command
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  (/usr/bin/crontab -l ; echo " * * * * *  bash -l -c '/root/monitorValidator.sh  &amp;gt; /dev/null 2&amp;gt;&amp;amp;1'") | /usr/bin/crontab 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    This will result in a check of every 60 seconds if there is a validator process still running, if not it will be restarted.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px;"&gt;Future Outlook and Cosmos Approach&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;font style="font-size: 14px;"&gt;&lt;br&gt;&lt;/font&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 14px; font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;On the p&lt;/span&gt;
   &lt;span style=" font-size: 14px; color: rgb(36, 41, 46); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;ublic repo to coordinate the collaboration of teams working in the web3 space an issue was opened to &amp;ldquo;&lt;/span&gt;
   &lt;span style="font-size: 14px; color: rgb(36, 41, 46); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Create and run a node cluster service for Polkadot&lt;/span&gt;
   &lt;span style="caret-color: rgb(36, 41, 46); font-size: 14px; color: rgb(36, 41, 46); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;”&lt;/span&gt;
   &lt;span style="font-size: 14px; color: rgb(36, 41, 46); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt; (&lt;/span&gt;
   &lt;a href="https://github.com/w3f/Web3-collaboration/issues/43" style="font-size: 14px; font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;&lt;a href="https://github.com/w3f/Web3-collaboration/issues/43"&gt;https://github.com/w3f/Web3-collaboration/issues/43&lt;/a&gt;&lt;/a&gt;
   &lt;span style="font-size: 14px; font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;), which would address the availability issue.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;font face="Helvetica Neue" style="font-size: 14px;"&gt;&lt;br&gt;&lt;/font&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 14px; font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Cosmos which is more mature than Polkadot addressed some of the topics, amongst others&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Provisioning of the
   &lt;a href="https://forum.cosmos.network/t/sentry-node-architecture-overview/454"&gt;Sentry Node Architecture&lt;/a&gt;, which is an infrastructure example for DDoS mitigation on Gaia / Cosmos Hub network validator nodes.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;&amp;quot;To mitigate the issue, multiple distributed nodes (sentry nodes) are deployed in cloud environments. With the possibility of easy scaling, it is harder to make an impact on the validator node. New sentry nodes can be brought up during a DDoS attack and using the gossip network they can be integrated into the transaction flow.&amp;rdquo;&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    As well as the
   &lt;a href="https://github.com/tendermint/kms"&gt;Tendermint HSM Key Management System&lt;/a&gt; (KMS)
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;&amp;ldquo;a lightweight service intended to be deployed alongside the gaiad service (ideally on separate physical hosts) which provides the following:&lt;/span&gt;
  &lt;/div&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;div&gt;
     &lt;span style="font-style: italic;"&gt;High-availability access to validator signing keys&lt;/span&gt;
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
     &lt;span style="font-style: italic;"&gt;Double-signing prevention even in the event the validator process is compromised&lt;/span&gt;
    &lt;/div&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;div&gt;
     &lt;span style="font-style: italic;"&gt;Hardware security module storage for validator keys which can survive host compromise&amp;rdquo;&lt;/span&gt;
    &lt;/div&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    That’s it for today, at least on the surface of your Validator iceberg, you have done your first step to secure and increase availability. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    It will be interesting to watch how Polkadot will evolve over time in the context of security and availability.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/80f439c75ee641bb0f51fb6e36a1f509.jpeg'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://de.wikipedia.org/wiki/Eisb%C3%A4r#/media/File:Polar_bear_after_unlucky_hunt_for_a_seal.jpg"&gt;Icebear&lt;/a&gt; (
       &lt;a href="https://creativecommons.org/licenses/by-sa/4.0"&gt;CC by SA-4&lt;/a&gt;)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In the next week, we will look in more detail to the Slashing process and how you can influence it.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Polkadot Hello World #3: POC-3 on Substrate is Here</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/10/22/polkadot-hello-world-3-poc-3-on-substrate-is-here.html"/>
    <id>https://dev.cloudburo.net/2018/10/22/polkadot-hello-world-3-poc-3-on-substrate-is-here.html</id>
    <published>2018-10-22T21:15:23+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      &lt;div&gt;
        Around the 15th October (as announced in the following
       &lt;a href="https://hackmd.io/y-E9Q9jTRreni6z9EU0kkA"&gt;hackmd.io article&lt;/a&gt;)  the POC-3 test net called “BBQ-Birch” went life, which is an implementation of a Substrate-based blockchain. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So you may ask, what heck is the difference between Polkadot and Substrate, which was confusing for me at the beginning as well. Let’s clarify the differences, as well as similarities between these two main concepts.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Substrate is a framework for creating cryptocurrencies and other decentralised systems using the latest research in blockchain technology.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As Jack Fransham states on the
       &lt;a href="https://medium.com/paritytech/substrate-in-a-nutshell-a54cd34c7863"&gt; Parity website in the Substrate Intro article&lt;/a&gt;:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;It’s important to understand that Parity Substrate is not part of Polkadot at all. Although Polkadot is built with Substrate and projects built with Substrate can run natively on Polkadot, you can use Substrate to build new blockchains right now. You don&amp;rsquo;t need to wait for Polkadot to be finished or even for a proof-of-concept to be released to start working on a blockchain using this framework.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;hellip;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;You can think of it as being like Express or another web application framework, but for building distributed or decentralised systems such as cryptocurrencies or a message bus. Just as most web applications shouldn&amp;rsquo;t need to reimplement their own version of HTTP, we believe that it&amp;rsquo;s wasted effort for every team creating a new blockchain to have to implement all the networking and consensus code from scratch.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Substrate in a Nutshell, gives you a nice more detailed view:
       &lt;a href="https://medium.com/paritytech/substrate-in-a-nutshell-a54cd34c7863"&gt;&lt;a href="https://medium.com/paritytech/substrate-in-a-nutshell-a54cd34c7863"&gt;https://medium.com/paritytech/substrate-in-a-nutshell-a54cd34c7863&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So the POC-3 “BB” is exactly that, a minimal substrate reference implementation of a blockchain based WASM smart contract. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As Gavin Wood states on Riot:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/f2e4bd9019b13732351062f50cf8ce48.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        He also provides an outlook to POC-4 planned for December /January. Were it’s stated that BB Testnet would support parachains, which means that substrate would be ready to host Polkadot as well.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e421997df25dc3343e0d9dcc08db8acd.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    So let’s check out some changes in contrast to the POC-2 deployment. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    You should read the following article “
   &lt;a href="https://medium.com/coinmonks/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node-d3c1bbdb9200"&gt;Hello World Polkadot #1: Cost-Effective Deployment of a Validator Node&lt;/a&gt;” first, which provides you with the big picture. In this article here I will only describe the delta-changes to the POC-2 installation.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 18px; font-weight: bold;"&gt;New Docker Image&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    First I had to create a new docker image, which runs the latest substrate POC-3 code on Ubuntu 16.04.5 in order to deploy it to a my Jelastic PaaS (hidora.com). It’s a minimal docker image, the main run command looks like this:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  RUN curl https://sh.rustup.rs -sSf | sh -s -- -y &amp;amp;&amp;amp; \ 
      $HOME/.cargo/bin/rustup update &amp;amp;&amp;amp; \ 
     export PATH=$PATH:$HOME/.cargo/bin &amp;amp;&amp;amp; \ 
     git clone https://github.com/paritytech/substrate.git &amp;amp;&amp;amp; \ 
      cd substrate/ &amp;amp;&amp;amp; \ 
      ./scripts/init.sh &amp;amp;&amp;amp; \ 
      ./scripts/build.sh &amp;amp;&amp;amp; \ 
      cargo build --release 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    You can find the image on Dockerhub in 
   &lt;a href="https://hub.docker.com/r/talfco/clb-substrate/"&gt;talfco/clb-substrate&lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Deploy the Dockerfile to your test node installation and run it by providing the  &amp;ndash;name parameter
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/ae86a78cdc36203d62ba52ebedbb6e8e.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As with POC-2 the Telemetry GUI  (
       &lt;a href="https://telemetry.polkadot.io/#/BBQ%20Birch"&gt;&lt;a href="https://telemetry.polkadot.io/#/BBQ%20Birch"&gt;https://telemetry.polkadot.io/#/BBQ%20Birch&lt;/a&gt;&lt;/a&gt;) will show how you node is syncing up with the chain.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Create a new address store it in your digital Wallet&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The next thing to do is to create an address of the POC-3 test-net and store it in your personal wallet app. Actually, there are two wallet apps available for POC-3, which can be used for managing your POC-3 addresses.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As a blockchain newcomer, I always got confused with the topic “wallet account” by intuitively mapping it to the conventional concepts of other (centralized) accounts solutions. These accounts are accessible via a different browser on multiple devices (or by multiple browsers on the same device). Wallet Apps and their account management capability are quite different.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let me share you my personal findings  (which may potentially for you crystal-clear) when we are using these two Substrate  Wallet/Management Apps for the POC-3.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;The below picture represents a digital wallet, which stores amongst others the private-, as well as the public key of a Birch address.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c66c044a02206ac1d9bddfd59fd8732e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 12px;"&gt;Base-Image &lt;/span&gt;
       &lt;span style="font-size: 12px;"&gt; by&lt;/span&gt;
       &lt;a href="http://www.freepik.com/" style="font-size: 12px;"&gt; Sergey_Kandakov / Freepik&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The so-called Bondy Polkadot UI (by Gavin Wood)  is minimal in its feature set, but an excellent (not too extensive) code-base for studying the inner working of a React-based Polkadot client app.&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          POC-3 Wallet App Link: 
         &lt;a href="https://paritytech.github.io/substrate-ui/index.html"&gt;&lt;a href="https://paritytech.github.io/substrate-ui/index.html"&gt;https://paritytech.github.io/substrate-ui/index.html&lt;/a&gt;&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Source Code: 
         &lt;a href="https://github.com/paritytech/substrate-ui"&gt;&lt;a href="https://github.com/paritytech/substrate-ui"&gt;https://github.com/paritytech/substrate-ui&lt;/a&gt;&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The second app is the Parity Substrate Portal app, which is built up from different modular components and is more feature-rich and was the frontend used in my previous article. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          POC-3 Portal App Link: 
         &lt;a href="https://polkadot.js.org/apps/next"&gt;&lt;a href="https://polkadot.js.org/apps/next"&gt;https://polkadot.js.org/apps/next&lt;/a&gt;&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Source Code: 
         &lt;a href="https://github.com/polkadot-js/apps"&gt;&lt;a href="https://github.com/polkadot-js/apps"&gt;https://github.com/polkadot-js/apps&lt;/a&gt;&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Both Apps are so-called Crypto Wallet apps, which are software programs that store your public and private keys and interface with Polkadot so users can monitor their balance, transfer dots, staking up and conduct other operations.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The above Wallet Apps in the context of managing the key(s) must be seen as fully isolated within a browser runtime and its associated local device storage required for storing the sensitive keys. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Both Wallet Apps are so-called
       &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;HTML5 Single Page Application&lt;/a&gt; based on the React Javascript Framework.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For example, the Bondy Polkadot UI loads initially in 11 HTTP requests the necessary Javascript Application (and some helper files) and then make a protocol switch to the WebSocket protocol and communicates via &amp;ldquo;wss://substrate-rpc.parity.io/“ with the Substrate Test net. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That’s it from a pure HTTP point of view, i.e. the HTTP protocol will only be required to load the static files (Javascript and some CSS and image files) into the Browser VM.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9dd0565be6e2e5973490c577190ca580.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So the Wallet App lives in a Browser VM and controls his local store objects. In our example, the store is used to persist the private key, public key, as well as a textual description of the managed address. For the address book functionality, the store will be used to persist a textual identifier of the address, as well as the address itself.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/1163b570e83df7edee142fb28316c2cd.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In case you open in the browser the second Wallet app (i.e. Substrate Wallet Portal App) you will realize that the app isn’t aware of any private key-/public key. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/2ec72fb93dadaef5d4802d5d7c777695.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This was confusing me at the beginning but it should be now clear by taking the rule into consideration, that a wallet app is specific for:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-weight: bold;"&gt;one device, running one browser type (Chrome, Firefox etc.) and executing one specific single page app (represented by the URL from where the resources are loaded).&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Just another example: Running the Bondy Polkadot App in a Chrome as well as Firefox browser on the same device will not share any key configuration.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So how to get your address configured in the second wallet app? First I thought I have to use the restore account functionality, but at the end, the solution, was even simpler: 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-weight: bold;"&gt;just create in the second app the address by using your private seed of the address.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        By using the same seed, you will just configure the App for this dedicated address (dead simple). So you have the address configured for both apps. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A final remark to this drill-down:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The secretStore management in the App is provided by the oo7-substrate NPM library, which is part of the Bond Framework 
       &lt;a href="https://github.com/paritytech/oo7"&gt;&lt;a href="https://github.com/paritytech/oo7"&gt;https://github.com/paritytech/oo7&lt;/a&gt;&lt;/a&gt;. Potentially a good start for a later drill down in the mechanics of the Wallet app.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Create a new Address and store it in your wallet&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As a first step, you have to create a new Address on the BBQ-Birch Testnet. 
      &lt;/div&gt;
      &lt;div&gt;
        Head over to the BBQ Birch
       &lt;a href="https://paritytech.github.io/substrate-ui/index.html"&gt;Bondy Polkadot App&lt;/a&gt; and create a new address via the Wallet function.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As one can see, the first time you open the App you will already get a default address configured with the account name “Default”. Press “Delete” to get rid of it, so you can set your own name.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/5ac8043652f9e55266ffab3fc372eb5c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So create your own address by (1) generating a private seed, (2) defining a name and press the “Create” button. This will (3) generate a new address for you.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7338eae0c0971991399b5f3f94bbb1e3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In order to extract your private seed, you have to click on the eye-icon (4), which will show initially the Validator Seed as a hexadecimal value (required when starting a Validator with the KEY argument.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/f09fe308c5deb2e1d56931d3beacd48d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Click on the key icon to get the seed, as Seed phrase. You should store the Seed phrase offline and keep it secure, it’s your safety net to recover at any time, your address to a Substrate Wallet app.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/06e70d9fa9b3467148430b2f54224e03.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;It’s time to request some BBQ/Birch (instead of DOT&amp;rsquo;s)&lt;/span&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;You should know it already from &lt;/span&gt;
       &lt;a href="https://medium.com/coinmonks/polkadot-hello-world-2-get-ready-to-be-nominated-as-official-validator-cc355ff4fd4d" style="font-size: 14px;"&gt;my last article&lt;/a&gt;
       &lt;span style="font-size: 14px;"&gt;, you have to reach out to get some Birch (tokens) or are they called BBQ? Anyway, the community is still looking for a correct naming of the “tokens”. Get them on the &lt;/span&gt;
       &lt;a href="https://riot.im/app/#/room/%23polkadot-watercooler:matrix.org/$15393684132609owsNS:matrix.parity.io" style="font-size: 14px;"&gt;Riot channel&lt;/a&gt; by asking politely for some Birch’s.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        After you received some Birch tokens, you will get as well a Short Address. You can check, the status of your Address via the Address Lookup
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/52639e34dcb1852bc5c98580b5d6e3d4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A nifty new feature is the Short Address, which is enabled as soon as you got some Birch associated with your address, it’s a 4-character address.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;b&gt; 
       &lt;img class='article  img-thumbnail' src='/images/c6de26cf8fde46f549c61a043e83a940.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/b&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can do a lookup using your short address
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/2d0d8ba8b754849b27d8471e1afe591c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Get the Polkadot Portal App ready&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Switch over to the
       &lt;a href="https://polkadot.js.org/apps/next"&gt;Substrate Portal App&lt;/a&gt; and open it in the browser. As one can see, there is no address account configured yet (remember the discussion about wallet scope above).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;u&gt; 
       &lt;img class='article  img-thumbnail' src='/images/eab71e7df70cf53937ce508ab7cc6bfe.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/u&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Just create an account with your “Seed Phrase”, which will create an account in this app. You normally will use the same account name (not to get confused) and you have to provide a password.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;u&gt; 
       &lt;img class='article  img-thumbnail' src='/images/88a3172c867592356efcef61a5a91e50.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/u&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Et voila, you now have two Substrate Wallet Apps configured with your substrate address. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/fb9b8567a33c128205b3d5c2a385fdba.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So it’s time to restart your Validator node with your private Validator Seed (see above), by configuring your docker instance run cmd with the parameter  &amp;lsquo;&amp;ndash;validator —key &amp;lt;yourValidatorSeed&amp;gt;’ (see my last article). After restart, the log will show the BFT agreement error, which signifies that you are not nominated yet to a full validator.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/8f05b3627f6fe88358e0e426eee4091c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In case you will use the above Dockerfile, make sure to set two environment variables in your Docker instance
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          POLKADOT_KEY_POC3
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          POLKADOT_NAME_POC3
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/48ce0c75a7e99a8bc78c68d857ea700f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The Dockerfile configures a crontab file with the monitorValidator.sh script. Each minute it will be checked if the Validator process is still running.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/0db4a97741db0805c235ae5c1bd11a51.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        If not, the Validator process will be restarted in order to reduce the slashing time.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/eba919eeb9efe1b3bcc9e8d4c906e89e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Finally get nominated &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;The final steps are to stake up for Validation and get enough Nominators which back you with their Birchs in order to get become a full validator. Refer to my last article:&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 14px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://medium.com/coinmonks/polkadot-hello-world-2-get-ready-to-be-nominated-as-official-validator-cc355ff4fd4d"&gt;&lt;a href="https://medium.com/coinmonks/polkadot-hello-world-2-get-ready-to-be-nominated-as-official-validator-cc355ff4fd4d"&gt;https://medium.com/coinmonks/polkadot-hello-world-2-get-ready-to-be-nominated-as-official-validator-cc355ff4fd4d&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That’s it for today, everybody Polka then 😉
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/88acaeb97a2dc84c83b91bf5f87d28a5.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Being Writer for the Coinmonks Medium Publication</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/10/13/being-writer-for-the-coinmonks-medium-publication.html"/>
    <id>https://dev.cloudburo.net/2018/10/13/being-writer-for-the-coinmonks-medium-publication.html</id>
    <published>2018-10-13T22:09:40+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;p&gt;&lt;img class='pull-left img-responsive article img-thumbnail' src='/images/c4760121b71a02a205a336ccf262e4d7.png'&gt;&lt;/p&gt;
  
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As of October 2018 I’m an elected writer of the Coinmonks Medium Publication. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The purpose of the publication is to create a cryptocurrency knowledge repository. Coinmonks is open community which thrives on it’s writers and readers.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find the Coinmonks Publication under: 
       &lt;a href="https://medium.com/coinmonks"&gt;&lt;a href="https://medium.com/coinmonks"&gt;https://medium.com/coinmonks&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        My stories are published in this blog, as well as under my Medium Account: 
       &lt;a href="https://medium.com/@talfco"&gt;&lt;a href="https://medium.com/@talfco"&gt;https://medium.com/@talfco&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Have fun !
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Polkadot Hello World #2: Get Ready to Be Nominated as Official Validator</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/10/08/polkadot-hello-world-2-get-ready-to-be-nominated-as-official-validator.html"/>
    <id>https://dev.cloudburo.net/2018/10/08/polkadot-hello-world-2-get-ready-to-be-nominated-as-official-validator.html</id>
    <published>2018-10-08T22:05:10+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;span style="font-style: italic;"&gt;The tutorial is based on Polkadot POC2.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This is the second article of the series, articles already published on Medium:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;a href="https://medium.com/@talfco/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node-d3c1bbdb9200"&gt;Polkadot Hello World #1: Cost-Effective Cloud Deployment of a Validator Node&lt;/a&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Where’s the Party?&lt;/span&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
        I suppose you followed the steps as described in
       &lt;a href="https://medium.com/@talfco/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node-d3c1bbdb9200"&gt;my first article&lt;/a&gt; and have now a stable Polkadot Validator cloud instance running. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So what does that mean, actually?
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Well, you have a node running which is building up a local copy of the parachain exposed by the Krumme Lanke Polkadot POC-2 test net. So you are more or less an active listener on the relay chain and are processing the newly created block and seal them into your local blockchain DB.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This situation can be explained by using a modified tweet of 
       &lt;a href="https://twitter.com/iamdevloper" style="background-color: rgb(230, 236, 240); font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; unicode-bidi: embed; color: rgb(101, 119, 134); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold; direction: ltr !important;"&gt;@&lt;/a&gt;
       &lt;a href="https://twitter.com/iamdevloper" style="background-color: rgb(230, 236, 240); font-size: 14px; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; unicode-bidi: embed; color: rgb(101, 119, 134); font-family: &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: bold; direction: ltr !important;"&gt;iamdevloper&lt;/a&gt;, which is famous for funny to-the-point messages, as for example
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9d1f526610ce86f93330837ea5c1eaa1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Actually you entered the blockchain space with a validator node  … but … are not part of the party yet.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/e77de2760f8136c2e6ffabc662b2ab2c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;b style="font-size: 14px;"&gt;&lt;br&gt;&lt;/b&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In order to join the party, getting the possibility to earn DOT tokens and getting rich ( test-rich only)  you have to apply for one of the four Polkadot basic roles, which upkeeps a Polkadot network (refer to the roles discussion in my last
       &lt;a href="https://medium.com/@talfco/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node-d3c1bbdb9200"&gt;article&lt;/a&gt;). 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Let’s walk-Through the four steps which are necessary to enter the Proof of Stake (PoS) party room in the Validator role.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7532c353533904d84b317d74f2cf48d4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;1. Create an account&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As a first step, you have to create an account on 
       &lt;a href="https://poc-2.polkadot.io/#/accounts"&gt;&lt;a href="https://poc-2.polkadot.io/#/accounts"&gt;https://poc-2.polkadot.io/#/accounts&lt;/a&gt;&lt;/a&gt;. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/9b6f8a3172cba60273b0da127346ef4a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Choose a name and password and create your account.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In return, you will get an Account Address (which you can use in public), as well a seed, which you have to keep private! In a later stage when you start up your validator applying as an official validator, you will require your seed again.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;2. Get some funding&lt;/span&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having created your account, you now have to get some DOT test tokens for your account. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You require DOT’s test token in order that you can pay the “staking” transaction fee, which brings you forward into the intention queue of future validators. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Head over to the
       &lt;a href="https://riot.im/app/#/room/%23polkadot-watercooler:matrix.org"&gt;Polkadot Watercooler on Riot&lt;/a&gt;, where you will find a lot of helpful people which will send you some DOT’s to your account address.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/441f3199fde0c43bd2d7503361717bc3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        After receiving some test DOT’s head over to your account and check the balance, in my case 20’000 dots were deposited.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/fcf2bedbdd81c8730a71de40fe924e9e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px; font-weight: bold;"&gt;Reconfigure your Validator node and restart&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having a funded account, it’s time to restart your node by applying some parameters, which will bring you onto the intention list of Validators.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;Modify the parameter of your Validator, by applying the following values: &lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt;&amp;ldquo;—validator —key &amp;lt;yourPrivateSeed&amp;gt;&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/5afcb343b8779e9a0836a27d17db6c58.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        and restart your node.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You now have A Validator node running, which is ready for work as a “Proof of Stake” (POS) consensus Polkadot Validator node. So you have expressed the desire to take over this role, but you are not eligible yet. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So grab some of your DOT tokens and head over to the Stake account transaction process.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        BTW: The Polkadot Validator will show in his log the following message in this mode (you don’t have to care about this error, it just signifies that you aren’t an official validator yet)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/fd007ecf8950a98cdc32fdfc07893b41.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;b style="font-size: 18px;"&gt;&lt;br&gt;&lt;/b&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Deep Dive Section: Consensus in context of Polkadot&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        But what means “BFT agreement” in log entry? Well we have to go way back in the history to the Byzantine Generals
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/017aa7e83fe82186540d869e65972c48.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://commons.wikimedia.org/wiki/File:Skylitzes._Basil_II_vs_Georgians_cropped.jpg" style="font-size: 12px;"&gt;Public Domain Picture&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The so-called
       &lt;a href="https://en.wikipedia.org/wiki/Two_Generals%27_Problem"&gt;T&lt;/a&gt;
       &lt;a href="https://en.wikipedia.org/wiki/Two_Generals%27_Problem" style="font-style: italic;"&gt;wo-General Problem&lt;/a&gt; described in 1975 a scenario where two generals are attacking a common enemy and try to communicate via messengers in a reliable and secure way the attack time. The scenario was proven to be unsolvable.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &amp;ldquo;There is no way to guarantee the second requirement that each general is sure the other has agreed to the attack plan. Both generals will always be left wondering whether their last messenger got through.”
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In 1982 a follow-paper was published describing the
       &lt;span style="font-style: italic;"&gt; &lt;a href="https://people.eecs.berkeley.edu/~luca/cs174/byzantine.pdf" style="font-style: italic;"&gt;Byzantine General Problem&lt;/a&gt;&lt;/span&gt;, which is a generalized version of the Two Generals Problem with a twist. It describes the same scenario, where instead more than two generals need to agree on a time to attack their common enemy. The added complication here is that one or more of the generals can be a traitor, meaning that they can lie about their choice.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The algorithm described in paper was proven, that the algorithm can reach consensus as long as 2/3 of the actors are honest. If the traitors are more than 1/3, the consensus is not reached, the armies do not coordinate their attack and the enemy wins.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Byzantine Faults are the most severe and difficult to deal with. Byzantine Fault Tolerance has been needed in airplane engine systems, nuclear power plants, as well as blockchains. There are various algorithms available tackling the problem.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A consensus algorithm (BFT)  is
       &lt;span style="font-style: italic;"&gt;Byzantine Fault Tolerant&lt;/span&gt; as long as the number of traitors does not exceed one-third of the generals. You can find a good overview of the
       &lt;a href="https://medium.com/loom-network/understanding-blockchain-fundamentals-part-1-byzantine-fault-tolerance-245f46fe8419"&gt;following Medium article&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The big breakthrough with blockchains was the usage of Proof of Work (PoW), as well as later Proof of Stake (PoS) as a probabilistic solution to the Byzantine General Problem. The
       &lt;a href="https://www.mail-archive.com/cryptography@metzdowd.com/msg09997.html"&gt;following email by Satoshi Nakamoto &lt;/a&gt;(the Bitcoin anonymous founder) from 2008, explains how PoW should be used to solve the problem in an easy language.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In the context of the Polkadot algorithm - which is under development - the white paper states:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;Ultimately we expect to be inspired by a number of promising BFT consensus algorithms in the core; &lt;/span&gt;
       &lt;a href="http://www.scs.stanford.edu/14au-cs244b/labs/projects/copeland_zhong.pdf" style="font-style: italic;"&gt;Tangaora&lt;/a&gt;
       &lt;span style="font-style: italic;"&gt; (a BFT variant of &lt;/span&gt;
       &lt;a href="https://raft.github.io/" style="font-style: italic;"&gt;Raft&lt;/a&gt;
       &lt;span style="font-style: italic;"&gt;), &lt;/span&gt;
       &lt;a href="https://tendermint.com/static/docs/tendermint.pdf" style="font-style: italic;"&gt;Tendermint&lt;/a&gt;
       &lt;span style="font-style: italic;"&gt; and &lt;/span&gt;
       &lt;a href="https://eprint.iacr.org/2016/199.pdf" style="font-style: italic;"&gt;HoneyBadgerBFT&lt;/a&gt;
       &lt;span style="font-style: italic;"&gt;]. The algorithm will have to reach an agreement on multiple parachains in parallel, thus differing from the usual blockchain consensus mechanisms. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As Gavin Wood states in the
       &lt;a href="https://polkadot.network/PolkaDotPaper.pdf"&gt;White Paper&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;For a proof-of-authority (PoA) style network, this alone would be sufficient, however,  Polkadot is imagined to be also deployable as a network in a fully open and public situation without any particular organisation or trusted authority required to maintain it. As such we need a means of determining a set of validators and incentivising them to be honest. For this, we utilise PoS based selection criteria.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So it’s important to realise that a BFT algorithm in a PoA environment only (with a consensus mechanism based on identity as a stake) would be sufficient. But the open an public situation of Polkadot ask for additional means.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        To conclude the section, there was some debate about Polkadot being a permission-less platform on the Riot channel, let&amp;rsquo;s summarize the findings (which are backed by the statements in the white paper)
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Polkadot will be a public network. Anyone is free to participate in the network, and if nomination processes are used to select validators as the white papers outlines, it might take place daily.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Polkadot&amp;rsquo;s process will allow any party to attempt to validate as described, just like anyone is free to mine on Ethereum or Bitcoin, that doesn&amp;rsquo;t mean they are guaranteed a block.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Additionally, the term permission can often apply to more than just block creation, but also to a white or black list allowing or disallowing participation among other restricted sets.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          All things considered, Polkadot fits the definition of a permissionless platform.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having a basic understanding now of the consensus topic let’s move forward with our process of stake and getting nominated.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;3. Stake and Get Nominated&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This step is the PoS selection process, which will finally incentivise us, in case we are behaving in an honest manner.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        To get you on the intention list of potential validators requires you to execute a stake transaction, which comes with some transaction fees (around 210 DOT’s).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Open the Polkadot Admin GU, select the Staking Tab (
       &lt;a href="https://poc-2.polkadot.io/#/staking"&gt;&lt;a href="https://poc-2.polkadot.io/#/staking"&gt;https://poc-2.polkadot.io/#/staking&lt;/a&gt;&lt;/a&gt;) and press the “stake” action button. 
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d6163e5a860e7614b7c51f428fce42d4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You have to provide your password to sign and submit the  “staking.stake” transaction. Due to the fact that is your first stake transaction, it’s index is 0.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/56659461833209323b2b24309d9b2b8b.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The execution of this transaction brings you in the waiting room of Validator nodes, which expressed their intention to participate in the Proof of Stake consensus validation process with the next “era” (era will be explained shortly). 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b323330a530b3fbf6603322b8328c3e8.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 10px;"&gt;Waiting for the next free seat - Taos. New Mexico, 1942  (&lt;/span&gt;
       &lt;a href="https://pixabay.com/en/taos-new-mexico-1941-84790/" style="font-size: 10px;"&gt;Creative CC0 Commons Licence&lt;/a&gt;
       &lt;span style="font-size: 10px;"&gt;)&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Technically the waiting room looks like this
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c97a1a5adaaffe8ad84e01f5f3bdac0e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        On the left side are the validators shown (with their Nominators - small polkadot icon, below the Validator node) on the right the nodes waiting to enter the party room.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As mentioned above, the listed Intention nodes may get a chance to get an official Validator at the end of an
       &lt;span style="font-weight: bold;"&gt;era&lt;/span&gt;.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div&gt;
        An era is defined as the time required to create and seal 720 blocks on the relay-chain. A new block is created, processed and verified around every 5 seconds. I.e. that means an era lasts for around an hour.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As the white paper describes:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;We imagine validators be elected, infrequently (at most once per day but perhaps as seldom as once per quarter), through a Nominated Proof-of-Stake (NPoS) scheme.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For the test environment, the selection process is happening around every hour. The Header information of the Staking GUI, gives some basic information, among other the actual time slot in an era cycle.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As one can see on the header information, there are 22 slots for Validators available and there are  6 validators (22+6=28) waiting on the intentions list. The time passed in an era is slot 653 of the total of 720. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The session counter will express the number of block sealing left until the validator and its nominators are incentivized. In our example 7 block sealings (60-53) left until the next payout phase takes place.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7400a6963f6eece0c192f038c3ccfc34.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        After the end of an era, the eligible validator set will be newly calculated, by applying the following rule 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-weight: bold;"&gt;the 22 validators with the highest overall account balance will be the validators for the next era cycle.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The GUI will also show, the lowest validator node of the era with 1’099’715 DOTS and the highest intention node with 2’303’173 DOTS, which means in the next era, there will be a replacement happening (highest intention node will replace the lowest validator). 
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7c5937146b796352136de51afe3894c9.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Now checking my own account balance above (19’793) shows me that I’m way behind the highest intended node with an account balance of 2’303&amp;#39;173. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That means I have to reach out for Nominators, which will back me with their account balance. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So it’s time to describe the second role in the Polkadot ecosystem, the “Nominator”. Let’s use the white paper definition here:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;A nominator is a stake-holding party who contributes to the security bond of a validator. They have no additional role except to place risk capital and as such to signal that they trust a particular validator (or set thereof) to act responsibly in their maintenance of the network. They receive a pro-rata increase or reduction in their deposit according to the bond’s growth to which they contribute.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;Together with collators, nominators are in some sense similar to the miners of the present-day PoW networks.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        It’s important to realise, that a nominator will get either an increase (in case you behave in line with the rules) or a decrease (in case you misbehave and get slashed) of its deposit put on you. So its risk capital in his context, dependent on your misbehavior various level of slashing is foreseen (which affects directly you, as well as indirectly the nominators), as the white paper states:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;Some cases of misbehavior threaten the network’s integrity (such as signing invalid parachain blocks and validating multiple sides of a fork) and as such result in effective exile through the total reduction of the bond. In other, less serious cases (e.g. inactivity in the consensus process) or cases where blame cannot be precisely allotted (being part of an ineffective group), a small portion of the bond may instead be fined.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        It’s clear that a nominator is keen on supporting validators who stick with the rules.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 14px;"&gt;&lt;span style="font-size: 14px; font-weight: bold;"&gt;Reach out to a nominator&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So you have to reach out to nominators which are willing to add an increase of your security bond in order to get a chance to get nominated. Potentially you are already in contact with some members via the riot
       &lt;a href="https://riot.im/app/#/room/%23polkadot-watercooler:matrix.org"&gt;polkadot watercooler&lt;/a&gt; or
       &lt;a href="https://riot.im/app/#/room/%23polkadotnoobs:matrix.org"&gt;polkadot beginners lounge&lt;/a&gt; chat. Contact them: 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/4d4fc153bef5cf5772492256fb2f5d99.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Entering as Validator &lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As soon enough Nominators support you, i.e. you are under the 22nd Validators with the highest overall balance, you will be part of the official validator set, which can earn DOTS for sealing new blocks. The log entries will now look like:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;b style="font-size: 14px;"&gt;&lt;br&gt;&lt;/b&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 13px; color: rgb(78, 78, 78); font-family: monospace;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/0b60b3bda8e98597892dbf9872091956.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You are now an official Polkadot validator which takes part in PoS consensus process.You will find your validator now on the left side of the Staking page:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/141d95111741fe9e741a021a1e02dd40.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As you can see here, my account is backed by a nominator which adds 2’226’461 dots.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/821fcfdbd1ea601b09a7dad5e2a0957d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That’s it for today. In the next article, we will address some reliability and security topics of your node.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Stay tuned &amp;hellip;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Polkadot Hello World #1: Cost-Effective Cloud Deployment of a Validator Node</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/10/04/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node.html"/>
    <id>https://dev.cloudburo.net/2018/10/04/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node.html</id>
    <published>2018-10-04T05:03:04+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;span style="font-style: italic;"&gt;This tutorial is based on Polkadot POC2. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The following article series “Polkadot Hello World&amp;quot; describes the steps and findings during my personal kickoff phase in the area of the Polkadot multi-chain framework.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In the last months, I was extensively researching projects in the area of blockchain and crypto with the goal to find a challenging visionary project, which allows me to build up know how and experience in this topic. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The project should be in the early inception phase in order to allow me to collect valuable insights about the evolvement of such an open source decentralized Web project (also known as Web 3).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        I’m a strong believer that the decentralized Web - driven amongst others by the various Blockchain and Crypto innovations - will be the next big thing. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You know I’m an IT veteran, which was starting programming with the  ZX81 back in 1981 (in Basic), moved forward with Pascal, Modula, Oberon to Java JDK 1.0 (1996), followed by Perl, TCL, Groovy, Javascript and a multitude of other languages and landed now for the next year(s) with Rust (which is a safe, concurrent system programming language, ideally for crypto and blockchain work). 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/0d76bc24d108c999a74a3c022626d095.jpeg'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So I have seen in the last three decades several phases and tectonic shifts of the internet, which started initially purely in a decentralized manner (in the 70’ies with the ARPANET) and shifted to a heavy centralized internet nowadays.&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/89e21d9d8731b78912ef5b80d50b051b.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        There is a big shift in front of us, or as Josh Stark, states in his Medium Article “
       &lt;a href="https://medium.com/l4-media/making-sense-of-web-3-c1a9e74dcae"&gt;Making Sense of Web 3&lt;/a&gt;”:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;Over the last decade internet-based services have trended towards centralization. Today, a handful of companies control the platforms we use to search for information, store our personal data, manage our online identities, and communicate publicly and privately.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;At the same time, a group of seemingly unrelated technologies are being developed on the fringes of the tech industry, ranging from encrypted messaging to digital money. Within that loose community, “web 3” has become a catchall term for a vision of a new, better internet. An internet where payments and money are natively digital, where “decentralized” applications compete with centralized ones, and where users have more control over their identity and data.&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        One of the most innovative and interesting projects in this area is Polkadot.  Polkadot has the vision for a heterogeneous multi-chain framework, which connects blockchains and enables applications and smart contracts on one blockchain to seamlessly transact data and assets on other chains. You can find a good overview of the
       &lt;a href="https://github.com/w3f/polkadot-light-paper/blob/master/Polkadot-lightpaper.pdf"&gt;Polkadot Light Paper&lt;/a&gt;. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Behind the Polkadot Framework stands Dr Gavin Wood, who is one of the founders of Ethereum, as well as Partiy. Parity is the company behind Polkadot and its roadmap foresees a going live date around Q3/2019 (DOT-token sales phase). So enough time to  ramp up know how and watch how the product evolves and solves the challenges laid out in the white paper.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        I have to say it requires quite some reading to get an initial basic understanding of the framework, but there is enough documentation material available as well as a vibrant community on
       &lt;a href="https://riot.im/app/#/room/%23polkadotnoobs:matrix.org"&gt;riot&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Let’s get started then&lt;/span&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The first exercise I did, was the deployment of a Polkadot Verification Node  as a dockerized cloud instance. I call it the “Hello World of the Polkadot Framework”. It’s quite straightforward and results  - after some hours of syncing of the existing 1.5 million blocks -  in a connected and synchronised Validator Node on the Polkadot “Krumme Lenke Test Network” (which is reflecting the POC-2 state of the project).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        On the below screenshot, you see my node “clb-polkadancer” which is connected with 24 peers and processes around every five seconds a new block and adds it to its local blockchain (
       &lt;a href="https://telemetry.polkadot.io/"&gt;telemetry user interface&lt;/a&gt;) 
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/a34c370aa72087a8ee92da6ebaf299b9.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Be aware that the article covers the instantiating of the Polkadot Validator Node on Docker. To convert it to a fully trusted Polkadot validator node - which participates actively in the Proof of Stake (POS) consensus process -  requires additional steps and will be covered in another blog article.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The Validator is one of the four basic roles which upkeeps a Polkadot network. The other three roles are
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Collator
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Nominator
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Fishermen
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Gavin Wood, depicts in his white paper the 4 roles and its interactions, as follows:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/77d655e48624d9f77c7900ba4998195d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        I will not go into the details here about the various role (refer to the
       &lt;a href="https://polkadot.network/PolkaDotPaper.pdf"&gt;white paper&lt;/a&gt;) but just provide the Validator definition out of the white paper.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;A validator is the highest charge and helps seal new blocks on the Polkadot network. The validator’s role is contingent upon a sufficiently high bond being deposited, though we allow other bonded parties to nominate one or more validators to act for them and as such, some portion of the validator’s bond may not necessarily be owned by the validator itself but rather by these nominators.&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So what is his primary task then? 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;A validator must run a relay-chain client implementation with high availability and bandwidth. At each block the node must be ready to accept the role of ratifying a new block on a nominated parachain. This process involves receiving, validating and republishing candidate blocks”.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Ok, there are two new concepts introduced “relay-chain” and “parachain”, which may be new for you and are core concepts within Polkadot. Let’s try to explain them quickly not going too much into the detail by using the summary of the white paper:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;quot;Polkadot is a scalable heterogeneous multi-chain. This means that unlike previous blockchain implementations which have focused on providing a single chain of varying degrees of generality over potential applications, Polkadot itself is designed to provide no inherent application functionality at all. Rather, Polkadot provides the bedrock “&lt;/span&gt;
       &lt;span style="font-style: italic; font-weight: bold;"&gt;relay-chain&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;” upon which a large number of validatable, globally-coherent dynamic data-structures may be hosted side-by-side. We call these data-structures “parallelised” chains or &lt;/span&gt;
       &lt;span style="font-style: italic; font-weight: bold;"&gt;parachains&lt;/span&gt;
       &lt;span style="font-style: italic;"&gt;, though there is no specific need for them to be blockchain in nature.&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Got it? So our Validator Node is part of the relay-chain and receives blocks and - in case the blocks belong to our managed parachain - will seal them in its fully synchronized parachain database. If the block belongs to a parachain which isn&amp;rsquo;t in our scope, then 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;… it is expected that the validator will nominate the task of devising a suggested new parachain block to a third-party, known as a collator.”&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt; 
       &lt;img class='article  img-thumbnail' src='/images/cd1e6b78b2615912de40621969441873.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let’s get now a “highest charge” Polkadot role node up and running. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Just one last comment, highest charge has some stringent non-functional requirements: 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;A validator must run a relay-chain client implementation with &lt;span style="font-style: italic; font-weight: bold; text-decoration: underline;"&gt;high availability and bandwidth&lt;/span&gt;&lt;/span&gt;
       &lt;span style="font-style: italic; font-weight: bold; text-decoration: underline;"&gt;”&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So in case you want to get nominated as approved Validator you must ensure that you run the node in a 7x24 fashion in order to stay in sync with the evolvement of your global parachain. Otherwise, the fishermen will detect this bad behaviour and punish you and potentially kicks you out of the consensus validator role.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As one can see below,  around every 5 seconds a new block is processed with a propagation time of 502 ms. Your node has to be ready to process and propagate such requests in a timely fashion.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/e6dc4a80ef577930a2f139b4fbbced1b.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Running a validator on your personal laptop or desktop may not be a good idea, so a Cloud-managed Validator Node is the way to go.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Finding a suitable Cloud-Provider&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In the recent years, I was testing out and using various Cloud Providers (AWS, Google …) in order to run my side-project micro business, which is offering a subscription-based product called “Cloudburo Publishing Bot”. The solution allows you to manage your website(s) directly out of Evernote. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;As a side-note: For example this article was initially written completely in Evernote and published directly to my &lt;/span&gt;
       &lt;a href="https://dev.cloudburo.net/2018/10/04/polkadot-hello-world-1-cost-effective-cloud-deployment-of-a-validator-node.html" style="font-style: italic;"&gt;website&lt;/a&gt;
       &lt;span style="font-style: italic;"&gt;. If you are interested in such an blogging approach, head over to my &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-style: italic;"&gt;PublishingBot&lt;/a&gt;
       &lt;span style="font-style: italic;"&gt; site and get a free basic registration.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So having invested quite heavily in AWS Elastic Beanstalk I switched over recently to the 
       &lt;a href="https://jelastic.com/"&gt;Jelastic Platform-as-a-Service &lt;/a&gt;platform, which provides an excellent Pay-as-you-use pricing model, ideally for micro business requirements (I could reduce my monthly costs substantially).
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Another aspect which is really striking with Jelastic is, that there is zero service provider lock-in! 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;Jelastic PaaS offering is available across 60+ data centers in 30 countries worldwide. The infrastructure and local support are provided by the proven hosting partners listed in Cloud Union. Users can host their applications within hardware regions of a single provider or across multiple using the same technology&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As for example, in my case, I’m running my Jelastic PaaS with a local Swiss vendor (
       &lt;a href="https://hidora.com/"&gt;Hidora - Flex Swiss Cloud&lt;/a&gt;) in a data center in the Swiss Jurisdiction (no US tampering), but have the freedom to move my instances to any Service provider world-wide to data centres which may be under control of local service providers and not controlled by a centralized enterprise.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/ff445b2c5dc25f83df21320c1f932b7e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Cloudlets the base for the Pay-as-you-use pricing model&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Jelastic PaaS prices are flexible and scalable. They are based on actual consumption so your bill reflects exactly what you use per hour.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This pricing model is based on resource units called “cloudlets”. Each cloudlet accounts for 400 MHz of processor speed and 128 MB of RAM.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 12px; color: rgb(84, 84, 84); font-family: arial;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/c78ee616e7203bdae97255652a05bf31.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Jelastic PaaS offers you two types of cloudlets:
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Reserved Cloudlets – a type of cloudlets that allows to get significant automatic discount rates. A number of resources you reserve beforehand and pay for it whether you spent all resources or not.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Dynamic Cloudlets – a type of cloudlets that allows you to pay based on your actual resource usage. Set your maximum resource consumption and the Dynamic cloudlets will add and remove automatically depending on your site load.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So after deployment of an application, you have to do some fine-tuning in the context of the reserved cloudlets in order to get an optimal prize. This can be easily done via the Dashboard in real-time without restarting any instance.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As we see later, it allows you to tune the cloudlets in real-time and check if there is an impact on your node block propagation time in the Polkadot Net. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Preparing a Validator Dockerfile&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        All my cloud projects (be it a Java based Bot or a Meteor Node.js based frontend) I run in a Docker container. This allowed me to standardise and automate the deployment and runtime configuration and tuning. So it was clear for me to deploy the validator node in a Docker image as well.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Polkadot already provides its own Docker Image “
       &lt;a href="https://hub.docker.com/r/chevdor/polkadot/"&gt;chevdor/polkadot&lt;/a&gt;”, which is based on the &amp;ldquo;phusion/baseimage:0.10.1” which maps to the newest Ubuntu release 18.04.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Unfortunately,  Jelastic PaaS is not Ubuntu 18.04 ready, so I changed the Dockerfile to be based on Ubuntu release 16.04 and made it available via Docker Hub under the name “
       &lt;a href="https://hub.docker.com/r/talfco/clb-polkadot/"&gt;talfco/clb-polkadot&lt;/a&gt;&amp;rdquo;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Configuring the Validator Docker Instance&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Within the Hidora PaaS I created a new Docker Environment “polkadotDocker” and loaded my  clb-polkadot Docker image from Docker Hub.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The initial instance configuration for the resynchronization phase was 4-5 cloudlets, which gets translated to a CPU between 1.6 GHz - 2.0 GHz with 512 MB to 640 MB.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 12px; color: rgb(51, 51, 51); font-family: Monaco;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/e15d3f04ae779f8bdd032dc06e821a4f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt;I configured the Polkadot database directory to be persisted on the servers local file system, in order not to lose our full parachain db after a re-deployment of a new docker image.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/9057789db66dfab2ca987c58bfeb7c36.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt;Finally,I added &lt;/span&gt;
       &lt;span style="caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51);"&gt;—&lt;/span&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt;name ‘clb-polkadancer’ parameter to the entry point.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/7705796c96d9f27c5501e69b7cd44dea.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;; font-weight: bold;"&gt;Running your Node&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;That&lt;/span&gt;
       &lt;span style="caret-color: rgb(51, 51, 51); color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;’&lt;/span&gt;
       &lt;span style="color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;s it. I started the instance, the log file will show the progress of the Syncing.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/4e291f394700167a3968a8687e942fee.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;Head over to the &lt;/span&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt;&lt;a href="https://telemetry.polkadot.io/"&gt;&lt;a href="https://telemetry.polkadot.io/"&gt;https://telemetry.polkadot.io/&lt;/a&gt;&lt;/a&gt; where you should see your Validator instance and the syncing progress as well.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/d2489b7f87a11cc56cf6146530818522.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; color: rgb(51, 51, 51); font-weight: bold;"&gt;Building up a copy of the parachain DB&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(51, 51, 51);"&gt;As a first step, the Validator node has to build up the complete parachain db on your local node.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px; color: rgb(51, 51, 51); font-family: &amp;quot;Helvetica Neue&amp;quot;;"&gt;As one can see in the below screenshot the chain build phase - which got finished around 14:30 -  was using all CPU. After completion, the CPU usage was reduced to 200-250 MHz. To build up the full parachain of around 5 million blocks 6 hours of processing was required.  Overall disk consumption is around 5 GB.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/74915a2514f74ca1d8c45dd6232aab40.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having loaded the full parachain it’s time to reconfigure the instance. The first instance configuration tested out consisted of  2 cloudlets which get translated into 256 MB RAM and a CPU of 800 MHz.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/448285659fb1865b73115233fa3701f4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Fine Tuning the Cloudlets&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        An assessment of the runtime statistics showed, that upper RAM limit (which is for 2 cloudlets  256 MB) of our node is always topped, which results in additional dynamic cloudlet charges, which is suboptimal.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/66c0f9f99db4e12aeee1099318709ce9.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let’s re-adjust our instance to 3 cloudlets, which results in a&lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;384 MB RAM &lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;1.2 GHz CPU &lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;(10 GB of Disk)&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c41c76786b61f518c8d48d7459dae28e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As one can see in the above dashboard with 3 cloudlets configured for an instance, we can keep CPU, RAM, Network, Disk and IOPS below the upper limit. So this is the ideal configuration to run a Polkadot Validator Node.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A special look has to be taken for the Network traffic. The Validator is quite a bandwidth hungry process, you have to expect a network bandwidth of around 100-300 MB/min.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font face="Helvetica Neue" style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-family: &amp;quot;Helvetica Neue&amp;quot;; font-weight: bold;"&gt;So what’s price to run a Validator Node 7x24 ?&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;An instance with 3 reserved Cloudlets, results in 24x3 = 72 Cloudlets per day which is charged with 0.22 CHF  (around 0.20 USD). There is no Paid Traffic charges, because 1.4 TB/per month is free, which is more than enough to cover the bandwidth of the node.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 14px;"&gt;&lt;br&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;As one can also see, there is an additional charge of 0.20 CHF per day for a Public IP4 address. This one is required due to the fact that we have to open port 30333 for public access, which requires that the instance has a public IP address as well. &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/a293e5ba0319a79f191615994ab65874.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Don’t forget: Opening the port &lt;/span&gt;&lt;/span&gt;
       &lt;span style=" font-size: 18px; color: rgb(69, 69, 69); font-family: &amp;quot;Open Sans&amp;quot;, Arial, Helvetica, sans-serif; font-weight: bold;"&gt;30333&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style=""&gt;&lt;span style="font-size: 14px; color: rgb(69, 69, 69); font-family: &amp;quot;Open Sans&amp;quot;, Arial, Helvetica, sans-serif;"&gt;As one can see on this screenshot, certain nodes have only connections with half of the peers (24). My node was also showing that behaviour in the beginning as well. &lt;/span&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="color: rgb(69, 69, 69); font-family: &amp;quot;Open Sans&amp;quot;;"&gt; 
       &lt;img class='article  img-thumbnail' src='/images/1801f6a1c8c7b59ed73c2254d14c7be7.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; &lt;br&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        With the help of the Polkadot Beginner Lounge on Riot I could quickly solve this problem. My Docker Instance was exposing some general purpose ports, but not 30333 used by the Polkadot Validator.
      &lt;/div&gt;
      &lt;div&gt;
        In the context of my PaaS, it was necessary to associate a Public IP with my node to open the port, which results in the above 0.20 CHF per day.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/8f1283012855cfe8e475e84a468b748c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        All in all, a full Validator is charged 0.42 CHF per day, which results in monthly costs of around the price of 2 Starbuck coffees in Switzerland or 3 in Tokyo. So dependent on your global location you have to adjust your coffee consumption slightly that you can run your own Polkadot Validator node.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/12779f4e857876e39cc302f1bbfaf832.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        That’s it for today, in the next article we will transform our Polkadot Validator in an 
       &lt;span style="text-decoration: underline;"&gt;official&lt;/span&gt; Validator which will take part in the Proof of Stake (POS) consensus process.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Stay tuned … 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net/" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The Cloud Landscape Categorization Framework By Johan Den Haan</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/09/03/the-cloud-landscape-categorization-framework-by-johan-den-haan.html"/>
    <id>https://dev.cloudburo.net/2018/09/03/the-cloud-landscape-categorization-framework-by-johan-den-haan.html</id>
    <published>2018-09-03T17:18:13+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Johan Den Hann published some time ago, its
       &lt;a href="http://www.theenterprisearchitect.eu/blog/categorize-compare-cloud-vendors/#framework" style="font-weight: bold;"&gt;Cloud Landscape Categorization Framework&lt;/a&gt;, which is really helpful in order to get a better understanding of the Cloud Landscape. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/01e9209da68ed1e1b2fc93539b6fd205.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        It consists of 7 layers and 3 main columns.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As Johan states there is a continuum from hardware to SaaS. He created these 7 layers to help categorize vendors and services in meaningful way.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The 3 main columns: compute, communicate and store are well-known distinction used on the infrastructure layer. As Johan states
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;The nice thing is that it also works well on the software layers. If we look at software, and especially the object-oriented paradigm, we can make a distinction between the 3 main aspects of software: state, behavior, and messages (or data, methods, and messages, if you will). This beautifully aligns with the previous distinction between storage (vs. state), compute (vs. behavior), and networking (vs. messages).&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;Even for us humans we can distinguish these 3 aspects of operating with data: we store data (e.g. memorizing it, writing it down), we process data (e.g. combine, compute), and we communicate data (e.g. speak, write).&amp;rdquo;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Each cell is well documented on the site and there is a cool feature to overlay the framework with various cloud offerings. It allows you to quickly get an impression which vendor is offering, what kind of solution.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        For example Amazon Web Services
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/d7c1c9bdbd77eb7028b2386330730e13.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Or Cloud-Foundry
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/cda6f51bf1bcb0eae7c43bb5031b11a3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Read more at:
       &lt;a href="http://www.theenterprisearchitect.eu/blog/categorize-compare-cloud-vendors/#framework"&gt; &lt;a href="http://www.theenterprisearchitect.eu/blog/categorize-compare-cloud-vendors/#framework"&gt;http://www.theenterprisearchitect.eu/blog/categorize-compare-cloud-vendors/#framework&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>DevOp Notes: Monitoring Nginx and its underlying Web Components</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/09/01/devop-notes-monitoring-nginx-and-its-underlying-web-components.html"/>
    <id>https://dev.cloudburo.net/2018/09/01/devop-notes-monitoring-nginx-and-its-underlying-web-components.html</id>
    <published>2018-09-01T11:18:41+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
    Under the acronym “DevOps Notes” I publish my technical findings, which were gathered during the bootstrapping phase of my first cloud based side-project, the so-called “
   &lt;a href="https://publishingbot.cloudburo.net/"&gt;Cloudburo Publishing Bot&lt;/a&gt;”.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;“The Cloudburo Publishing Bot Platform enables Micropreneurs, Small and Medium Enterprises (SME), as well as enthusiastic blogging hobbyists to establish a Content Marketing Presence with minimal effort which is centered around Evernote.” &lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    You can find a description of the Evernote based blogging solution in the following Medium Article:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;a href="https://medium.com/@talfco/how-to-manage-an-online-or-news-blog-directly-out-of-evernote-65bd0833f8cb"&gt;How to Manage an Online or News Blog directly out of Evernote&lt;/a&gt;.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    So let’s move on to the tech note:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    An essential component within the Publishing Bot platform is “
   &lt;a href="https://www.nginx.com/"&gt;nginx&lt;/a&gt;”, the well-known high performance Webserver.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The main task of the Publishing Bot is to extract a user’s Evernote Blog Article and convert it into a static blog website (based on the brilliant static Website Framework
   &lt;a href="https://middlemanapp.com/"&gt;MiddleMan&lt;/a&gt;). 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Each blog site managed by the Publishing Bot will be automatically configured into the Nginx instance running on the Publishing Bot Instance. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Until recently I used a very basic monitoring of my docker instance until I got aware of Amplify, which offers a brilliant free monitoring solution (
   &lt;a href="https://amplify.nginx.com/"&gt;&lt;a href="https://amplify.nginx.com"&gt;https://amplify.nginx.com&lt;/a&gt;&lt;/a&gt;)
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-style: italic;"&gt;Amplify is a free, modern, low barrier monitoring tool. It comes directly from the company behind NGINX. With the focus on NGINX and the underlying web site components, Amplify will make your web site more reliable and predictable.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    What you have to do, is to create an account at their site and follow the configuration steps instructions, which are straightforward.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    For example do enable the monitoring in my Publishing Bot Docker instance (with its configured nginx instance), the only thing I had to do, is to add the following line to the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;Dockerfile&lt;/span&gt;:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  # Install Nginx Amplify Monitor 
  RUN curl -L -O https://github.com/nginxinc/nginx-amplify-agent/raw/master/packages/install.sh \ 
      &amp;amp;&amp;amp; API_KEY=‘xxxx15x0e610xxxxaa80axxead' sh ./install.sh 
  ADD nginx-conf /etc/nginx/conf.d 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    The
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;ADD&lt;/span&gt; command will copy the following file into the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;conf.d&lt;/span&gt; directory
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  server { 
      listen 127.0.0.1:80; 
      server_name 127.0.0.1; 
      location /nginx_status { 
          stub_status on; 
          allow 127.0.0.1; 
          deny all; 
      } 
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Within minutes the Amplify Dashboard gets filled with useful monitoring data.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Some examples:
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-weight: bold;"&gt;Main Dashboard&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/2e14647648ae9c53ea7c3df9283ff73c.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A Multitude of
       &lt;span style="font-weight: bold;"&gt; Graphs &lt;/span&gt;are offered
       &lt;span style="font-weight: bold;"&gt;:&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/7a198fd219b492fad3aad1493731a726.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The
       &lt;span style="font-weight: bold;"&gt;Analyzer &lt;/span&gt;allows you to check the overall configuration, as well as various analysis tasks are offered.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/8062b4c5e135776721b1fb33df6e302f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The
       &lt;span style="font-weight: bold;"&gt;Config analysis&lt;/span&gt; checks for errors and provides as well recommendations to improve your overall Nginx configuration
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/4284ad9c4f0b755b2d5bef0d55c2bbc5.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/ab67c19aaf2e4d6c8ebdfe391729f341.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Finally you can define
       &lt;span style="font-weight: bold;"&gt;Alerts, &lt;/span&gt;which will inform you via Email in case of problems.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/a6468a875419630289723cb371a8ad6a.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/508f3f4bbc96fc5690d60b3a726f4b46.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A incredible useful tool to monitor your Nginx hosted website, what do you need more ?
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Google Data Collection Research Madness</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/08/23/google-data-collection-research-madness.html"/>
    <id>https://dev.cloudburo.net/2018/08/23/google-data-collection-research-madness.html</id>
    <published>2018-08-23T21:24:11+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Digital Content Next (DCN) - which is providing research and insights on current and emerging industry topics - released a very interesting report about Google’s data collection research by professor Douglas C. Schmidt of the Vanderbilt University.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Some interesting findings out of the report:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          A dormant, stationary Android phone (with the Chrome browser active in the background) communicated location information to Google 340 times during a 24-hour period, or at an average of 14 data communications per hour. In fact, location information constituted 35 percent of all the data samples sent to Google.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          For comparison’s sake, a similar experiment found that on an iOS device with Safari but not Chrome, Google could not collect any appreciable data unless a user was interacting with the device. Moreover, an idle Android phone running the Chrome browser sends back to Google nearly fifty times as many data requests per hour as an idle iOS phone running Safari.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Major part of Google’s data collection occurs while a user is not directly engaged with any of its products. The magnitude of such collection is significant, especially on Android mobile devices, arguably the most popular personal accessory now carried 24/7 by more than 2 billion people.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Well that’s tells something about Google’s USP, I’m not sure if this is really what an end-user expects.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can find the full report
       &lt;a href="https://digitalcontentnext.org/blog/2018/08/21/google-data-collection-research/"&gt;here&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>What a brilliant idea: Proof of usefulness in Crypto</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/08/21/what-a-brilliant-idea-proof-of-usefulness-in-crypto.html"/>
    <id>https://dev.cloudburo.net/2018/08/21/what-a-brilliant-idea-proof-of-usefulness-in-crypto.html</id>
    <published>2018-08-21T20:02:28+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;a href="https://hackernoon.com/@david.gilbertson"&gt;David Glibertson&lt;/a&gt;, describes in his excellent Medium Series “
       &lt;a href="https://hackernoon.com/crypto-traders-diary/home"&gt;My adventures in Crypto&lt;/a&gt;”  an new visionary idea how the mining energy wasting could be converted in some useful energy consumption by solving real world puzzles. What a nice idea, here the excerpt of his idea. You can find the whole article
       &lt;a href="https://hackernoon.com/ripple-not-a-cryptocurrency-afc5e9248c4c"&gt;here&lt;/a&gt;. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;One of Bitcoin’s biggest downsides is the fact that it uses — some might say ‘wastes’ — an enormous amount of electricity.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;So I’ve been wondering, what if you could take the proof-of-work mechanism — with thousands upon thousands of processing machines doing work that is ultimately discarded — and somehow get it to do some useful work.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Have you have heard of Folding@home?&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;“Folding@home is a project focused on disease research. The problems we’re solving require so many computer calculations — and we need your help to find the cures”.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Now you’ve heard of &lt;a href="mailto:Folding@home"&gt;Folding@home&lt;/a&gt;.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Doesn’t it seem wrong to you that on one hand there is a need for computing power that will ultimately save lives, and on the other hand there is a mass of computing power being ‘wasted’ to secure a cryptocurrency?&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;How hard could it be to combine the two?&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Maybe it’s possible to break down the protein folding work that Folding@home does into chunks that take a predictable amount of time (e.g. 10 minutes). &lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;If you automate that process of building 10-minute chunks of work, then you could have a difficultly adjustment just like there currently is.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Maybe that’s not possible — to get the timing reliable enough — so perhaps you could have something in the consensus mechanism like: You must earn the right to mine a block by solving a protein folding problem.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Your overall chances of mining a block in a given day would stay the same, since everyone must follow the same rule. The protein folding might take 2 minutes or an hour, it wouldn’t matter in the long run provided the work is evenly distributed.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Maybe it just isn’t possible to break down protein-folding work. But maybe it is possible for SETI work, or something else I haven’t heard of.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Lastly, you’d need a way to submit work to the network, perhaps to be voted on by nodes. Since you probably don’t want to be instrumental in cracking passwords, you might require proof of who the person is. So a proposal to submit proof-of-usefulness puzzles to the network might take the form: “we are Folding@home and our signed proof is at &lt;a href="https://foldingathome.org/pou-proof-key.%E2%80%9D%E2%80%8A%E2%80%94%E2%80%8Athey"&gt;https://foldingathome.org/pou-proof-key.” — they&lt;/a&gt; then have a licence to publish puzzles for 1 month, or something like that.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Details details.&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;Anyway, that’s just some thoughts that have been rattling around in my skull. I’m sure this has already been discussed in great detail somewhere.&lt;/i&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Scalability Trilemma Of A Blockchain or There Is No Free Lunch</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/08/12/scalability-trilemma-of-a-blockchain-or-there-is-no-free-lunch.html"/>
    <id>https://dev.cloudburo.net/2018/08/12/scalability-trilemma-of-a-blockchain-or-there-is-no-free-lunch.html</id>
    <published>2018-08-12T21:18:38+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Scalability and the slowness of Blockchains is a hot topic in the crypto community. Georgio Konstantopoulos (@LoomNetwork) provides a very good introduction to the topic in his Medium artice &amp;ldquo;
       &lt;a href="https://medium.com/loom-network/scalability-tradeoffs-why-the-ethereum-killer-hasnt-arrived-yet-8f60a88e46c0"&gt;Scalability Tradeoffs:  “Why The Ethereum Killer” Hasn’t Arrived Yet&lt;/a&gt;
       &lt;a href="https://medium.com/loom-network/scalability-tradeoffs-why-the-ethereum-killer-hasnt-arrived-yet-8f60a88e46c0"&gt;”&lt;/a&gt;. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As the title state it, it’s a tradeoff of three system properties, which are influencing the scalability of a Blockchain system. Vitalik Buterin, describes that this Scalability Trilemma as follows
       &lt;a href="https://medium.com/loom-network/scalability-tradeoffs-why-the-ethereum-killer-hasnt-arrived-yet-8f60a88e46c0"&gt;here&lt;/a&gt;:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&amp;quot;This sounds like there’s some kind of scalability trilemma at play. What is this trilemma and can we break through it?&lt;/i&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;The trilemma claims that blockchain systems can only at most have two of the following three properties:&lt;/i&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;i&gt;Decentralization (defined as the system being able to run in a scenario where each participant only has access to O&amp;copy; resources, i.e. a regular laptop or small VPS)&lt;/i&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;i&gt;Scalability (defined as being able to process O(n) &amp;gt; O&amp;copy; transactions)&lt;/i&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;i&gt;Security (defined as being secure against attackers with up to O(n) resources)&amp;rdquo;&lt;/i&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So what it expresses is the fact, that in case you want to get higher scalability in a blockchain system you have to sacrifice Security or Decentralisation.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As Georgio states in the article 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&amp;ldquo;Α blockchain that claims to have solved the trilemma has either bent the laws of physics (highly unlikely), or it has discovered a breakthrough method that solves the major blockchain scalability problems that have stumped top mathematicians and computer scientists for the past decade”&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;i&gt;&lt;br&gt;&lt;/i&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The article provides various examples (e.g. Ripple’s XRP) which gain scalability by going in a (semi-) centralized direction.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can read the full article
       &lt;a href="https://medium.com/loom-network/scalability-tradeoffs-why-the-ethereum-killer-hasnt-arrived-yet-8f60a88e46c0"&gt;here&lt;/a&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Google Reveals the Secrets of DevOps</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/07/19/google-reveals-the-secrets-of-devops.html"/>
    <id>https://dev.cloudburo.net/2018/07/19/google-reveals-the-secrets-of-devops.html</id>
    <published>2018-07-19T06:19:59+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      A interesting article about Google&amp;rsquo;s DevOps approach, which is immense. &lt;br/&gt;
    The numbers revealed by Meckfessel at the conference showed that over 500 million tests are run per day inside Google’s systems. That’s to accommodate over 4 million builds, daily. Why so many builds? Because Google’s Bazel build system allows for near-instant build processes, ensuring developers can quickly gain the feedback they need from their code.&lt;br/&gt;
    One of the more interesting and compelling aspects of the Google development philosophy is the idea of blameless post-mortems. When a problem occurs and is resolved, the chief goal of the Google development teams is to find a way to solve the problem with tools or processes, rather than finding a way to assign blame. Ramji referenced Toyota’s techniques which were the inspiration: an error is the fault of the process, not necessarily of the person who created the error itself.&lt;br/&gt;
    You can read the full article here:&lt;br/&gt;
    &lt;a href="https://thenewstack.io/google-reveals-the-secrets-of-devops/"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Minimal Ubuntu, on Docker Hub</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/07/18/minimal-ubuntu-on-docker-hub.html"/>
    <id>https://dev.cloudburo.net/2018/07/18/minimal-ubuntu-on-docker-hub.html</id>
    <published>2018-07-18T06:24:33+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      Ubuntu announced its new minimal Ubuntu image optimized for automated use at scale, with a tiny package set and minimal security cross-section. Speed, performance and stability are primary concerns for cloud developers and ops.&lt;br/&gt;
    The 29MB Docker image for Minimal Ubuntu 18.04 LTS serves as a highly efficient container starting point, and allows developers to deploy multicloud containerized applications faster.&lt;br/&gt;
    &lt;br/&gt;
    Minimal Ubuntu is designed for completely automated operations, with none of the usual human-friendly utilities for comfortable interactive usage. Editors, documentation, locales and other user-oriented features of Ubuntu Server have been removed. What remains are only the vital components of the boot sequence.  Images still contain ssh, apt and snapd so you can connect and install any package you’re missing.&lt;br/&gt;
    &lt;br/&gt;
    Launching a Docker  instance with docker run ubuntu:18.04  therefore launches a Docker instance with the latest Minimal Ubuntu.&lt;br/&gt;
    You can read the announcement of Ubuntu here.&lt;br/&gt;
    &lt;a href="https://blog.ubuntu.com/2018/07/09/minimal-ubuntu-released?_ga=2.255476232.1469503375.1531890584-395539741.1531204380"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Intellij: Gradle Project Fails To Deploy Tomcat Server (war:exploded)</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/06/04/intellij-gradle-project-fails-to-deploy-tomcat-server-war-exploded.html"/>
    <id>https://dev.cloudburo.net/2018/06/04/intellij-gradle-project-fails-to-deploy-tomcat-server-war-exploded.html</id>
    <published>2018-06-04T20:10:14+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Recently I had a problem with the deployment of a IntellJ Gradle Project Artifact to a local Tomcat Server which didn’t work out. The root cause resolution took me some time, so here is the solution to reduce your researching time.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The local Tomcat Server was configured as follows with the deployment of the exploded WAR file, which is the preferred option(will easen debugging).&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/0d9dc1ba9e011da18a22003be283505f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/160511f32a54c0e0f0ebcb0a3071f355.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Running the build, didn’t result in the war exploded to be generated.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A check of the of the explodedWAR artifact and its output directory was correct.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/ec20d3590401b55babd6e9e01a489382.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Finally the following Stackoverflow Article gave the final hint
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://stackoverflow.com/questions/47078199/intellij-fails-deploying-exploded-war-to-tomcat"&gt;&lt;a href="https://stackoverflow.com/questions/47078199/intellij-fails-deploying-exploded-war-to-tomcat"&gt;https://stackoverflow.com/questions/47078199/intellij-fails-deploying-exploded-war-to-tomcat&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Under Gradle Preferences , you have to make sure you don&amp;rsquo;t have checked &amp;lsquo;Delegate IDE build/run actions to gradle’. After having unchecked it the exploded WAR artefact will be builded.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/bf3b19b799c97c2126d0ac39cda785ce.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Install  Letsencrypt  Certificate in the Java JDK Keystore on OSX</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/06/03/install-letsencrypt-certificate-in-the-java-jdk-keystore-on-osx.html"/>
    <id>https://dev.cloudburo.net/2018/06/03/install-letsencrypt-certificate-in-the-java-jdk-keystore-on-osx.html</id>
    <published>2018-06-03T12:26:22+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
    The following article gives a short introduction, how to import a root certificate into the Java JDK keystore on a Mac OSX. The example is based on the import of the
   &lt;a href="https://letsencrypt.org/certificates/"&gt;ISRG Root X1 certificate&lt;/a&gt;, which is a very new certificate and not broadly trusted yet. Actually they do a cross signing of their intermediate certificate with IdenTrust (which is already widely trusted) in order to relief this short-coming.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Anyway the import sequence may help you in case you want to install another certificate in a same way. 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Assumption is that we have SSLHandshake Exception due to the missing ISRG certificate. In my example a gradle build was failing due to missing certificate.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  Could not resolve all dependencies &lt;span class="k"&gt;for &lt;/span&gt;configuration &lt;span class="s1"&gt;':compileClasspath'&lt;/span&gt;. 
  &amp;gt; Could not resolve com.aspose:aspose-cells:17.9. 
    Required by: 
        project : &amp;gt; com.edorasware.one:edoras-one-starter:2.0.4 ... 
     &amp;gt; Could not resolve com.aspose:aspose-cells:17.9. 
        &amp;gt; Could not get resource &lt;span class="s1"&gt;' https://artifact.aspose.com/repo/com/aspose/aspose-cells/17.9/aspose-cells-17.9.pom'&lt;/span&gt;. 
           ... 
              &amp;gt; sun.security.validator.ValidatorException: PKIX path building failed:  


  sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    The certificate of the
   &lt;a href="http://aspose.com"&gt;&lt;a href="https://aspose.com"&gt;https://aspose.com&lt;/a&gt;&lt;/a&gt; repository is a Let’s Encrypt Authority X3, which is based on DST Root CA X3. You get the below window when you check the certificate of the site in the browser (Chrome screenshot)
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/983fa892a9ca8a1124351e1d82cffd92.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So we have to load the Let’s Encrypt certificates into the Java keystore&lt;br&gt;
       &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;cacerts&lt;/span&gt; on our machine, to make the certificate path accessible.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The whole signing setup is described here: 
       &lt;a href="https://letsencrypt.org/certificates/"&gt;&lt;a href="https://letsencrypt.org/certificates/"&gt;https://letsencrypt.org/certificates/&lt;/a&gt;&lt;/a&gt; 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/776235a84f4a1c13ad3cf52b4df21ba3.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-weight: bold;"&gt;Step 1: Set-up JAVA_HOME and install wget&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    First of all it’s advisable to set up the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;JAVA_HOME&lt;/span&gt; correctly on your Mac OSX machine, by using the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;java_home&lt;/span&gt; executable (
   &lt;a href="https://stackoverflow.com/questions/1348842/what-should-i-set-java-home-to-on-osx"&gt;Stackoverflow&lt;/a&gt;). Add the following to the .bash_profile 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/libexec/java_home&lt;span class="k"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    For running the import script we require
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;wget&lt;/span&gt;. Assuming you install OSX tools via
   &lt;a href="https://brew.sh/" style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;brew&lt;/a&gt;
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt; -&lt;/span&gt; the so-called missing package manager for the Mac - run the following command
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  brew install wget 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
   &lt;span style="font-weight: bold;"&gt;Step 2: Do some keystore checks&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    First of check if the ISRG certificate is already installed in your
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;keystore&lt;/span&gt;. The java JDK keystore can be found under the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;JAVA_HOME&lt;/span&gt; directory in the following folder 
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;jre/lib/security/cacerts&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  ~ felix&amp;gt; keytool -v -list -keystore &lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/jre/lib/security/cacerts | grep ISRG 
  Enter keystore password:  changeit 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;changeit&lt;/span&gt; is the default password of the Java JDK installation. Nothing will be given back. As for example looking for existing certificate (i.e. the in this example the cross signing certificate of Digital Signature Trust Co.), will be shown.  By storing the full output in a file, provides you with an overview of all installed certificates in your Java JDK keystore.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  ~ felix&amp;gt; keytool -v -list -keystore &lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/jre/lib/security/cacerts | grep DST 
  Enter keystore password:  changeit 
  Issuer: &lt;span class="nv"&gt;CN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DST Root CA X3, &lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Digital Signature Trust Co. 
       &lt;span class="o"&gt;[&lt;/span&gt;URIName: http://crl.identrust.com/DSTROOTCAX3CRL.crl] 
  Issuer: &lt;span class="nv"&gt;CN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DST Root CA X3, &lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Digital Signature Trust Co. 
       &lt;span class="o"&gt;[&lt;/span&gt;URIName: http://crl.identrust.com/DSTROOTCAX3CRL.crl] 
  Issuer: &lt;span class="nv"&gt;CN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DST Root CA X3, &lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Digital Signature Trust Co. 
       &lt;span class="o"&gt;[&lt;/span&gt;URIName: http://crl.identrust.com/DSTROOTCAX3CRL.crl] 
  Issuer: &lt;span class="nv"&gt;CN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DST Root CA X3, &lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Digital Signature Trust Co. 
       &lt;span class="o"&gt;[&lt;/span&gt;URIName: http://crl.identrust.com/DSTROOTCAX3CRL.crl] 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    As we have seen, the certificate is missing, so let’s run the following script 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-weight: bold;"&gt;Step 3: Run the import script&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    The script will fetch from the
   &lt;a href="http://letsencrypt.org"&gt;letsencrypt.org&lt;/a&gt; web site the certificate information via
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;wget&lt;/span&gt; and adds it to the 
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;cacerts&lt;/span&gt; keystore via the
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;keytool.&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    You can find the script here: 
   &lt;a href="https://gist.github.com/talfco/bf82709e0e2ee86ffef25dc38aad6844"&gt;&lt;a href="https://gist.github.com/talfco/bf82709e0e2ee86ffef25dc38aad6844"&gt;https://gist.github.com/talfco/bf82709e0e2ee86ffef25dc38aad6844&lt;/a&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/dec5f8f74d808230c2c66c152088b91f.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Run the script, which get all the necessary certificate artefacts  from the letsencrypt server and installs in your keystore. So script is based on the following
   &lt;a href="https://gist.github.com/Firefishy/109b0f1a90156f6c933a50fe40aa777e"&gt;implementation&lt;/a&gt; and described by
   &lt;a href="https://community.letsencrypt.org/t/ssl-certs-in-java/15450"&gt;letsencrypt&lt;/a&gt; here.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-weight: bold;"&gt;Step 4: Check the successful Import&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Run the list command once again, you will now get back result output
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
  ~ felix&amp;gt; keytool -v -list -keystore &lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/jre/lib/security/cacerts | grep ISRG 
  Enter keystore password:  changeit 
  Issuer: &lt;span class="nv"&gt;CN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ISRG Root X1, &lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Internet Security Research Group, &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;US 
  Issuer: &lt;span class="nv"&gt;CN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ISRG Root X1, &lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Internet Security Research Group, &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;US 
  Issuer: &lt;span class="nv"&gt;CN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ISRG Root X1, &lt;span class="nv"&gt;O&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Internet Security Research Group, &lt;span class="nv"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;US 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Retry you java application or build, which should now be executed.
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
   &lt;a href="https://publishingbot.cloudburo.net" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
   &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Tutorial: React Application with a Python JSON Backend (Part 1)</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/05/26/tutorial-react-application-with-a-python-json-backend-part-1.html"/>
    <id>https://dev.cloudburo.net/2018/05/26/tutorial-react-application-with-a-python-json-backend-part-1.html</id>
    <published>2018-05-26T23:16:16+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      &lt;div&gt;
        This tutorial gives a short introduction about the necessary preparation steps to get a Python Application Server ready which can serve a React Frontend via a  JSON interface.&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The first part describes, how to get the Python Server Side ready. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We assume that you have pyhton3 and the pip (Python Package Management System) on your machine ready. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;First install Flask &lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As a first step install flask
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c541197fb151a27bd9e8e3b8b6a6a139.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Write a quick hello world program and store it in the file
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;helloflask.py&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt; 


  &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


  &lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt; 


  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;

&lt;p&gt;&lt;div&gt;
    Run the programm  by 
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;python3 flaskhello.py&lt;/span&gt;  - which runs an flask app server on port 5000 - and open a browser on
   &lt;a href="http://localhost:5000/"&gt;&lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;&lt;/a&gt; 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/c15834e125d836373802a0556c92d3b4.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;font style="font-size: 18px;"&gt;&lt;span style="font-size: 18px; font-weight: bold;"&gt;Second install Flask API&lt;/span&gt;&lt;/font&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As a second step install the
       &lt;a href="http://www.flaskapi.org/"&gt;Flask-API&lt;/a&gt;, which is a drop-in replacement for Flask that provides an implementation of browsable APIs similar to what Django REST framework provides.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/a0fb2859e6c1414bc4f2eb22bf884c1f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;         &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Write a hello world now for the Flask API and store it 
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;flaskhello1.py&lt;/span&gt;
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
  &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FlaskAPI&lt;/span&gt; 


  &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FlaskAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


  &lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/example/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;
    Run the programm  by 
   &lt;span style="font-family: &amp;quot;Courier New&amp;quot;;"&gt;python3 flaskhello1.py&lt;/span&gt;  - which runs an flask app server on port 5000 - and open a browser on
   &lt;a href="http://localhost:5000/"&gt;&lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;&lt;/a&gt; 
  &lt;/div&gt;
  &lt;div&gt;
   &lt;br&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/632f16ac140c64b78d08280b7d3545ed.png'&gt;&lt;/p&gt;

  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        A renderer for the response data will be selected using content negotiation based on the client &amp;lsquo;Accept&amp;rsquo; header. If you&amp;rsquo;re making the API request from a regular client, this will default to a JSON response. If you&amp;rsquo;re viewing the API in a browser it&amp;rsquo;ll default to the browsable API HTML.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So now you have a Python App Server ready which can communicate via a REST API.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Data Science Mindset</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/05/14/data-science-mindset.html"/>
    <id>https://dev.cloudburo.net/2018/05/14/data-science-mindset.html</id>
    <published>2018-05-14T21:08:45+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;a href="https://towardsdatascience.com/@girardin"&gt;Fabien Girardin&lt;/a&gt; Co-CEA at BBVA Data &amp;amp; Analytics posted a very nice article under the name “
       &lt;a href="https://towardsdatascience.com/the-mindset-for-innovation-with-data-science-fc51605a4867"&gt;The Mindset for Innovation with Data Science&lt;/a&gt;”. He developed a set of principles that are used as a blueprint for how to nurture the mindset for innovation with Data Science.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        First of all he summarized the practice of Data Science in his word, by introducing four different strategic areas:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ol&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Datasets&lt;/span&gt; typically covers data governance, strategic data sources and infrastructures.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Skillsets&lt;/span&gt; are about measuring analytics readiness, managing talent, spreading an evidence-based culture (e.g. creating a shared language), applying Data Science processes, and designing the organizational framework of Data Science teams.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Toolsets&lt;/span&gt; cover the selection of the proper Data Science tools and the application of the best practices throughout the organization.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          A
         &lt;span style="font-weight: bold;"&gt;Mindset&lt;/span&gt; that assembles the animating principles that support the ethos of a Data Science function to deliver value and innovate at the source of a digital transformation.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ol&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As he stated 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;&amp;ldquo;I believe the Mindset is the moving force that transforms the investments in Datasets, Skillsets and Toolsets into economic and cultural impact. Let me try to introduce why and how.”&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In order to nuture the mindset for Innovation he formulated the following 5 value principles
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Culture&lt;/span&gt; over technology
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Polymathy&lt;/span&gt; over expertise
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Ambidexterity&lt;/span&gt; over disruptiveness
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Stories&lt;/span&gt; over sprints
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-weight: bold;"&gt;Ethics&lt;/span&gt; over profits
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In his article Fabien deep-dives into each of the principles and outlines its importance to enable innovation.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        You can read the full article
       &lt;a href="https://towardsdatascience.com/the-mindset-for-innovation-with-data-science-fc51605a4867"&gt;here&lt;/a&gt;.
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Precision banking: The ‘segment of one’:</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/05/12/precision-banking-the-segment-of-one.html"/>
    <id>https://dev.cloudburo.net/2018/05/12/precision-banking-the-segment-of-one.html</id>
    <published>2018-05-12T09:46:48+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      A interesting article about the visionary evolvement of Financial Services.&lt;br/&gt;
    What’s needed to get the ball rolling are courageous CXOs who visualize the eventuality of customer-focused offerings which combines banking practices with behavioral science, and personal finance management - all rolled into one.&lt;br/&gt;
    The segment of one, a missed opportunity? Professors C. K. Prahalad and M. S. Krishnan described the Segment of One as N organizations coming together to solve the need of 1 customer. Every individual customer is recognized as a unique (segment of one) whose environment, lifestyle, personality, preferences, needs and wants are appreciated as different. Current banking solutions are overwhelmingly generic and lack relevance and context for intended customers.&lt;br/&gt;
    Read the full article here.&lt;br/&gt;
    &lt;a href="https://www.thoughtworks.com/insights/blog/precision-banking-segment-one"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>ERC-725 Video Tutorial</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/05/11/erc-725-video-tutorial.html"/>
    <id>https://dev.cloudburo.net/2018/05/11/erc-725-video-tutorial.html</id>
    <published>2018-05-11T07:10:04+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
        Origin, which are building a platform for decentralized peer-to-peer marketplaces, published recently
       &lt;a href="https://medium.com/originprotocol/managing-identity-with-a-ui-for-erc-725-5c7422b38c09"&gt;an excellent tutorial&lt;/a&gt; and Youtube video about “Managing Identity with a UI for ERC 725”.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-725.md"&gt; ERC 725&lt;/a&gt; (and 735) — a proposed standard for managing identity on the blockchain from Fabian Vogelsteller. Fabian works on the Ethereum project and is well known in the community as the creator of the Mist browser and Web3.js.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The standard is about Identities, Claim Issuer and Claim Checker. In a nutshell the concept is described in this comment by Fabian. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/f73feb5ad7e5c6679d36074e439f8678.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;        &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        By the way I found it super useful to subscribe to the ERC-725 comment history on Github to understand how the standard is evolving during its draft phase. You got more or less a live picture of the incremental design process of  an ERC standard.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        But nothing beats a prototype GUI demo when it comes to an easy to follow tutorial of an ERC standard. So thanks to
       &lt;a href="https://medium.com/@nick_p"&gt;Nick Poulden&lt;/a&gt; who assembled this learning video.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;div class="responsive-video"&gt;
        &lt;iframe src="https://www.youtube.com/embed/jjUKWRK8H2g?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
       &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px;"&gt;&lt;i&gt;This blog entry was fully produced within Evernote and published using the &lt;a href="https://publishingbot.cloudburo.net"&gt;Cloudburo Publishing Bot&lt;/a&gt;.&lt;/i&gt;&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Tutorial: Drools Decision Tables in Excel for a Product Proposal</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/05/10/tutorial-drools-decision-tables-in-excel-for-a-product-proposal.html"/>
    <id>https://dev.cloudburo.net/2018/05/10/tutorial-drools-decision-tables-in-excel-for-a-product-proposal.html</id>
    <published>2018-05-10T11:07:02+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;div&gt;
       &lt;span style="font-weight: bold;"&gt;Tutorial Source Repository: &lt;/span&gt;
       &lt;a href="https://github.com/talfco/tutorial-drools-decisiontable" style="font-weight: bold;"&gt;&lt;a href="https://github.com/talfco/tutorial-drools-decisiontable"&gt;https://github.com/talfco/tutorial-drools-decisiontable&lt;/a&gt;&lt;/a&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The Tutorial covers the following points
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Defining a Product Sales Decision Table for a customer in Excel, covering a product proposal, which is
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           dependent of its life stage, accumulated assets as well as expressed needs
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           as well as calculating a discount which can be offered him
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          We will use a Drools Global Variable to communicate back the proposed initial offering
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The official Drools site 
       &lt;a href="http://www.drools.org/"&gt;&lt;a href="http://www.drools.org/"&gt;http://www.drools.org/&lt;/a&gt;&lt;/a&gt; provides the following definitions:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-style: italic;"&gt;Drools is a Business Rules Management System (BRMS) solution. It provides a core Business Rules Engine (BRE), a web authoring and rules management application (Drools Workbench) and an Eclipse IDE plugin for core development.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          This sounds quite huge and complex, but the current design and architecture of of Drools, allows a very lightweight and simple integration of the BRMS in Java applications, which require a flexible, “easy to manage” approach of Business Rules by using spreadsheet(s).
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        This nifty feature is called “Drools Decision Tables in Excel&amp;quot;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Very briefly speaking, in Drools decision tables are a way to generate rules driven from the data entered into a spreadsheet. All the usual features of a spreadsheet for data capture and manipulation can be taken advantage of. Decision tables are a &amp;ldquo;precise yet compact&amp;rdquo; (ref. Wikipedia) way of representing conditional logic, and are well suited to business level rules.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Two kind of objects plays a role in context of the Drools BRMS:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          the Condition Object(s), which defines the input objects required in a decision rule
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          the Action Object(s), which is required in order to store the results of the calculated decision
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Condition Object: Customer&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let’s start with our example:
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We want to model the decision rule of a product proposal for a financial services digital journey which takes into consideration the questions answered by the customer on our web page. It includes the following questions
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          two personal data questions about its current life stage, as well as its current financial assets 
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          a set of customer preferences in context of its financial needs
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The data collected we will store in our Customer class
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/be6a91805e80a8337a147dfbf97e874c.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        We define 3 enum’s in order to differentiate the customer’s question answers given 
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style=""&gt;CustomerNeed, CustomerLifeStage, CustomerAssets&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/94537edf65869b0c908d415e42337f62.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Action Object: Offer&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;The Offer object will store the result of our product offering rule calculation.&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;In our example our offering will consist of a&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style="font-size: 14px;"&gt;Product Package offered by the financial service&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          A list of individual Products
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          A discount of the overall price of the offering. We assume that the base price is not part of this calculation and provided as part of a Product Catalog service.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/17eda1987704abff9a5dedf7ec824d2d.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Also here we keep a enum for the Product Package, as well as the individual Product result.
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/92cae82864a3e38087047483b20acb52.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Decision Table Excel&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having defined the Input and Output Object, it’s time to define the our product offering rule in a Decision Table Excel. Drools Decision Table Excel functionality is very powerful, you can find the full documentation
       &lt;a href="http://docs.jboss.org/drools/release/7.7.0.Final/drools-docs/html_single/#_decision_tables_in_spreadsheets"&gt;here&lt;/a&gt;.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Consider decision tables as a course of action if rules exist that can be expressed as rule templates and data: each row of a decision table provides data that is combined with a template to generate a rule.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        As each row is a rule, the same principles apply. As the rule engine processes the facts, any rules that match may fire. (Some people are confused by this. It is possible to clear the agenda when a rule fires and simulate a very simple decision table where only the first match effects an action.) Also note that you can have multiple tables on one spreadsheet. This way, rules can be grouped where they share common templates, yet at the end of the day they are all combined into one rule package. Decision tables are essentially a tool to generate DRL rules automatically. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So it’s a lightweight and easy to understand approach 
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          for a business analyst to model the rules on the ons side
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          as well as convenient way for a business user to verify and sign-off the rules&lt;br&gt;
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Having the possibility to distribute the rules in multiple tables or separate Excels, allows to handle governance and business ownership in an easy and straightforward way.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        In a normal case the Excel’s are delivered as part of the resource bundle of the JAR file. But you could think of more flexible strategies by loading the Excels during startup from a local or remote location in order not being dependent from code build delivery.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The below screenshot provides an overall overview of a Drools Decision Table Excel
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/0501330c9490c9e296591fb792bd32dc.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        So let’s look at the different part of the Excel.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-weight: bold;"&gt;Rule Set Part&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The Rule Set part consists amongst others (not all options used in the tutorial) of a
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Import row, which imports the above defined decision and action classes.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Variables row, which defines global variables. In our example, we define the Offer class, which is used to store and transfer out the product proposal. As one can see in the later section, the offer variable, will be initialised by the caller and passed by reference to the rule execution.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          Notes row, for a descriptive text.
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/521100aad0ceadf77f096625669afd0e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-weight: bold;"&gt;Rule Table Part - Rule Definition&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The screenshot below shows the Rule Definition Part. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/a03fe87ecdf7171a9e8e5c8237c2020e.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The Name and Condition Column, define left-hand side (LHS) of the decision rule.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          The blue cells, are defining the Code snippet and interpolated values for constructing a constraint within a pattern in a condition. 
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           I.e. the first column condition will pass in the life stage of a Customer to the 9 rules defined, the second column the assets of a Customer and so on 
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          Each row from 11-19 defines one specific rule. In our tutorial we define some rules 
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           for a customer of the life stage *Career Focused”, i.e. which Product Package should be chosen (11),
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           as well which discount should be taken into consideration in context with its accumulated asset (12-15)
         &lt;/div&gt;&lt;/li&gt;
        &lt;li&gt;
         &lt;div&gt;
           furthermore we will propose additional individual products dependent on his expressed needs (16-19)
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/cd7a85515166393b21033c1c22251754.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The action we take for each row is defined in the ACTION columns
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/befbfa8bff469d4ab1cb82ffc8f61570.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          The first action column is used to identify optimal product package, so only relevant for the rule of line 11.
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          The second action column is used propose the single product and relevant for rule line 16-19
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          The third action column is used to calculate a discount and is relevant for rule line 12-15
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        Our tutorial covered some proposal rules mainly for the life stage Career Focused. In a real life example we would have rules for each life stage and multiple rules for any product combination. As already explained above, drools is comfortable to consumer multiple tables and spreadsheets which allows to decompose the offering for example along functional boundaries in order to manage the complexity within a single Excel table.
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Instantiating a Rule Engine &lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;Instantiating a Rule Engine is quite straightforward and can be achieved by establishing a &lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt;KieSession &lt;/span&gt;
       &lt;span style="font-size: 14px;"&gt;&lt;span style="font-size: 14px;"&gt;an passing the Decision Table Excel.&lt;/span&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/62a59b95a38cd8db9b550e8258bd58b4.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Testing the Rules&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;In order to test our rules, we have build up a Customer object, which holds the answers to our questions from a dedicated customer&lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          In our example a customer in life stage CAREERFOCUSED with an asset of 150k-300k and a need for LifeInsurance, Saving Accounts and Mortage
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          The customer will be inserted into the
         &lt;span style=""&gt;KieSession&lt;/span&gt; into which we loaded beforehand our Excel (which is part of our jar file delivery)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          We initialize our action object
         &lt;span style=""&gt;offer&lt;/span&gt;, which will be added as a global variable under the name
         &lt;span style=""&gt;offer&lt;/span&gt; to the KieSession (remember the variable definition in the Excel)
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          It’s time to the calculate the offering by calling
         &lt;span style=""&gt; kSession.fireAllRules()&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
         &lt;span style=""&gt;Having done that our offer Object will have the result of the calculation. In our example&lt;/span&gt;
        &lt;/div&gt;&lt;/li&gt;
       &lt;ul&gt;
        &lt;li&gt;
         &lt;div&gt;
           An offer for the product package CAREERFOCUSED_PACKAGE with a discount of 10%, as well as to additional single products.
         &lt;/div&gt;&lt;/li&gt;
       &lt;/ul&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/b842c4fc36460b30625379b670293f3f.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        The test output will also spill out the compiled decision rules (DSR) from the Excel. So the Excel is just another rule definition concept which will be converted into the powerful DSR drool language and feeded into their Production Rule System with its inference engine. 
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;img class='article  img-thumbnail' src='/images/597a4ee5a1d604c77072dd38fb2372f1.png'&gt;&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;         &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 18px; font-weight: bold;"&gt;Outlook - Future Proof&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 14px;"&gt;By building up a Product Proposal rule engine on top of Drools, you will gain &lt;/span&gt;
      &lt;/div&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;div&gt;
          an easy to model and manage rule definition approach by just using Excel
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          the flexibility to load Excel either out of a JAR or any kind of other local or remote location 
        &lt;/div&gt;&lt;/li&gt;
       &lt;li&gt;
        &lt;div&gt;
          a future proof approach in case the complexity of the rules will grow. I.e. Drools is a hybrid reasoning system which supports forward-reasoning as well as backward-reasoning programming styles and comes with a Business Rules Engine (BRE), a web authoring and rules management application (Drools Workbench) and an Eclipse IDE plugin for core development (should your rule appetite grow)
        &lt;/div&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;div&gt;
       &lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;This blog entry was fully produced within Evernote and published using the &lt;/span&gt;
       &lt;a href="https://publishingbot.cloudburo.net" style="font-size: 11px; font-style: italic;"&gt;Cloudburo Publishing Bot&lt;/a&gt;
       &lt;span style="font-size: 11px; font-style: italic;"&gt;.&lt;/span&gt;
      &lt;/div&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Test Run: Google’s Machine Learning-Based ‘Talk to Books’ Service</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2018/04/23/test-run-googles-machine-learning-based-talk-to-books-service.html"/>
    <id>https://dev.cloudburo.net/2018/04/23/test-run-googles-machine-learning-based-talk-to-books-service.html</id>
    <published>2018-04-23T11:07:31+00:00</published>
    <updated>2019-12-17T12:01:59+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;      A very interesting article how Google is exploiting new machine learning strategies.&lt;br/&gt;
    They recently used machine learning to train an application to answer questions in a very unique way. It scans hundreds of thousands of books and identifies sentences which seem to offer the best response. And it does this by analyzing what it sees as the meaning of the question rather than just matching up keywords. It’s Google’s way of showcasing improved ways of processing natural-language queries.&lt;br/&gt;
    &lt;br/&gt;
    The full article can be found here.&lt;br/&gt;
    &lt;a href="https://thenewstack.io/test-run-googles-machine-learning-based-talk-to-books-service/"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
