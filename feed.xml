<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dev@cloudburo</title>
  <subtitle>Cloudburo Developer Blog</subtitle>
  <id>https://dev.cloudburo.net/</id>
  <link href="https://dev.cloudburo.net/"/>
  <link href="https://dev.cloudburo.net/feed.xml" rel="self"/>
  <updated>2015-04-09T06:25:00Z</updated>
  <author>
    <name>Felix Kuestahler</name>
  </author>
  <entry>
    <title>Docker Small Hints #1:  High Level Concepts Elastic Beanstalk</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/09/docker-small-hints-1-high-level-concepts-elastic-beanstalk.html"/>
    <id>https://dev.cloudburo.net/2015/04/09/docker-small-hints-1-high-level-concepts-elastic-beanstalk.html</id>
    <published>2015-04-09T06:25:00Z</published>
    <updated>2015-04-09T08:46:13+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt;
        Cloud Platforms are normally highly generic and configurable and it’s easy to loose overview, what can be configured or modified where. So I assembled some of the main high level concepts for AWS Elastic Beanstalk.&amp;nbsp; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;b&gt;&lt;span style="font-size:24px;"&gt;Level 0: Concepts&lt;/span&gt;&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;Elastic Beanstalk is structured around the 3 high level concepts. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;A&amp;nbsp;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Version&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt; of an (&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Docker)&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Application&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt; is running in one &lt;/span&gt;&lt;/i&gt; 
       &lt;i&gt;&lt;span style="font-size:18px;"&gt;&lt;b&gt;Environment&lt;/b&gt;&lt;/span&gt;&lt;/i&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;Elastic Beanstalk allows you to&amp;nbsp;run in parallel 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;i&gt;&lt;b&gt;Multiple Versions&lt;/b&gt;&lt;/i&gt; 
       &lt;i&gt; of &lt;/i&gt; 
       &lt;i&gt;&lt;b&gt;multiple (Docker) Applications&lt;/b&gt;&lt;/i&gt; 
       &lt;i&gt; in &lt;/i&gt; 
       &lt;i&gt;&lt;b&gt;multiple Environments&lt;/b&gt;&lt;/i&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;The Dashboard will show you all deployed 
       &lt;b&gt;Applications&lt;/b&gt; which can be running in multiple&amp;nbsp; 
       &lt;b&gt;Environments&lt;/b&gt;. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;In the screenshot below we have one Docker Application „ 
       &lt;i&gt;curationApp“&lt;/i&gt; which has to two environments&amp;nbsp;„ 
       &lt;i&gt;curationApp-prod&lt;/i&gt;“ and „ 
       &lt;i&gt;curationApp-test&amp;quot;&lt;/i&gt; 
       &lt;br&gt; 
      &lt;/div&gt; &lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/95051bbe9efdb4532199204d0f61fd2e.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;div&gt; 
       &lt;br&gt;An 
       &lt;b&gt;Environment&lt;/b&gt; may run one of your released docker&amp;nbsp;Application Versions. You could now „ 
       &lt;i&gt;Deploy&lt;/i&gt;“ one of your versions to one of your Environments. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;In the example below the environment &amp;ldquo; 
       &lt;i&gt;curationApp-prod&amp;rdquo;&lt;/i&gt; is running Version 0.0.5. 
      &lt;/div&gt; &lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/22c0aadeda311a7a7ede6ab4973ba58d.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
       &lt;b&gt;&lt;span style="font-size:24px;"&gt;Level 1: Concepts&lt;/span&gt;&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;By selecting an 
       &lt;b&gt;Environment&lt;/b&gt; you will see the Dashboard of the running 
       &lt;b&gt;Application Version&lt;/b&gt;&amp;nbsp;which is configured on a AWS 
       &lt;b&gt;Solution Stack&lt;/b&gt;. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;In our example below this a Docker solution running on Amazon Linux. 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;A running Environment has a 
       &lt;b&gt;Health Status&lt;/b&gt; and an associated&amp;nbsp; 
       &lt;b&gt;Configuration.&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;It’s processing can be checked via 
       &lt;b&gt;Logs&lt;/b&gt;, 
       &lt;b&gt;Realtime Monitors, Events&lt;/b&gt; or 
       &lt;b&gt;Alarms.&lt;/b&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;Furthermore an Environment may be complemented with&amp;nbsp; 
       &lt;b&gt;Tags&lt;/b&gt;.&amp;nbsp; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt; 
       &lt;b&gt;Configuration&lt;/b&gt;, 
       &lt;b&gt;Alarms&lt;/b&gt; and 
       &lt;b&gt;Tags&lt;/b&gt; may be maintained a set according to your needs. 
      &lt;/div&gt; &lt;/p&gt;
    
  &lt;/div&gt;
  &lt;img class="img-responsive img-thumbnail article" src="/images/2a86af971f134a9e2fbd2c7a4ca91115.png" /&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
       &lt;span style="font-size:24px;"&gt;&lt;b&gt;Main Workflow&lt;/b&gt;&lt;/span&gt; 
       &lt;div&gt; 
        &lt;br&gt; 
       &lt;/div&gt;The Main Workflow consists of the following step: 
      &lt;/div&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;b&gt;Baseline&lt;/b&gt;&amp;nbsp;your Docker Application Directory (e.g. checkin to git)&lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Create&lt;/b&gt; an new &lt;b&gt;Application Version ZIP File&lt;/b&gt; of your baselined Docker Application &lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Transfer&lt;/b&gt; the &lt;b&gt;Application Version ZIP File&lt;/b&gt; to your Amazon &lt;b&gt;S3&lt;/b&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Configure&lt;/b&gt; &amp;nbsp;an &lt;b&gt;Beanstalk&lt;/b&gt; &lt;b&gt;Application Version&lt;/b&gt; item&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;b&gt;Deploy&lt;/b&gt; the new &lt;b&gt;Beanstalk&lt;/b&gt;&amp;nbsp;&lt;b&gt;Application Version&lt;/b&gt; to a&amp;nbsp;&lt;b&gt;Beanstalk&amp;nbsp;Environment&amp;nbsp;&lt;/b&gt;&lt;/li&gt; 
       &lt;li&gt;The Deploy will &lt;b&gt;Restart and Reconfigure&lt;/b&gt; the Environment&lt;/li&gt; 
      &lt;/ul&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Gradle Small Hints #1 - Zipping up a file tree</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/08/gradle-small-hints-1-zipping-up-a-file-tree.html"/>
    <id>https://dev.cloudburo.net/2015/04/08/gradle-small-hints-1-zipping-up-a-file-tree.html</id>
    <published>2015-04-08T08:38:00Z</published>
    <updated>2015-04-08T21:44:09+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;&lt;p&gt;&lt;span/&gt;      &lt;div&gt;
    Don’t know but&amp;nbsp; took me some time to figure out how to ZIP up a project directory required for my AWS Elastic Beanstalk Deployment. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    The task will collect all relevant files for my project directory (which contains the docker configuration) and writes it into the build directly. 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
task myZip(type: Zip) {
   from ('.')
   include '**/*.groovy'
   include '**/*.config'
   include '*'
   exclude '.gradle'
   exclude '.settings'
   exclude 'bin'
   exclude 'build'
   exclude 'logs'
   exclude 'src/test'
   exclude '.classpath'
   exclude '.project'
   into '.'
   destinationDir(file("build")) 
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 

&lt;p&gt;&lt;div&gt;
    Or also possible 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
task dockerZip(type: Zip) { 
    from fileTree(dir: '.', 
    includes: ['**/*.groovy', '**/*.config','*'], 
    excludes: ['.gradle','.settings','bin','build','logs','src/test','.classpath','.project']) 
    into '.'
   destinationDir(file("build")) 
  } 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/span&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;span style=""&gt;&lt;br&gt;&lt;/span&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;span style="font-size: 11px;"&gt;&lt;span style=""&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;/div&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A Service is a Logical Construct Built by Microservices</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/04/02/a-service-is-a-logical-construct-built-by-microservices.html"/>
    <id>https://dev.cloudburo.net/2015/04/02/a-service-is-a-logical-construct-built-by-microservices.html</id>
    <published>2015-04-02T02:01:39Z</published>
    <updated>2015-04-07T22:57:14+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        This is a very interesting article&amp;nbsp;by 
       &lt;a href="http://www.infoq.com/author/Jan-Stenberg" rel="nofollow"&gt;Jan Stenberg&lt;/a&gt;, which shows how a Service and Microservice are interrelated.&amp;nbsp; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        He is building services around business capabilities,&amp;nbsp;&amp;nbsp;a strategy which we are following within UBS&amp;nbsp;AG as well in order to organize the interfaces on the large-scale business domain landscape. The importance of the Business Capabilities emerged in the recent year in the Business Architecture space&amp;nbsp;and is helping us a lot in&amp;nbsp;discussion with the business and their strategic planning. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;&lt;br&gt;&lt;/i&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;A service is a logical construct owning a business capability and made up of internal autonomous components or microservices that together fulfil all responsibilities of the service&lt;/i&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        The article exploits some work in context of technical authority and shows four rules for defining a service 
      &lt;/div&gt; 
      &lt;ul&gt; 
       &lt;li&gt;&lt;i&gt;Is the technical authority for a given business capability.&lt;/i&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;i&gt;Is the owner of all the data and business rules that support this business capability wherever it is needed.&lt;/i&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;i&gt;Forms a single source of truth for that capability.&lt;/i&gt;&lt;/li&gt; 
       &lt;li&gt;&lt;i&gt;Ensures we can maintain autonomy and encapsulation.&lt;/i&gt;&lt;/li&gt; 
      &lt;/ul&gt; 
      &lt;div&gt;
        Some findings which we also apply in our day2day integration architecture work. The full article is worth a read and can be found here: 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://www.infoq.com/news/2015/03/microservices-logical-services?utm_campaign=infoq_content&amp;amp;utm_source=infoq&amp;amp;utm_medium=feed&amp;amp;utm_term=global"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>A Modern Microservices Architecture By Gilt</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/03/28/a-modern-microservices-architecture-by-gilt.html"/>
    <id>https://dev.cloudburo.net/2015/03/28/a-modern-microservices-architecture-by-gilt.html</id>
    <published>2015-03-28T09:06:18Z</published>
    <updated>2015-04-07T22:57:13+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt; 
       &lt;a href="http://www.yonigoldberg.com/" rel="nofollow"&gt;Yoni Goldberg&lt;/a&gt;&amp;nbsp;explains in a presentation at the&amp;nbsp; 
       &lt;a href="http://qconlondon.com/" rel="nofollow"&gt;QCon London&lt;/a&gt; conference&amp;nbsp; the challenges they encountered moving to a micro-services architecture. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;After living with micro services for three years at Gilt we can see advantages in team ownership, boundaries defined by APIs and complex problems broken down into small ones. Challenges still exists in tooling, integration environments and monitoring&lt;/i&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        The article&amp;nbsp; explains how they moved from Ruby on Rails, over to the JVM with macro- and micro services, which solved 99% of their scaling&amp;nbsp;but left some of the problems developers experienced with the new services being semi-monolithic and lacking&amp;nbsp;clear ownership of code. The tackled the problem by increasing the number of micro services. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Go on read the full article&amp;nbsp;on the below link. 
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://www.infoq.com/news/2015/03/microservices-architecture-gilt?utm_campaign=infoq_content&amp;amp;utm_source=infoq&amp;amp;utm_medium=feed&amp;amp;utm_term=global"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Uber Unveils its Realtime Market Platform</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/03/16/uber-unveils-its-realtime-market-platform.html"/>
    <id>https://dev.cloudburo.net/2015/03/16/uber-unveils-its-realtime-market-platform.html</id>
    <published>2015-03-16T06:36:00Z</published>
    <updated>2015-04-07T22:57:13+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt;
        Interesting article by Matt Ranney, Chief Systems Architect at Uber which gives an overview of their dispatch system for matching drivers&amp;nbsp;and riders. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        He outlines the architectural principles that underpin the implementation, which gives an view how they approached the &amp;nbsp;problem. You can find the article in the link below. 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Very interesting approach to data center failure: 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;&amp;ldquo;Uber&amp;rsquo;s approach to data center failure is ingenious. No data is replicated across data centers, as that puts a lot of constraints on availability and consistency. Uber uses the driver&amp;rsquo;s phones to distribute the data. Given that the driver&amp;rsquo;s phones post location updates to the server every four seconds, the server periodically replies with an encrypted state digest. If a data center fails the driver will contact a new data center to post a location update. The new data center doesn&amp;rsquo;t know anything about this particular driver so it asks for the state digest and picks up from there.&amp;rdquo;&lt;/i&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;&lt;br&gt;&lt;/i&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;&lt;br&gt;&lt;/i&gt; 
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://www.infoq.com/news/2015/03/uber-realtime-market-platform?utm_campaign=infoq_content&amp;amp;utm_source=infoq&amp;amp;utm_medium=feed&amp;amp;utm_term=global"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Microservice Competencies by Martin Fowler</title>
    <link rel="alternate" href="https://dev.cloudburo.net/2015/03/15/microservice-competencies-by-martin-fowler.html"/>
    <id>https://dev.cloudburo.net/2015/03/15/microservice-competencies-by-martin-fowler.html</id>
    <published>2015-03-15T09:22:29Z</published>
    <updated>2015-04-07T22:57:12+00:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="row"&gt;
  &lt;div class="article"&gt;
    &lt;p&gt;&lt;span/&gt;&lt;br&gt;
      &lt;div&gt;
        There is a quite a hype in the Mircoservice architecture style, so it’s good that one of the well-known architecture heavy-weight&amp;nbsp;is listing&amp;nbsp;&amp;nbsp;some important competencies necessary to successfully work with this style.&amp;nbsp; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        Martin Fowler outlines in this article the trade-offs and operational consequences of a micro service&amp;nbsp;architecture : 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;In particular with microservices there are serious consequences for operations, who now have to handle an ecosystem of small services rather than a single, well-defined monolith. Consequently if you don&amp;rsquo;t have certain baseline competencies, you shouldn&amp;rsquo;t consider using the microservice style.&lt;/i&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;ul&gt; 
       &lt;li&gt;Rapid Provisioning&lt;/li&gt; 
       &lt;li&gt;Basic Monitoring&lt;/li&gt; 
       &lt;li&gt;Rapid Application Deployment&lt;/li&gt; 
      &lt;/ul&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt;
        will be key.&amp;nbsp; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;i&gt;With this kind of setup in place, you&amp;rsquo;re ready for a first system using a handful of microservices. Deploy this system and use it in production, expect to learn a lot about keeping it healthy and ensuring the devops collaboration is working well. Give yourself time to do this, learn from it, and grow more capability before you ramp up your number of services.&lt;/i&gt; 
      &lt;/div&gt; 
      &lt;div&gt; 
       &lt;br&gt; 
      &lt;/div&gt;&lt;/p&gt;
    
    &lt;p&gt;&lt;a href="http://martinfowler.com/bliki/MicroservicePrerequisites.html"&gt;Link&lt;/a&gt;&lt;/p&gt;
    
  &lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
